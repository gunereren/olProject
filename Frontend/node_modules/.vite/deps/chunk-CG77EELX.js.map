{
  "version": 3,
  "sources": ["../../ol/source/Source.js", "../../quickselect/index.js", "../../rbush/index.js", "../../ol/structs/RBush.js", "../../ol/source/VectorEventType.js", "../../ol/loadingstrategy.js", "../../ol/featureloader.js", "../../ol/source/Vector.js", "../../ol/ImageState.js", "../../ol/ImageBase.js", "../../ol/Image.js", "../../ol/renderer/Layer.js", "../../ol/renderer/canvas/Layer.js"],
  "sourcesContent": ["/**\r\n * @module ol/source/Source\r\n */\r\nimport BaseObject from '../Object.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n/**\r\n * @typedef {'undefined' | 'loading' | 'ready' | 'error'} State\r\n * State of the source, one of 'undefined', 'loading', 'ready' or 'error'.\r\n */\r\n\r\n/**\r\n * A function that takes a {@link import(\"../View.js\").ViewStateLayerStateExtent} and returns a string or\r\n * an array of strings representing source attributions.\r\n *\r\n * @typedef {function(import(\"../View.js\").ViewStateLayerStateExtent): (string|Array<string>)} Attribution\r\n */\r\n\r\n/**\r\n * A type that can be used to provide attribution information for data sources.\r\n *\r\n * It represents either\r\n * * a simple string (e.g. `'\u00A9 Acme Inc.'`)\r\n * * an array of simple strings (e.g. `['\u00A9 Acme Inc.', '\u00A9 Bacme Inc.']`)\r\n * * a function that returns a string or array of strings ({@link module:ol/source/Source~Attribution})\r\n *\r\n * @typedef {string|Array<string>|Attribution} AttributionLike\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {import(\"./Source.js\").State} [state='ready'] State.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for {@link module:ol/layer/Layer~Layer} sources.\r\n *\r\n * A generic `change` event is triggered when the state of the source changes.\r\n * @abstract\r\n * @api\r\n */\r\nclass Source extends BaseObject {\r\n  /**\r\n   * @param {Options} options Source options.\r\n   */\r\n  constructor(options) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../proj/Projection.js\").default|null}\r\n     */\r\n    this.projection = getProjection(options.projection);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Attribution}\r\n     */\r\n    this.attributions_ = adaptAttributions(options.attributions);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.attributionsCollapsible_ =\r\n      options.attributionsCollapsible !== undefined\r\n        ? options.attributionsCollapsible\r\n        : true;\r\n\r\n    /**\r\n     * This source is currently loading data. Sources that defer loading to the\r\n     * map's tile queue never set this to `true`.\r\n     * @type {boolean}\r\n     */\r\n    this.loading = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Source.js\").State}\r\n     */\r\n    this.state_ = options.state !== undefined ? options.state : 'ready';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.wrapX_ = options.wrapX !== undefined ? options.wrapX : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate_ = !!options.interpolate;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(import(\"../View.js\").ViewOptions):void}\r\n     */\r\n    this.viewResolver = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(Error):void}\r\n     */\r\n    this.viewRejector = null;\r\n\r\n    const self = this;\r\n    /**\r\n     * @private\r\n     * @type {Promise<import(\"../View.js\").ViewOptions>}\r\n     */\r\n    this.viewPromise_ = new Promise(function (resolve, reject) {\r\n      self.viewResolver = resolve;\r\n      self.viewRejector = reject;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get the attribution function for the source.\r\n   * @return {?Attribution} Attribution function.\r\n   * @api\r\n   */\r\n  getAttributions() {\r\n    return this.attributions_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Attributions are collapsible.\r\n   * @api\r\n   */\r\n  getAttributionsCollapsible() {\r\n    return this.attributionsCollapsible_;\r\n  }\r\n\r\n  /**\r\n   * Get the projection of the source.\r\n   * @return {import(\"../proj/Projection.js\").default|null} Projection.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @return {Promise<import(\"../View.js\").ViewOptions>} A promise for view-related properties.\r\n   */\r\n  getView() {\r\n    return this.viewPromise_;\r\n  }\r\n\r\n  /**\r\n   * Get the state of the source, see {@link import(\"./Source.js\").State} for possible states.\r\n   * @return {import(\"./Source.js\").State} State.\r\n   * @api\r\n   */\r\n  getState() {\r\n    return this.state_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean|undefined} Wrap X.\r\n   */\r\n  getWrapX() {\r\n    return this.wrapX_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Use linear interpolation when resampling.\r\n   */\r\n  getInterpolate() {\r\n    return this.interpolate_;\r\n  }\r\n\r\n  /**\r\n   * Refreshes the source. The source will be cleared, and data from the server will be reloaded.\r\n   * @api\r\n   */\r\n  refresh() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the attributions of the source.\r\n   * @param {AttributionLike|undefined} attributions Attributions.\r\n   *     Can be passed as `string`, `Array<string>`, {@link module:ol/source/Source~Attribution},\r\n   *     or `undefined`.\r\n   * @api\r\n   */\r\n  setAttributions(attributions) {\r\n    this.attributions_ = adaptAttributions(attributions);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the state of the source.\r\n   * @param {import(\"./Source.js\").State} state State.\r\n   */\r\n  setState(state) {\r\n    this.state_ = state;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n/**\r\n * Turns the attributions option into an attributions function.\r\n * @param {AttributionLike|undefined} attributionLike The attribution option.\r\n * @return {Attribution|null} An attribution function (or null).\r\n */\r\nfunction adaptAttributions(attributionLike) {\r\n  if (!attributionLike) {\r\n    return null;\r\n  }\r\n  if (Array.isArray(attributionLike)) {\r\n    return function (frameState) {\r\n      return attributionLike;\r\n    };\r\n  }\r\n\r\n  if (typeof attributionLike === 'function') {\r\n    return attributionLike;\r\n  }\r\n\r\n  return function (frameState) {\r\n    return [attributionLike];\r\n  };\r\n}\r\n\r\nexport default Source;\r\n", "\r\nexport default function quickselect(arr, k, left, right, compare) {\r\n    quickselectStep(arr, k, left || 0, right || (arr.length - 1), compare || defaultCompare);\r\n}\r\n\r\nfunction quickselectStep(arr, k, left, right, compare) {\r\n\r\n    while (right > left) {\r\n        if (right - left > 600) {\r\n            var n = right - left + 1;\r\n            var m = k - left + 1;\r\n            var z = Math.log(n);\r\n            var s = 0.5 * Math.exp(2 * z / 3);\r\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n) * (m - n / 2 < 0 ? -1 : 1);\r\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\r\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\r\n            quickselectStep(arr, k, newLeft, newRight, compare);\r\n        }\r\n\r\n        var t = arr[k];\r\n        var i = left;\r\n        var j = right;\r\n\r\n        swap(arr, left, k);\r\n        if (compare(arr[right], t) > 0) swap(arr, left, right);\r\n\r\n        while (i < j) {\r\n            swap(arr, i, j);\r\n            i++;\r\n            j--;\r\n            while (compare(arr[i], t) < 0) i++;\r\n            while (compare(arr[j], t) > 0) j--;\r\n        }\r\n\r\n        if (compare(arr[left], t) === 0) swap(arr, left, j);\r\n        else {\r\n            j++;\r\n            swap(arr, j, right);\r\n        }\r\n\r\n        if (j <= k) left = j + 1;\r\n        if (k <= j) right = j - 1;\r\n    }\r\n}\r\n\r\nfunction swap(arr, i, j) {\r\n    var tmp = arr[i];\r\n    arr[i] = arr[j];\r\n    arr[j] = tmp;\r\n}\r\n\r\nfunction defaultCompare(a, b) {\r\n    return a < b ? -1 : a > b ? 1 : 0;\r\n}\r\n", "import quickselect from 'quickselect';\r\n\r\nexport default class RBush {\r\n    constructor(maxEntries = 9) {\r\n        // max entries in a node is 9 by default; min node fill is 40% for best performance\r\n        this._maxEntries = Math.max(4, maxEntries);\r\n        this._minEntries = Math.max(2, Math.ceil(this._maxEntries * 0.4));\r\n        this.clear();\r\n    }\r\n\r\n    all() {\r\n        return this._all(this.data, []);\r\n    }\r\n\r\n    search(bbox) {\r\n        let node = this.data;\r\n        const result = [];\r\n\r\n        if (!intersects(bbox, node)) return result;\r\n\r\n        const toBBox = this.toBBox;\r\n        const nodesToSearch = [];\r\n\r\n        while (node) {\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                const childBBox = node.leaf ? toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf) result.push(child);\r\n                    else if (contains(bbox, childBBox)) this._all(child, result);\r\n                    else nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    collides(bbox) {\r\n        let node = this.data;\r\n\r\n        if (!intersects(bbox, node)) return false;\r\n\r\n        const nodesToSearch = [];\r\n        while (node) {\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                const childBBox = node.leaf ? this.toBBox(child) : child;\r\n\r\n                if (intersects(bbox, childBBox)) {\r\n                    if (node.leaf || contains(bbox, childBBox)) return true;\r\n                    nodesToSearch.push(child);\r\n                }\r\n            }\r\n            node = nodesToSearch.pop();\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    load(data) {\r\n        if (!(data && data.length)) return this;\r\n\r\n        if (data.length < this._minEntries) {\r\n            for (let i = 0; i < data.length; i++) {\r\n                this.insert(data[i]);\r\n            }\r\n            return this;\r\n        }\r\n\r\n        // recursively build the tree with the given data from scratch using OMT algorithm\r\n        let node = this._build(data.slice(), 0, data.length - 1, 0);\r\n\r\n        if (!this.data.children.length) {\r\n            // save as is if tree is empty\r\n            this.data = node;\r\n\r\n        } else if (this.data.height === node.height) {\r\n            // split root if trees have the same height\r\n            this._splitRoot(this.data, node);\r\n\r\n        } else {\r\n            if (this.data.height < node.height) {\r\n                // swap trees if inserted one is bigger\r\n                const tmpNode = this.data;\r\n                this.data = node;\r\n                node = tmpNode;\r\n            }\r\n\r\n            // insert the small tree into the large tree at appropriate level\r\n            this._insert(node, this.data.height - node.height - 1, true);\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    insert(item) {\r\n        if (item) this._insert(item, this.data.height - 1);\r\n        return this;\r\n    }\r\n\r\n    clear() {\r\n        this.data = createNode([]);\r\n        return this;\r\n    }\r\n\r\n    remove(item, equalsFn) {\r\n        if (!item) return this;\r\n\r\n        let node = this.data;\r\n        const bbox = this.toBBox(item);\r\n        const path = [];\r\n        const indexes = [];\r\n        let i, parent, goingUp;\r\n\r\n        // depth-first iterative tree traversal\r\n        while (node || path.length) {\r\n\r\n            if (!node) { // go up\r\n                node = path.pop();\r\n                parent = path[path.length - 1];\r\n                i = indexes.pop();\r\n                goingUp = true;\r\n            }\r\n\r\n            if (node.leaf) { // check current node\r\n                const index = findItem(item, node.children, equalsFn);\r\n\r\n                if (index !== -1) {\r\n                    // item found, remove the item and condense tree upwards\r\n                    node.children.splice(index, 1);\r\n                    path.push(node);\r\n                    this._condense(path);\r\n                    return this;\r\n                }\r\n            }\r\n\r\n            if (!goingUp && !node.leaf && contains(node, bbox)) { // go down\r\n                path.push(node);\r\n                indexes.push(i);\r\n                i = 0;\r\n                parent = node;\r\n                node = node.children[0];\r\n\r\n            } else if (parent) { // go right\r\n                i++;\r\n                node = parent.children[i];\r\n                goingUp = false;\r\n\r\n            } else node = null; // nothing found\r\n        }\r\n\r\n        return this;\r\n    }\r\n\r\n    toBBox(item) { return item; }\r\n\r\n    compareMinX(a, b) { return a.minX - b.minX; }\r\n    compareMinY(a, b) { return a.minY - b.minY; }\r\n\r\n    toJSON() { return this.data; }\r\n\r\n    fromJSON(data) {\r\n        this.data = data;\r\n        return this;\r\n    }\r\n\r\n    _all(node, result) {\r\n        const nodesToSearch = [];\r\n        while (node) {\r\n            if (node.leaf) result.push(...node.children);\r\n            else nodesToSearch.push(...node.children);\r\n\r\n            node = nodesToSearch.pop();\r\n        }\r\n        return result;\r\n    }\r\n\r\n    _build(items, left, right, height) {\r\n\r\n        const N = right - left + 1;\r\n        let M = this._maxEntries;\r\n        let node;\r\n\r\n        if (N <= M) {\r\n            // reached leaf level; return leaf\r\n            node = createNode(items.slice(left, right + 1));\r\n            calcBBox(node, this.toBBox);\r\n            return node;\r\n        }\r\n\r\n        if (!height) {\r\n            // target height of the bulk-loaded tree\r\n            height = Math.ceil(Math.log(N) / Math.log(M));\r\n\r\n            // target number of root entries to maximize storage utilization\r\n            M = Math.ceil(N / Math.pow(M, height - 1));\r\n        }\r\n\r\n        node = createNode([]);\r\n        node.leaf = false;\r\n        node.height = height;\r\n\r\n        // split the items into M mostly square tiles\r\n\r\n        const N2 = Math.ceil(N / M);\r\n        const N1 = N2 * Math.ceil(Math.sqrt(M));\r\n\r\n        multiSelect(items, left, right, N1, this.compareMinX);\r\n\r\n        for (let i = left; i <= right; i += N1) {\r\n\r\n            const right2 = Math.min(i + N1 - 1, right);\r\n\r\n            multiSelect(items, i, right2, N2, this.compareMinY);\r\n\r\n            for (let j = i; j <= right2; j += N2) {\r\n\r\n                const right3 = Math.min(j + N2 - 1, right2);\r\n\r\n                // pack each entry recursively\r\n                node.children.push(this._build(items, j, right3, height - 1));\r\n            }\r\n        }\r\n\r\n        calcBBox(node, this.toBBox);\r\n\r\n        return node;\r\n    }\r\n\r\n    _chooseSubtree(bbox, node, level, path) {\r\n        while (true) {\r\n            path.push(node);\r\n\r\n            if (node.leaf || path.length - 1 === level) break;\r\n\r\n            let minArea = Infinity;\r\n            let minEnlargement = Infinity;\r\n            let targetNode;\r\n\r\n            for (let i = 0; i < node.children.length; i++) {\r\n                const child = node.children[i];\r\n                const area = bboxArea(child);\r\n                const enlargement = enlargedArea(bbox, child) - area;\r\n\r\n                // choose entry with the least area enlargement\r\n                if (enlargement < minEnlargement) {\r\n                    minEnlargement = enlargement;\r\n                    minArea = area < minArea ? area : minArea;\r\n                    targetNode = child;\r\n\r\n                } else if (enlargement === minEnlargement) {\r\n                    // otherwise choose one with the smallest area\r\n                    if (area < minArea) {\r\n                        minArea = area;\r\n                        targetNode = child;\r\n                    }\r\n                }\r\n            }\r\n\r\n            node = targetNode || node.children[0];\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    _insert(item, level, isNode) {\r\n        const bbox = isNode ? item : this.toBBox(item);\r\n        const insertPath = [];\r\n\r\n        // find the best node for accommodating the item, saving all nodes along the path too\r\n        const node = this._chooseSubtree(bbox, this.data, level, insertPath);\r\n\r\n        // put the item into the node\r\n        node.children.push(item);\r\n        extend(node, bbox);\r\n\r\n        // split on node overflow; propagate upwards if necessary\r\n        while (level >= 0) {\r\n            if (insertPath[level].children.length > this._maxEntries) {\r\n                this._split(insertPath, level);\r\n                level--;\r\n            } else break;\r\n        }\r\n\r\n        // adjust bboxes along the insertion path\r\n        this._adjustParentBBoxes(bbox, insertPath, level);\r\n    }\r\n\r\n    // split overflowed node into two\r\n    _split(insertPath, level) {\r\n        const node = insertPath[level];\r\n        const M = node.children.length;\r\n        const m = this._minEntries;\r\n\r\n        this._chooseSplitAxis(node, m, M);\r\n\r\n        const splitIndex = this._chooseSplitIndex(node, m, M);\r\n\r\n        const newNode = createNode(node.children.splice(splitIndex, node.children.length - splitIndex));\r\n        newNode.height = node.height;\r\n        newNode.leaf = node.leaf;\r\n\r\n        calcBBox(node, this.toBBox);\r\n        calcBBox(newNode, this.toBBox);\r\n\r\n        if (level) insertPath[level - 1].children.push(newNode);\r\n        else this._splitRoot(node, newNode);\r\n    }\r\n\r\n    _splitRoot(node, newNode) {\r\n        // split root node\r\n        this.data = createNode([node, newNode]);\r\n        this.data.height = node.height + 1;\r\n        this.data.leaf = false;\r\n        calcBBox(this.data, this.toBBox);\r\n    }\r\n\r\n    _chooseSplitIndex(node, m, M) {\r\n        let index;\r\n        let minOverlap = Infinity;\r\n        let minArea = Infinity;\r\n\r\n        for (let i = m; i <= M - m; i++) {\r\n            const bbox1 = distBBox(node, 0, i, this.toBBox);\r\n            const bbox2 = distBBox(node, i, M, this.toBBox);\r\n\r\n            const overlap = intersectionArea(bbox1, bbox2);\r\n            const area = bboxArea(bbox1) + bboxArea(bbox2);\r\n\r\n            // choose distribution with minimum overlap\r\n            if (overlap < minOverlap) {\r\n                minOverlap = overlap;\r\n                index = i;\r\n\r\n                minArea = area < minArea ? area : minArea;\r\n\r\n            } else if (overlap === minOverlap) {\r\n                // otherwise choose distribution with minimum area\r\n                if (area < minArea) {\r\n                    minArea = area;\r\n                    index = i;\r\n                }\r\n            }\r\n        }\r\n\r\n        return index || M - m;\r\n    }\r\n\r\n    // sorts node children by the best axis for split\r\n    _chooseSplitAxis(node, m, M) {\r\n        const compareMinX = node.leaf ? this.compareMinX : compareNodeMinX;\r\n        const compareMinY = node.leaf ? this.compareMinY : compareNodeMinY;\r\n        const xMargin = this._allDistMargin(node, m, M, compareMinX);\r\n        const yMargin = this._allDistMargin(node, m, M, compareMinY);\r\n\r\n        // if total distributions margin value is minimal for x, sort by minX,\r\n        // otherwise it's already sorted by minY\r\n        if (xMargin < yMargin) node.children.sort(compareMinX);\r\n    }\r\n\r\n    // total margin of all possible split distributions where each node is at least m full\r\n    _allDistMargin(node, m, M, compare) {\r\n        node.children.sort(compare);\r\n\r\n        const toBBox = this.toBBox;\r\n        const leftBBox = distBBox(node, 0, m, toBBox);\r\n        const rightBBox = distBBox(node, M - m, M, toBBox);\r\n        let margin = bboxMargin(leftBBox) + bboxMargin(rightBBox);\r\n\r\n        for (let i = m; i < M - m; i++) {\r\n            const child = node.children[i];\r\n            extend(leftBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(leftBBox);\r\n        }\r\n\r\n        for (let i = M - m - 1; i >= m; i--) {\r\n            const child = node.children[i];\r\n            extend(rightBBox, node.leaf ? toBBox(child) : child);\r\n            margin += bboxMargin(rightBBox);\r\n        }\r\n\r\n        return margin;\r\n    }\r\n\r\n    _adjustParentBBoxes(bbox, path, level) {\r\n        // adjust bboxes along the given tree path\r\n        for (let i = level; i >= 0; i--) {\r\n            extend(path[i], bbox);\r\n        }\r\n    }\r\n\r\n    _condense(path) {\r\n        // go through the path, removing empty nodes and updating bboxes\r\n        for (let i = path.length - 1, siblings; i >= 0; i--) {\r\n            if (path[i].children.length === 0) {\r\n                if (i > 0) {\r\n                    siblings = path[i - 1].children;\r\n                    siblings.splice(siblings.indexOf(path[i]), 1);\r\n\r\n                } else this.clear();\r\n\r\n            } else calcBBox(path[i], this.toBBox);\r\n        }\r\n    }\r\n}\r\n\r\nfunction findItem(item, items, equalsFn) {\r\n    if (!equalsFn) return items.indexOf(item);\r\n\r\n    for (let i = 0; i < items.length; i++) {\r\n        if (equalsFn(item, items[i])) return i;\r\n    }\r\n    return -1;\r\n}\r\n\r\n// calculate node's bbox from bboxes of its children\r\nfunction calcBBox(node, toBBox) {\r\n    distBBox(node, 0, node.children.length, toBBox, node);\r\n}\r\n\r\n// min bounding rectangle of node children from k to p-1\r\nfunction distBBox(node, k, p, toBBox, destNode) {\r\n    if (!destNode) destNode = createNode(null);\r\n    destNode.minX = Infinity;\r\n    destNode.minY = Infinity;\r\n    destNode.maxX = -Infinity;\r\n    destNode.maxY = -Infinity;\r\n\r\n    for (let i = k; i < p; i++) {\r\n        const child = node.children[i];\r\n        extend(destNode, node.leaf ? toBBox(child) : child);\r\n    }\r\n\r\n    return destNode;\r\n}\r\n\r\nfunction extend(a, b) {\r\n    a.minX = Math.min(a.minX, b.minX);\r\n    a.minY = Math.min(a.minY, b.minY);\r\n    a.maxX = Math.max(a.maxX, b.maxX);\r\n    a.maxY = Math.max(a.maxY, b.maxY);\r\n    return a;\r\n}\r\n\r\nfunction compareNodeMinX(a, b) { return a.minX - b.minX; }\r\nfunction compareNodeMinY(a, b) { return a.minY - b.minY; }\r\n\r\nfunction bboxArea(a)   { return (a.maxX - a.minX) * (a.maxY - a.minY); }\r\nfunction bboxMargin(a) { return (a.maxX - a.minX) + (a.maxY - a.minY); }\r\n\r\nfunction enlargedArea(a, b) {\r\n    return (Math.max(b.maxX, a.maxX) - Math.min(b.minX, a.minX)) *\r\n           (Math.max(b.maxY, a.maxY) - Math.min(b.minY, a.minY));\r\n}\r\n\r\nfunction intersectionArea(a, b) {\r\n    const minX = Math.max(a.minX, b.minX);\r\n    const minY = Math.max(a.minY, b.minY);\r\n    const maxX = Math.min(a.maxX, b.maxX);\r\n    const maxY = Math.min(a.maxY, b.maxY);\r\n\r\n    return Math.max(0, maxX - minX) *\r\n           Math.max(0, maxY - minY);\r\n}\r\n\r\nfunction contains(a, b) {\r\n    return a.minX <= b.minX &&\r\n           a.minY <= b.minY &&\r\n           b.maxX <= a.maxX &&\r\n           b.maxY <= a.maxY;\r\n}\r\n\r\nfunction intersects(a, b) {\r\n    return b.minX <= a.maxX &&\r\n           b.minY <= a.maxY &&\r\n           b.maxX >= a.minX &&\r\n           b.maxY >= a.minY;\r\n}\r\n\r\nfunction createNode(children) {\r\n    return {\r\n        children,\r\n        height: 1,\r\n        leaf: true,\r\n        minX: Infinity,\r\n        minY: Infinity,\r\n        maxX: -Infinity,\r\n        maxY: -Infinity\r\n    };\r\n}\r\n\r\n// sort an array so that items come in groups of n unsorted items, with groups sorted between each other;\r\n// combines selection algorithm with binary divide & conquer approach\r\n\r\nfunction multiSelect(arr, left, right, n, compare) {\r\n    const stack = [left, right];\r\n\r\n    while (stack.length) {\r\n        right = stack.pop();\r\n        left = stack.pop();\r\n\r\n        if (right - left <= n) continue;\r\n\r\n        const mid = left + Math.ceil((right - left) / n / 2) * n;\r\n        quickselect(arr, mid, left, right, compare);\r\n\r\n        stack.push(left, mid, mid, right);\r\n    }\r\n}\r\n", "/**\r\n * @module ol/structs/RBush\r\n */\r\nimport RBush_ from 'rbush';\r\nimport {createOrUpdate, equals} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\n\r\n/**\r\n * @typedef {Object} Entry\r\n * @property {number} minX MinX.\r\n * @property {number} minY MinY.\r\n * @property {number} maxX MaxX.\r\n * @property {number} maxY MaxY.\r\n * @property {Object} [value] Value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Wrapper around the RBush by Vladimir Agafonkin.\r\n * See https://github.com/mourner/rbush.\r\n *\r\n * @template T\r\n */\r\nclass RBush {\r\n  /**\r\n   * @param {number} [maxEntries] Max entries.\r\n   */\r\n  constructor(maxEntries) {\r\n    /**\r\n     * @private\r\n     */\r\n    this.rbush_ = new RBush_(maxEntries);\r\n\r\n    /**\r\n     * A mapping between the objects added to this rbush wrapper\r\n     * and the objects that are actually added to the internal rbush.\r\n     * @private\r\n     * @type {Object<string, Entry>}\r\n     */\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * Insert a value into the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  insert(extent, value) {\r\n    /** @type {Entry} */\r\n    const item = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n      value: value,\r\n    };\r\n\r\n    this.rbush_.insert(item);\r\n    this.items_[getUid(value)] = item;\r\n  }\r\n\r\n  /**\r\n   * Bulk-insert values into the RBush.\r\n   * @param {Array<import(\"../extent.js\").Extent>} extents Extents.\r\n   * @param {Array<T>} values Values.\r\n   */\r\n  load(extents, values) {\r\n    const items = new Array(values.length);\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      const extent = extents[i];\r\n      const value = values[i];\r\n\r\n      /** @type {Entry} */\r\n      const item = {\r\n        minX: extent[0],\r\n        minY: extent[1],\r\n        maxX: extent[2],\r\n        maxY: extent[3],\r\n        value: value,\r\n      };\r\n      items[i] = item;\r\n      this.items_[getUid(value)] = item;\r\n    }\r\n    this.rbush_.load(items);\r\n  }\r\n\r\n  /**\r\n   * Remove a value from the RBush.\r\n   * @param {T} value Value.\r\n   * @return {boolean} Removed.\r\n   */\r\n  remove(value) {\r\n    const uid = getUid(value);\r\n\r\n    // get the object in which the value was wrapped when adding to the\r\n    // internal rbush. then use that object to do the removal.\r\n    const item = this.items_[uid];\r\n    delete this.items_[uid];\r\n    return this.rbush_.remove(item) !== null;\r\n  }\r\n\r\n  /**\r\n   * Update the extent of a value in the RBush.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {T} value Value.\r\n   */\r\n  update(extent, value) {\r\n    const item = this.items_[getUid(value)];\r\n    const bbox = [item.minX, item.minY, item.maxX, item.maxY];\r\n    if (!equals(bbox, extent)) {\r\n      this.remove(value);\r\n      this.insert(extent, value);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Return all values in the RBush.\r\n   * @return {Array<T>} All.\r\n   */\r\n  getAll() {\r\n    const items = this.rbush_.all();\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Return all values in the given extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<T>} All in extent.\r\n   */\r\n  getInExtent(extent) {\r\n    /** @type {Entry} */\r\n    const bbox = {\r\n      minX: extent[0],\r\n      minY: extent[1],\r\n      maxX: extent[2],\r\n      maxY: extent[3],\r\n    };\r\n    const items = this.rbush_.search(bbox);\r\n    return items.map(function (item) {\r\n      return item.value;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the tree.\r\n   * If the callback returns a truthy value, this value is returned without\r\n   * checking the rest of the tree.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach(callback) {\r\n    return this.forEach_(this.getAll(), callback);\r\n  }\r\n\r\n  /**\r\n   * Calls a callback function with each value in the provided extent.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(T): *} callback Callback.\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEachInExtent(extent, callback) {\r\n    return this.forEach_(this.getInExtent(extent), callback);\r\n  }\r\n\r\n  /**\r\n   * @param {Array<T>} values Values.\r\n   * @param {function(T): *} callback Callback.\r\n   * @private\r\n   * @return {*} Callback return value.\r\n   */\r\n  forEach_(values, callback) {\r\n    let result;\r\n    for (let i = 0, l = values.length; i < l; i++) {\r\n      result = callback(values[i]);\r\n      if (result) {\r\n        return result;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    return isEmpty(this.items_);\r\n  }\r\n\r\n  /**\r\n   * Remove all values from the RBush.\r\n   */\r\n  clear() {\r\n    this.rbush_.clear();\r\n    this.items_ = {};\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} [extent] Extent.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   */\r\n  getExtent(extent) {\r\n    const data = this.rbush_.toJSON();\r\n    return createOrUpdate(data.minX, data.minY, data.maxX, data.maxY, extent);\r\n  }\r\n\r\n  /**\r\n   * @param {RBush} rbush R-Tree.\r\n   */\r\n  concat(rbush) {\r\n    this.rbush_.load(rbush.rbush_.all());\r\n    for (const i in rbush.items_) {\r\n      this.items_[i] = rbush.items_[i];\r\n    }\r\n  }\r\n}\r\n\r\nexport default RBush;\r\n", "/**\r\n * @module ol/source/VectorEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a feature is added to the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#addfeature\r\n   * @api\r\n   */\r\n  ADDFEATURE: 'addfeature',\r\n\r\n  /**\r\n   * Triggered when a feature is updated.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#changefeature\r\n   * @api\r\n   */\r\n  CHANGEFEATURE: 'changefeature',\r\n\r\n  /**\r\n   * Triggered when the clear method is called on the source.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#clear\r\n   * @api\r\n   */\r\n  CLEAR: 'clear',\r\n\r\n  /**\r\n   * Triggered when a feature is removed from the source.\r\n   * See {@link module:ol/source/Vector~VectorSource#clear source.clear()} for exceptions.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#removefeature\r\n   * @api\r\n   */\r\n  REMOVEFEATURE: 'removefeature',\r\n\r\n  /**\r\n   * Triggered when features starts loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadstart\r\n   * @api\r\n   */\r\n  FEATURESLOADSTART: 'featuresloadstart',\r\n\r\n  /**\r\n   * Triggered when features finishes loading.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloadend\r\n   * @api\r\n   */\r\n  FEATURESLOADEND: 'featuresloadend',\r\n\r\n  /**\r\n   * Triggered if feature loading results in an error.\r\n   * @event module:ol/source/Vector.VectorSourceEvent#featuresloaderror\r\n   * @api\r\n   */\r\n  FEATURESLOADERROR: 'featuresloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'addfeature'|'changefeature'|'clear'|'removefeature'|'featuresloadstart'|'featuresloadend'|'featuresloaderror'} VectorSourceEventTypes\r\n */\r\n", "/**\r\n * @module ol/loadingstrategy\r\n */\r\n\r\nimport {fromUserExtent, fromUserResolution, toUserExtent} from './proj.js';\r\n\r\n/**\r\n * Strategy function for loading all features with a single request.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function all(extent, resolution) {\r\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\r\n}\r\n\r\n/**\r\n * Strategy function for loading features based on the view's extent and\r\n * resolution.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n * @api\r\n */\r\nexport function bbox(extent, resolution) {\r\n  return [extent];\r\n}\r\n\r\n/**\r\n * Creates a strategy function for loading features based on a tile grid.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {function(import(\"./extent.js\").Extent, number, import(\"./proj.js\").Projection): Array<import(\"./extent.js\").Extent>} Loading strategy.\r\n * @api\r\n */\r\nexport function tile(tileGrid) {\r\n  return (\r\n    /**\r\n     * @param {import(\"./extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"./proj.js\").Projection} projection Projection.\r\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      const z = tileGrid.getZForResolution(\r\n        fromUserResolution(resolution, projection)\r\n      );\r\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(\r\n        fromUserExtent(extent, projection),\r\n        z\r\n      );\r\n      /** @type {Array<import(\"./extent.js\").Extent>} */\r\n      const extents = [];\r\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\r\n      const tileCoord = [z, 0, 0];\r\n      for (\r\n        tileCoord[1] = tileRange.minX;\r\n        tileCoord[1] <= tileRange.maxX;\r\n        ++tileCoord[1]\r\n      ) {\r\n        for (\r\n          tileCoord[2] = tileRange.minY;\r\n          tileCoord[2] <= tileRange.maxY;\r\n          ++tileCoord[2]\r\n        ) {\r\n          extents.push(\r\n            toUserExtent(tileGrid.getTileCoordExtent(tileCoord), projection)\r\n          );\r\n        }\r\n      }\r\n      return extents;\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/featureloader\r\n */\r\nimport {VOID} from './functions.js';\r\n\r\n/**\r\n *\r\n * @type {boolean}\r\n * @private\r\n */\r\nlet withCredentials = false;\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * load features.\r\n *\r\n * This function takes up to 5 arguments. These are an {@link module:ol/extent~Extent} representing\r\n * the area to be loaded, a `{number}` representing the resolution (map units per pixel), an\r\n * {@link module:ol/proj/Projection~Projection} for the projection, an optional success callback that should get\r\n * the loaded features passed as an argument and an optional failure callback with no arguments. If\r\n * the callbacks are not used, the corresponding vector source will not fire `'featuresloadend'` and\r\n * `'featuresloaderror'` events. `this` within the function is bound to the\r\n * {@link module:ol/source/Vector~VectorSource} it's called from.\r\n *\r\n * The function is responsible for loading the features and adding them to the\r\n * source.\r\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default),\r\n *           import(\"./extent.js\").Extent,\r\n *           number,\r\n *           import(\"./proj/Projection.js\").default,\r\n *           function(Array<import(\"./Feature.js\").default>): void=,\r\n *           function(): void=): void} FeatureLoader\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Vector~VectorSource} sources use a function of this type to\r\n * get the url to load features from.\r\n *\r\n * This function takes an {@link module:ol/extent~Extent} representing the area\r\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\r\n * and an {@link module:ol/proj/Projection~Projection} for the projection  as\r\n * arguments and returns a `{string}` representing the URL.\r\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default} format Feature format.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} resolution Resolution.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @param {function(Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default): void} success Success\r\n *      Function called with the loaded features and optionally with the data projection.\r\n * @param {function(): void} failure Failure\r\n *      Function called when loading failed.\r\n */\r\nexport function loadFeaturesXhr(\r\n  url,\r\n  format,\r\n  extent,\r\n  resolution,\r\n  projection,\r\n  success,\r\n  failure\r\n) {\r\n  const xhr = new XMLHttpRequest();\r\n  xhr.open(\r\n    'GET',\r\n    typeof url === 'function' ? url(extent, resolution, projection) : url,\r\n    true\r\n  );\r\n  if (format.getType() == 'arraybuffer') {\r\n    xhr.responseType = 'arraybuffer';\r\n  }\r\n  xhr.withCredentials = withCredentials;\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  xhr.onload = function (event) {\r\n    // status will be 0 for file:// urls\r\n    if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\r\n      const type = format.getType();\r\n      /** @type {Document|Node|Object|string|undefined} */\r\n      let source;\r\n      if (type == 'json' || type == 'text') {\r\n        source = xhr.responseText;\r\n      } else if (type == 'xml') {\r\n        source = xhr.responseXML;\r\n        if (!source) {\r\n          source = new DOMParser().parseFromString(\r\n            xhr.responseText,\r\n            'application/xml'\r\n          );\r\n        }\r\n      } else if (type == 'arraybuffer') {\r\n        source = /** @type {ArrayBuffer} */ (xhr.response);\r\n      }\r\n      if (source) {\r\n        success(\r\n          /** @type {Array<import(\"./Feature.js\").default>} */\r\n          (\r\n            format.readFeatures(source, {\r\n              extent: extent,\r\n              featureProjection: projection,\r\n            })\r\n          ),\r\n          format.readProjection(source)\r\n        );\r\n      } else {\r\n        failure();\r\n      }\r\n    } else {\r\n      failure();\r\n    }\r\n  };\r\n  /**\r\n   * @private\r\n   */\r\n  xhr.onerror = failure;\r\n  xhr.send();\r\n}\r\n\r\n/**\r\n * Create an XHR feature loader for a `url` and `format`. The feature loader\r\n * loads features (with XHR), parses the features, and adds them to the\r\n * vector source.\r\n * @param {string|FeatureUrlFunction} url Feature URL service.\r\n * @param {import(\"./format/Feature.js\").default} format Feature format.\r\n * @return {FeatureLoader} The feature loader.\r\n * @api\r\n */\r\nexport function xhr(url, format) {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n   * @param {function(Array<import(\"./Feature.js\").default>): void} [success] Success\r\n   *      Function called when loading succeeded.\r\n   * @param {function(): void} [failure] Failure\r\n   *      Function called when loading failed.\r\n   */\r\n  return function (extent, resolution, projection, success, failure) {\r\n    const source = /** @type {import(\"./source/Vector\").default} */ (this);\r\n    loadFeaturesXhr(\r\n      url,\r\n      format,\r\n      extent,\r\n      resolution,\r\n      projection,\r\n      /**\r\n       * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\r\n       * @param {import(\"./proj/Projection.js\").default} dataProjection Data\r\n       * projection.\r\n       */\r\n      function (features, dataProjection) {\r\n        source.addFeatures(features);\r\n        if (success !== undefined) {\r\n          success(features);\r\n        }\r\n      },\r\n      /* FIXME handle error */ failure ? failure : VOID\r\n    );\r\n  };\r\n}\r\n\r\n/**\r\n * Setter for the withCredentials configuration for the XHR.\r\n *\r\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\r\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\r\n * @api\r\n */\r\nexport function setWithCredentials(xhrWithCredentials) {\r\n  withCredentials = xhrWithCredentials;\r\n}\r\n", "/**\r\n * @module ol/source/Vector\r\n */\r\n\r\nimport Collection from '../Collection.js';\r\nimport CollectionEventType from '../CollectionEventType.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ObjectEventType from '../ObjectEventType.js';\r\nimport RBush from '../structs/RBush.js';\r\nimport Source from './Source.js';\r\nimport VectorEventType from './VectorEventType.js';\r\nimport {TRUE, VOID} from '../functions.js';\r\nimport {all as allStrategy} from '../loadingstrategy.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent, equals, wrapAndSliceX} from '../extent.js';\r\nimport {extend} from '../array.js';\r\nimport {getUid} from '../util.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {xhr} from '../featureloader.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\r\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\r\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\r\n *\r\n * @typedef {function(import(\"../extent.js\").Extent, number, import(\"../proj/Projection.js\").default): Array<import(\"../extent.js\").Extent>} LoadingStrategy\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Vector~VectorSource} instances are instances of this\r\n * type.\r\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\r\n */\r\nexport class VectorSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} [feature] Feature.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} [features] Features.\r\n   */\r\n  constructor(type, feature, features) {\r\n    super(type);\r\n\r\n    /**\r\n     * The added or removed feature for the `ADDFEATURE` and `REMOVEFEATURE` events, `undefined` otherwise.\r\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\r\n     * @api\r\n     */\r\n    this.feature = feature;\r\n\r\n    /**\r\n     * The loaded features for the `FEATURESLOADED` event, `undefined` otherwise.\r\n     * @type {Array<import(\"../Feature.js\").default<Geometry>>|undefined}\r\n     * @api\r\n     */\r\n    this.features = features;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./VectorEventType\").VectorSourceEventTypes, VectorSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./VectorEventType\").VectorSourceEventTypes, Return>} VectorSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {Array<import(\"../Feature.js\").default<Geometry>>|Collection<import(\"../Feature.js\").default<Geometry>>} [features]\r\n * Features. If provided as {@link module:ol/Collection~Collection}, the features in the source\r\n * and the collection will stay in sync.\r\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\r\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\r\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\r\n * The loader function used to load features, from a remote source for example.\r\n * If this is not set and `url` is set, the source will create and use an XHR\r\n * feature loader. The `'featuresloadend'` and `'featuresloaderror'` events\r\n * will only fire if the `success` and `failure` callbacks are used.\r\n *\r\n * Example:\r\n *\r\n * ```js\r\n * import Vector from 'ol/source/Vector.js';\r\n * import GeoJSON from 'ol/format/GeoJSON.js';\r\n * import {bbox} from 'ol/loadingstrategy.js';\r\n *\r\n * const vectorSource = new Vector({\r\n *   format: new GeoJSON(),\r\n *   loader: function(extent, resolution, projection, success, failure) {\r\n *      const proj = projection.getCode();\r\n *      const url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\r\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\r\n *          'outputFormat=application/json&srsname=' + proj + '&' +\r\n *          'bbox=' + extent.join(',') + ',' + proj;\r\n *      const xhr = new XMLHttpRequest();\r\n *      xhr.open('GET', url);\r\n *      const onError = function() {\r\n *        vectorSource.removeLoadedExtent(extent);\r\n *        failure();\r\n *      }\r\n *      xhr.onerror = onError;\r\n *      xhr.onload = function() {\r\n *        if (xhr.status == 200) {\r\n *          const features = vectorSource.getFormat().readFeatures(xhr.responseText);\r\n *          vectorSource.addFeatures(features);\r\n *          success(features);\r\n *        } else {\r\n *          onError();\r\n *        }\r\n *      }\r\n *      xhr.send();\r\n *    },\r\n *    strategy: bbox,\r\n *  });\r\n * ```\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\r\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\r\n * By default an {@link module:ol/loadingstrategy.all}\r\n * strategy is used, a one-off strategy which loads all features at once.\r\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\r\n * Setting this option instructs the source to load features using an XHR loader\r\n * (see {@link module:ol/featureloader.xhr}). Use a `string` and an\r\n * {@link module:ol/loadingstrategy.all} for a one-off download of all features from\r\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\r\n * other loading strategies.\r\n * Requires `format` to be set as well.\r\n * When default XHR feature loader is provided, the features will\r\n * be transformed from the data projection to the view projection\r\n * during parsing. If your remote data source does not advertise its projection\r\n * properly, this transformation will be incorrect. For some formats, the\r\n * default projection (usually EPSG:4326) can be overridden by setting the\r\n * dataProjection constructor option on the format.\r\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\r\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\r\n * @property {boolean} [useSpatialIndex=true]\r\n * By default, an RTree is used as spatial index. When features are removed and\r\n * added frequently, and the total number of features is low, setting this to\r\n * `false` may improve performance.\r\n *\r\n * Note that\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\r\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\r\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\r\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\r\n * through all features.\r\n *\r\n * When set to `false`, the features will be maintained in an\r\n * {@link module:ol/Collection~Collection}, which can be retrieved through\r\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\r\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\r\n * -180\u00B0 and 180\u00B0 meridians to work properly, this should be set to `false`. The\r\n * resulting geometry coordinates will then exceed the world bounds.\r\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Provides a source of features for vector layers. Vector features provided\r\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\r\n * vector data that is optimized for rendering.\r\n *\r\n * @fires VectorSourceEvent\r\n * @api\r\n * @template {import(\"../geom/Geometry.js\").default} [Geometry=import(\"../geom/Geometry.js\").default]\r\n */\r\nclass VectorSource extends Source {\r\n  /**\r\n   * @param {Options<Geometry>} [options] Vector source options.\r\n   */\r\n  constructor(options) {\r\n    options = options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      interpolate: true,\r\n      projection: undefined,\r\n      state: 'ready',\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n    });\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {VectorSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../featureloader.js\").FeatureLoader}\r\n     */\r\n    this.loader_ = VOID;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default|undefined}\r\n     */\r\n    this.format_ = options.format;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    if (options.loader !== undefined) {\r\n      this.loader_ = options.loader;\r\n    } else if (this.url_ !== undefined) {\r\n      assert(this.format_, 7); // `format` must be set when `url` is set\r\n      // create a XHR feature loader for \"url\" and \"format\"\r\n      this.loader_ = xhr(\r\n        this.url_,\r\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\r\n      );\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {LoadingStrategy}\r\n     */\r\n    this.strategy_ =\r\n      options.strategy !== undefined ? options.strategy : allStrategy;\r\n\r\n    const useSpatialIndex =\r\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\r\n     */\r\n    this.loadedExtentsRtree_ = new RBush();\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.loadingExtentsCount_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    /**\r\n     * A lookup of features by id (the return from feature.getId()).\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.idIndex_ = {};\r\n\r\n    /**\r\n     * A lookup of features by uid (using getUid(feature)).\r\n     * @private\r\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\r\n     */\r\n    this.uidIndex_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\r\n     */\r\n    this.featureChangeKeys_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>|null}\r\n     */\r\n    this.featuresCollection_ = null;\r\n\r\n    /** @type {Collection<import(\"../Feature.js\").default<Geometry>>} */\r\n    let collection;\r\n    /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */\r\n    let features;\r\n    if (Array.isArray(options.features)) {\r\n      features = options.features;\r\n    } else if (options.features) {\r\n      collection = options.features;\r\n      features = collection.getArray();\r\n    }\r\n    if (!useSpatialIndex && collection === undefined) {\r\n      collection = new Collection(features);\r\n    }\r\n    if (features !== undefined) {\r\n      this.addFeaturesInternal(features);\r\n    }\r\n    if (collection !== undefined) {\r\n      this.bindFeaturesCollection_(collection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a single feature to the source.  If you want to add a batch of features\r\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\r\n   * instead. A feature will not be added to the source if feature with\r\n   * the same id is already there. The reason for this behavior is to avoid\r\n   * feature duplication when using bbox or tile loading strategies.\r\n   * Note: this also applies if an {@link module:ol/Collection~Collection} is used for features,\r\n   * meaning that if a feature with a duplicate id is added in the collection, it will\r\n   * be removed from it right away.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\r\n   * @api\r\n   */\r\n  addFeature(feature) {\r\n    this.addFeatureInternal(feature);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add a feature without firing a `change` event.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @protected\r\n   */\r\n  addFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n\r\n    if (!this.addToIndex_(featureKey, feature)) {\r\n      if (this.featuresCollection_) {\r\n        this.featuresCollection_.remove(feature);\r\n      }\r\n      return;\r\n    }\r\n\r\n    this.setupChangeEvents_(featureKey, feature);\r\n\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      const extent = geometry.getExtent();\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.insert(extent, feature);\r\n      }\r\n    } else {\r\n      this.nullGeometryFeatures_[featureKey] = feature;\r\n    }\r\n\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @private\r\n   */\r\n  setupChangeEvents_(featureKey, feature) {\r\n    this.featureChangeKeys_[featureKey] = [\r\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\r\n      listen(\r\n        feature,\r\n        ObjectEventType.PROPERTYCHANGE,\r\n        this.handleFeatureChange_,\r\n        this\r\n      ),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * @param {string} featureKey Unique identifier for the feature.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\r\n   *     candidate for insertion into the Rtree.\r\n   * @private\r\n   */\r\n  addToIndex_(featureKey, feature) {\r\n    let valid = true;\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      if (!(id.toString() in this.idIndex_)) {\r\n        this.idIndex_[id.toString()] = feature;\r\n      } else {\r\n        valid = false;\r\n      }\r\n    }\r\n    if (valid) {\r\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    return valid;\r\n  }\r\n\r\n  /**\r\n   * Add a batch of features to the source.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\r\n   * @api\r\n   */\r\n  addFeatures(features) {\r\n    this.addFeaturesInternal(features);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Add features without firing a `change` event.\r\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\r\n   * @protected\r\n   */\r\n  addFeaturesInternal(features) {\r\n    const extents = [];\r\n    const newFeatures = [];\r\n    const geometryFeatures = [];\r\n\r\n    for (let i = 0, length = features.length; i < length; i++) {\r\n      const feature = features[i];\r\n      const featureKey = getUid(feature);\r\n      if (this.addToIndex_(featureKey, feature)) {\r\n        newFeatures.push(feature);\r\n      }\r\n    }\r\n\r\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n      const feature = newFeatures[i];\r\n      const featureKey = getUid(feature);\r\n      this.setupChangeEvents_(featureKey, feature);\r\n\r\n      const geometry = feature.getGeometry();\r\n      if (geometry) {\r\n        const extent = geometry.getExtent();\r\n        extents.push(extent);\r\n        geometryFeatures.push(feature);\r\n      } else {\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    }\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.load(extents, geometryFeatures);\r\n    }\r\n\r\n    if (this.hasListener(VectorEventType.ADDFEATURE)) {\r\n      for (let i = 0, length = newFeatures.length; i < length; i++) {\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\r\n   * @private\r\n   */\r\n  bindFeaturesCollection_(collection) {\r\n    let modifyingCollection = false;\r\n    this.addEventListener(\r\n      VectorEventType.ADDFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.push(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    this.addEventListener(\r\n      VectorEventType.REMOVEFEATURE,\r\n      /**\r\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\r\n       */\r\n      function (evt) {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          collection.remove(evt.feature);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.ADD,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.addFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    collection.addEventListener(\r\n      CollectionEventType.REMOVE,\r\n      /**\r\n       * @param {import(\"../Collection.js\").CollectionEvent<import(\"../Feature.js\").default<Geometry>>} evt The collection event\r\n       */\r\n      (evt) => {\r\n        if (!modifyingCollection) {\r\n          modifyingCollection = true;\r\n          this.removeFeature(evt.element);\r\n          modifyingCollection = false;\r\n        }\r\n      }\r\n    );\r\n    this.featuresCollection_ = collection;\r\n  }\r\n\r\n  /**\r\n   * Remove all features from the source.\r\n   * @param {boolean} [fast] Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#event:removefeature} events.\r\n   * @api\r\n   */\r\n  clear(fast) {\r\n    if (fast) {\r\n      for (const featureId in this.featureChangeKeys_) {\r\n        const keys = this.featureChangeKeys_[featureId];\r\n        keys.forEach(unlistenByKey);\r\n      }\r\n      if (!this.featuresCollection_) {\r\n        this.featureChangeKeys_ = {};\r\n        this.idIndex_ = {};\r\n        this.uidIndex_ = {};\r\n      }\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        const removeAndIgnoreReturn = (feature) => {\r\n          this.removeFeatureInternal(feature);\r\n        };\r\n        this.featuresRtree_.forEach(removeAndIgnoreReturn);\r\n        for (const id in this.nullGeometryFeatures_) {\r\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\r\n        }\r\n      }\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.clear();\r\n    }\r\n\r\n    if (this.featuresRtree_) {\r\n      this.featuresRtree_.clear();\r\n    }\r\n    this.nullGeometryFeatures_ = {};\r\n\r\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\r\n    this.dispatchEvent(clearEvent);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features on the source, calling the provided callback\r\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\r\n   * stop and the function will return the same value.\r\n   * Note: this function only iterate through the feature that have a defined geometry.\r\n   *\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     on the source.  Return a truthy value to stop iteration.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeature(callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEach(callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometries contain the provided\r\n   * coordinate, calling the callback with each feature.  If the callback returns\r\n   * a \"truthy\" value, iteration will stop and the function will return the same\r\n   * value.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose goemetry contains the provided coordinate.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\r\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\r\n    return this.forEachFeatureInExtent(extent, function (feature) {\r\n      const geometry = feature.getGeometry();\r\n      if (geometry.intersectsCoordinate(coordinate)) {\r\n        return callback(feature);\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose bounding box intersects the provided\r\n   * extent (note that the feature's geometry may not intersect the extent),\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you are interested in features whose geometry intersects an extent, call\r\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will loop through all\r\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose bounding box intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureInExtent(extent, callback) {\r\n    if (this.featuresRtree_) {\r\n      return this.featuresRtree_.forEachInExtent(extent, callback);\r\n    }\r\n    if (this.featuresCollection_) {\r\n      this.featuresCollection_.forEach(callback);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Iterate through all features whose geometry intersects the provided extent,\r\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\r\n   * value, iteration will stop and the function will return the same value.\r\n   *\r\n   * If you only want to test for bounding box intersection, call the\r\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\r\n   *     whose geometry intersects the provided extent.\r\n   * @return {T|undefined} The return value from the last call to the callback.\r\n   * @template T\r\n   * @api\r\n   */\r\n  forEachFeatureIntersectingExtent(extent, callback) {\r\n    return this.forEachFeatureInExtent(\r\n      extent,\r\n      /**\r\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n       * @return {T|undefined} The return value from the last call to the callback.\r\n       */\r\n      function (feature) {\r\n        const geometry = feature.getGeometry();\r\n        if (geometry.intersectsExtent(extent)) {\r\n          const result = callback(feature);\r\n          if (result) {\r\n            return result;\r\n          }\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the features collection associated with this source. Will be `null`\r\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\r\n   * with an {@link module:ol/Collection~Collection} as `features`.\r\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>|null} The collection of features.\r\n   * @api\r\n   */\r\n  getFeaturesCollection() {\r\n    return this.featuresCollection_;\r\n  }\r\n\r\n  /**\r\n   * Get a snapshot of the features currently on the source in random order. The returned array\r\n   * is a copy, the features are references to the features in the source.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    let features;\r\n    if (this.featuresCollection_) {\r\n      features = this.featuresCollection_.getArray().slice(0);\r\n    } else if (this.featuresRtree_) {\r\n      features = this.featuresRtree_.getAll();\r\n      if (!isEmpty(this.nullGeometryFeatures_)) {\r\n        extend(features, Object.values(this.nullGeometryFeatures_));\r\n      }\r\n    }\r\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (\r\n      features\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get all features whose geometry intersects the provided coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesAtCoordinate(coordinate) {\r\n    const features = [];\r\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\r\n      features.push(feature);\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\r\n   * all features intersecting the given extent in random order (so it may include\r\n   * features whose geometries do not intersect the extent).\r\n   *\r\n   * When `useSpatialIndex` is set to false, this method will return all\r\n   * features.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Include features\r\n   * where `extent` exceeds the x-axis bounds of `projection` and wraps around the world.\r\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent, projection) {\r\n    if (this.featuresRtree_) {\r\n      const multiWorld = projection && projection.canWrapX() && this.getWrapX();\r\n\r\n      if (!multiWorld) {\r\n        return this.featuresRtree_.getInExtent(extent);\r\n      }\r\n\r\n      const extents = wrapAndSliceX(extent, projection);\r\n\r\n      return [].concat(\r\n        ...extents.map((anExtent) => this.featuresRtree_.getInExtent(anExtent))\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getArray().slice(0);\r\n    }\r\n    return [];\r\n  }\r\n\r\n  /**\r\n   * Get the closest feature to the provided coordinate.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean} [filter] Feature filter function.\r\n   *     The filter function will receive one argument, the {@link module:ol/Feature~Feature feature}\r\n   *     and it should return a boolean value. By default, no filtering is made.\r\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\r\n   * @api\r\n   */\r\n  getClosestFeatureToCoordinate(coordinate, filter) {\r\n    // Find the closest feature using branch and bound.  We start searching an\r\n    // infinite extent, and find the distance from the first feature found.  This\r\n    // becomes the closest feature.  We then compute a smaller extent which any\r\n    // closer feature must intersect.  We continue searching with this smaller\r\n    // extent, trying to find a closer feature.  Every time we find a closer\r\n    // feature, we update the extent being searched so that any even closer\r\n    // feature must intersect it.  We continue until we run out of features.\r\n    const x = coordinate[0];\r\n    const y = coordinate[1];\r\n    let closestFeature = null;\r\n    const closestPoint = [NaN, NaN];\r\n    let minSquaredDistance = Infinity;\r\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\r\n    filter = filter ? filter : TRUE;\r\n    this.featuresRtree_.forEachInExtent(\r\n      extent,\r\n      /**\r\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n       */\r\n      function (feature) {\r\n        if (filter(feature)) {\r\n          const geometry = feature.getGeometry();\r\n          const previousMinSquaredDistance = minSquaredDistance;\r\n          minSquaredDistance = geometry.closestPointXY(\r\n            x,\r\n            y,\r\n            closestPoint,\r\n            minSquaredDistance\r\n          );\r\n          if (minSquaredDistance < previousMinSquaredDistance) {\r\n            closestFeature = feature;\r\n            // This is sneaky.  Reduce the extent that it is currently being\r\n            // searched while the R-Tree traversal using this same extent object\r\n            // is still in progress.  This is safe because the new extent is\r\n            // strictly contained by the old extent.\r\n            const minDistance = Math.sqrt(minSquaredDistance);\r\n            extent[0] = x - minDistance;\r\n            extent[1] = y - minDistance;\r\n            extent[2] = x + minDistance;\r\n            extent[3] = y + minDistance;\r\n          }\r\n        }\r\n      }\r\n    );\r\n    return closestFeature;\r\n  }\r\n\r\n  /**\r\n   * Get the extent of the features currently in the source.\r\n   *\r\n   * This method is not available when the source is configured with\r\n   * `useSpatialIndex` set to `false`.\r\n   * @param {import(\"../extent.js\").Extent} [extent] Destination extent. If provided, no new extent\r\n   *     will be created. Instead, that extent's coordinates will be overwritten.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent(extent) {\r\n    return this.featuresRtree_.getExtent(extent);\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its identifier (the value returned by feature.getId()).\r\n   * Note that the index treats string and numeric identifiers as the same.  So\r\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\r\n   *\r\n   * @param {string|number} id Feature identifier.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\r\n   * @api\r\n   */\r\n  getFeatureById(id) {\r\n    const feature = this.idIndex_[id.toString()];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get a feature by its internal unique identifier (using `getUid`).\r\n   *\r\n   * @param {string} uid Feature identifier.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|null} The feature (or `null` if not found).\r\n   */\r\n  getFeatureByUid(uid) {\r\n    const feature = this.uidIndex_[uid];\r\n    return feature !== undefined ? feature : null;\r\n  }\r\n\r\n  /**\r\n   * Get the format associated with this source.\r\n   *\r\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */\r\n  getOverlaps() {\r\n    return this.overlaps_;\r\n  }\r\n\r\n  /**\r\n   * Get the url associated with this source.\r\n   *\r\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * @param {Event} event Event.\r\n   * @private\r\n   */\r\n  handleFeatureChange_(event) {\r\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (\r\n      event.target\r\n    );\r\n    const featureKey = getUid(feature);\r\n    const geometry = feature.getGeometry();\r\n    if (!geometry) {\r\n      if (!(featureKey in this.nullGeometryFeatures_)) {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.remove(feature);\r\n        }\r\n        this.nullGeometryFeatures_[featureKey] = feature;\r\n      }\r\n    } else {\r\n      const extent = geometry.getExtent();\r\n      if (featureKey in this.nullGeometryFeatures_) {\r\n        delete this.nullGeometryFeatures_[featureKey];\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.insert(extent, feature);\r\n        }\r\n      } else {\r\n        if (this.featuresRtree_) {\r\n          this.featuresRtree_.update(extent, feature);\r\n        }\r\n      }\r\n    }\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      const sid = id.toString();\r\n      if (this.idIndex_[sid] !== feature) {\r\n        this.removeFromIdIndex_(feature);\r\n        this.idIndex_[sid] = feature;\r\n      }\r\n    } else {\r\n      this.removeFromIdIndex_(feature);\r\n      this.uidIndex_[featureKey] = feature;\r\n    }\r\n    this.changed();\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Returns true if the feature is contained within the source.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @return {boolean} Has feature.\r\n   * @api\r\n   */\r\n  hasFeature(feature) {\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      return id in this.idIndex_;\r\n    }\r\n    return getUid(feature) in this.uidIndex_;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is empty.\r\n   */\r\n  isEmpty() {\r\n    if (this.featuresRtree_) {\r\n      return (\r\n        this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_)\r\n      );\r\n    }\r\n    if (this.featuresCollection_) {\r\n      return this.featuresCollection_.getLength() === 0;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    const extentsToLoad = this.strategy_(extent, resolution, projection);\r\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\r\n      const extentToLoad = extentsToLoad[i];\r\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\r\n        extentToLoad,\r\n        /**\r\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\r\n         * @return {boolean} Contains.\r\n         */\r\n        function (object) {\r\n          return containsExtent(object.extent, extentToLoad);\r\n        }\r\n      );\r\n      if (!alreadyLoaded) {\r\n        ++this.loadingExtentsCount_;\r\n        this.dispatchEvent(\r\n          new VectorSourceEvent(VectorEventType.FEATURESLOADSTART)\r\n        );\r\n        this.loader_.call(\r\n          this,\r\n          extentToLoad,\r\n          resolution,\r\n          projection,\r\n          (features) => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(\r\n                VectorEventType.FEATURESLOADEND,\r\n                undefined,\r\n                features\r\n              )\r\n            );\r\n          },\r\n          () => {\r\n            --this.loadingExtentsCount_;\r\n            this.dispatchEvent(\r\n              new VectorSourceEvent(VectorEventType.FEATURESLOADERROR)\r\n            );\r\n          }\r\n        );\r\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\r\n      }\r\n    }\r\n    this.loading =\r\n      this.loader_.length < 4 ? false : this.loadingExtentsCount_ > 0;\r\n  }\r\n\r\n  refresh() {\r\n    this.clear(true);\r\n    this.loadedExtentsRtree_.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Remove an extent from the list of loaded extents.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @api\r\n   */\r\n  removeLoadedExtent(extent) {\r\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\r\n    let obj;\r\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\r\n      if (equals(object.extent, extent)) {\r\n        obj = object;\r\n        return true;\r\n      }\r\n    });\r\n    if (obj) {\r\n      loadedExtentsRtree.remove(obj);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a single feature from the source.  If you want to remove all features\r\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\r\n   * instead.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\r\n   * @api\r\n   */\r\n  removeFeature(feature) {\r\n    if (!feature) {\r\n      return;\r\n    }\r\n    const featureKey = getUid(feature);\r\n    if (featureKey in this.nullGeometryFeatures_) {\r\n      delete this.nullGeometryFeatures_[featureKey];\r\n    } else {\r\n      if (this.featuresRtree_) {\r\n        this.featuresRtree_.remove(feature);\r\n      }\r\n    }\r\n    const result = this.removeFeatureInternal(feature);\r\n    if (result) {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove feature without firing a `change` event.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\r\n   * @return {import(\"../Feature.js\").default<Geometry>|undefined} The removed feature\r\n   *     (or undefined if the feature was not found).\r\n   * @protected\r\n   */\r\n  removeFeatureInternal(feature) {\r\n    const featureKey = getUid(feature);\r\n    const featureChangeKeys = this.featureChangeKeys_[featureKey];\r\n    if (!featureChangeKeys) {\r\n      return;\r\n    }\r\n    featureChangeKeys.forEach(unlistenByKey);\r\n    delete this.featureChangeKeys_[featureKey];\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      delete this.idIndex_[id.toString()];\r\n    }\r\n    delete this.uidIndex_[featureKey];\r\n    this.dispatchEvent(\r\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\r\n    );\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * Remove a feature from the id index.  Called internally when the feature id\r\n   * may have changed.\r\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\r\n   * @return {boolean} Removed the feature from the index.\r\n   * @private\r\n   */\r\n  removeFromIdIndex_(feature) {\r\n    let removed = false;\r\n    for (const id in this.idIndex_) {\r\n      if (this.idIndex_[id] === feature) {\r\n        delete this.idIndex_[id];\r\n        removed = true;\r\n        break;\r\n      }\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Set the new loader of the source. The next render cycle will use the\r\n   * new loader.\r\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n\r\n  /**\r\n   * Points the source to a new url. The next render cycle will use the new url.\r\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    assert(this.format_, 7); // `format` must be set when `url` is set\r\n    this.url_ = url;\r\n    this.setLoader(xhr(url, this.format_));\r\n  }\r\n}\r\n\r\nexport default VectorSource;\r\n", "/**\r\n * @module ol/ImageState\r\n */\r\n\r\n/**\r\n * @enum {number}\r\n */\r\nexport default {\r\n  IDLE: 0,\r\n  LOADING: 1,\r\n  LOADED: 2,\r\n  ERROR: 3,\r\n  EMPTY: 4,\r\n};\r\n", "/**\r\n * @module ol/ImageBase\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport {abstract} from './util.js';\r\n\r\n/**\r\n * @abstract\r\n */\r\nclass ImageBase extends EventTarget {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|undefined} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"./ImageState.js\").default} state State.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, state) {\r\n    super();\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = extent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number|undefined}\r\n     */\r\n    this.resolution = resolution;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */\r\n    this.state = state;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./extent.js\").Extent} Extent.\r\n   */\r\n  getExtent() {\r\n    return this.extent;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   */\r\n  getImage() {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @return {number} PixelRatio.\r\n   */\r\n  getPixelRatio() {\r\n    return this.pixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Resolution.\r\n   */\r\n  getResolution() {\r\n    return /** @type {number} */ (this.resolution);\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./ImageState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @abstract\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n}\r\n\r\nexport default ImageBase;\r\n", "/**\r\n * @module ol/Image\r\n */\r\nimport EventType from './events/EventType.js';\r\nimport ImageBase from './ImageBase.js';\r\nimport ImageState from './ImageState.js';\r\nimport {IMAGE_DECODE} from './has.js';\r\nimport {getHeight} from './extent.js';\r\nimport {listenOnce, unlistenByKey} from './events.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Image~ImageWrapper} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~ImageWrapper#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(ImageWrapper, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\nclass ImageWrapper extends ImageBase {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number|undefined} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {LoadFunction} imageLoadFunction Image load function.\r\n   * @param {CanvasRenderingContext2D} [context] Canvas context. When provided, the image will be\r\n   *    drawn into the context's canvas, and `getImage()` will return the canvas once the image\r\n   *    has finished loading.\r\n   */\r\n  constructor(\r\n    extent,\r\n    resolution,\r\n    pixelRatio,\r\n    src,\r\n    crossOrigin,\r\n    imageLoadFunction,\r\n    context\r\n  ) {\r\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\r\n     */\r\n    this.image_ = new Image();\r\n    if (crossOrigin !== null) {\r\n      this.image_.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = context;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */\r\n    this.unlisten_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./ImageState.js\").default}\r\n     */\r\n    this.state = ImageState.IDLE;\r\n\r\n    /**\r\n     * @private\r\n     * @type {LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    if (\r\n      this.state == ImageState.LOADED &&\r\n      this.context_ &&\r\n      !(this.image_ instanceof HTMLCanvasElement)\r\n    ) {\r\n      const canvas = this.context_.canvas;\r\n      canvas.width = this.image_.width;\r\n      canvas.height = this.image_.height;\r\n      this.context_.drawImage(this.image_, 0, 0);\r\n      this.image_ = this.context_.canvas;\r\n    }\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.state = ImageState.ERROR;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    if (this.resolution === undefined) {\r\n      this.resolution = getHeight(this.extent) / this.image_.height;\r\n    }\r\n    this.state = ImageState.LOADED;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @api\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\r\n      this.state = ImageState.LOADING;\r\n      this.changed();\r\n      this.imageLoadFunction_(this, this.src_);\r\n      this.unlisten_ = listenImage(\r\n        this.image_,\r\n        this.handleImageLoad_.bind(this),\r\n        this.handleImageError_.bind(this)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n    this.resolution = getHeight(this.extent) / this.image_.height;\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    if (this.unlisten_) {\r\n      this.unlisten_();\r\n      this.unlisten_ = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\r\n * @param {function():any} loadHandler Load callback function.\r\n * @param {function():any} errorHandler Error callback function.\r\n * @return {function():void} Callback to stop listening.\r\n */\r\nexport function listenImage(image, loadHandler, errorHandler) {\r\n  const img = /** @type {HTMLImageElement} */ (image);\r\n  let listening = true;\r\n  let decoding = false;\r\n  let loaded = false;\r\n\r\n  const listenerKeys = [\r\n    listenOnce(img, EventType.LOAD, function () {\r\n      loaded = true;\r\n      if (!decoding) {\r\n        loadHandler();\r\n      }\r\n    }),\r\n  ];\r\n\r\n  if (img.src && IMAGE_DECODE) {\r\n    decoding = true;\r\n    img\r\n      .decode()\r\n      .then(function () {\r\n        if (listening) {\r\n          loadHandler();\r\n        }\r\n      })\r\n      .catch(function (error) {\r\n        if (listening) {\r\n          if (loaded) {\r\n            loadHandler();\r\n          } else {\r\n            errorHandler();\r\n          }\r\n        }\r\n      });\r\n  } else {\r\n    listenerKeys.push(listenOnce(img, EventType.ERROR, errorHandler));\r\n  }\r\n\r\n  return function unlisten() {\r\n    listening = false;\r\n    listenerKeys.forEach(unlistenByKey);\r\n  };\r\n}\r\n\r\nexport default ImageWrapper;\r\n", "/**\r\n * @module ol/renderer/Layer\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport ImageState from '../ImageState.js';\r\nimport Observable from '../Observable.js';\r\nimport {abstract} from '../util.js';\r\n\r\n/**\r\n * @template {import(\"../layer/Layer.js\").default} LayerType\r\n */\r\nclass LayerRenderer extends Observable {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   */\r\n  constructor(layer) {\r\n    super();\r\n\r\n    /**\r\n     * The renderer is initialized and ready to render.\r\n     * @type {boolean}\r\n     */\r\n    this.ready = true;\r\n\r\n    /** @private */\r\n    this.boundHandleImageChange_ = this.handleImageChange_.bind(this);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {LayerType}\r\n     */\r\n    this.layer_ = layer;\r\n\r\n    /**\r\n     * @type {import(\"../render/canvas/ExecutorGroup\").default}\r\n     */\r\n    this.declutterExecutorGroup = null;\r\n  }\r\n\r\n  /**\r\n   * Asynchronous layer level hit detection.\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Promise<Array<import(\"../Feature\").FeatureLike>>} Promise that resolves with\r\n   * an array of features.\r\n   */\r\n  getFeatures(pixel) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   */\r\n  getData(pixel) {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @abstract\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @param {import(\"../Tile.js\").default} tile Tile.\r\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\r\n   */\r\n  loadedTileCallback(tiles, zoom, tile) {\r\n    if (!tiles[zoom]) {\r\n      tiles[zoom] = {};\r\n    }\r\n    tiles[zoom][tile.tileCoord.toString()] = tile;\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Create a function that adds loaded tiles to the tile lookup.\r\n   * @param {import(\"../source/Tile.js\").default} source Tile source.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection of the tiles.\r\n   * @param {Object<number, Object<string, import(\"../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\r\n   * @return {function(number, import(\"../TileRange.js\").default):boolean} A function that can be\r\n   *     called with a zoom level and a tile range to add loaded tiles to the lookup.\r\n   * @protected\r\n   */\r\n  createLoadedTileFinder(source, projection, tiles) {\r\n    return (\r\n      /**\r\n       * @param {number} zoom Zoom level.\r\n       * @param {import(\"../TileRange.js\").default} tileRange Tile range.\r\n       * @return {boolean} The tile range is fully loaded.\r\n       */\r\n      (zoom, tileRange) => {\r\n        const callback = this.loadedTileCallback.bind(this, tiles, zoom);\r\n        return source.forEachLoadedTile(projection, zoom, tileRange, callback);\r\n      }\r\n    );\r\n  }\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {import(\"../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} hitTolerance Hit tolerance in pixels.\r\n   * @param {import(\"./vector.js\").FeatureCallback<T>} callback Feature callback.\r\n   * @param {Array<import(\"./Map.js\").HitMatch<T>>} matches The hit detected matches with tolerance.\r\n   * @return {T|undefined} Callback result.\r\n   * @template T\r\n   */\r\n  forEachFeatureAtCoordinate(\r\n    coordinate,\r\n    frameState,\r\n    hitTolerance,\r\n    callback,\r\n    matches\r\n  ) {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @return {LayerType} Layer.\r\n   */\r\n  getLayer() {\r\n    return this.layer_;\r\n  }\r\n\r\n  /**\r\n   * Perform action necessary to get the layer rendered after new fonts have loaded\r\n   * @abstract\r\n   */\r\n  handleFontsChanged() {}\r\n\r\n  /**\r\n   * Handle changes in image state.\r\n   * @param {import(\"../events/Event.js\").default} event Image change event.\r\n   * @private\r\n   */\r\n  handleImageChange_(event) {\r\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\r\n    if (image.getState() === ImageState.LOADED) {\r\n      this.renderIfReadyAndVisible();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load the image if not already loaded, and register the image change\r\n   * listener if needed.\r\n   * @param {import(\"../ImageBase.js\").default} image Image.\r\n   * @return {boolean} `true` if the image is already loaded, `false` otherwise.\r\n   * @protected\r\n   */\r\n  loadImage(image) {\r\n    let imageState = image.getState();\r\n    if (imageState != ImageState.LOADED && imageState != ImageState.ERROR) {\r\n      image.addEventListener(EventType.CHANGE, this.boundHandleImageChange_);\r\n    }\r\n    if (imageState == ImageState.IDLE) {\r\n      image.load();\r\n      imageState = image.getState();\r\n    }\r\n    return imageState == ImageState.LOADED;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  renderIfReadyAndVisible() {\r\n    const layer = this.getLayer();\r\n    if (layer && layer.getVisible() && layer.getSourceState() === 'ready') {\r\n      layer.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    delete this.layer_;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default LayerRenderer;\r\n", "/**\r\n * @module ol/renderer/canvas/Layer\r\n */\r\nimport LayerRenderer from '../Layer.js';\r\nimport RenderEvent from '../../render/Event.js';\r\nimport RenderEventType from '../../render/EventType.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  create as createTransform,\r\n} from '../../transform.js';\r\nimport {asArray} from '../../color.js';\r\nimport {createCanvasContext2D} from '../../dom.js';\r\nimport {equals} from '../../array.js';\r\nimport {\r\n  getBottomLeft,\r\n  getBottomRight,\r\n  getTopLeft,\r\n  getTopRight,\r\n} from '../../extent.js';\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D}\r\n */\r\nlet pixelContext = null;\r\n\r\nfunction createPixelContext() {\r\n  pixelContext = createCanvasContext2D(1, 1, undefined, {\r\n    willReadFrequently: true,\r\n  });\r\n}\r\n\r\n/**\r\n * @abstract\r\n * @template {import(\"../../layer/Layer.js\").default} LayerType\r\n * @extends {LayerRenderer<LayerType>}\r\n */\r\nclass CanvasLayerRenderer extends LayerRenderer {\r\n  /**\r\n   * @param {LayerType} layer Layer.\r\n   */\r\n  constructor(layer) {\r\n    super(layer);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {HTMLElement}\r\n     */\r\n    this.container = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.renderedResolution;\r\n\r\n    /**\r\n     * A temporary transform.  The values in this transform should only be used in a\r\n     * function that sets the values.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.tempTransform = createTransform();\r\n\r\n    /**\r\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.pixelTransform = createTransform();\r\n\r\n    /**\r\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\r\n     * be set when rendering a frame and may be used by other functions after rendering.\r\n     * @protected\r\n     * @type {import(\"../../transform.js\").Transform}\r\n     */\r\n    this.inversePixelTransform = createTransform();\r\n\r\n    /**\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context = null;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.containerReused = false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.pixelContext_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../Map.js\").FrameState|null}\r\n     */\r\n    this.frameState = null;\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\r\n   * @param {number} col The column index.\r\n   * @param {number} row The row index.\r\n   * @return {Uint8ClampedArray|null} The image data.\r\n   */\r\n  getImageData(image, col, row) {\r\n    if (!pixelContext) {\r\n      createPixelContext();\r\n    }\r\n    pixelContext.clearRect(0, 0, 1, 1);\r\n\r\n    let data;\r\n    try {\r\n      pixelContext.drawImage(image, col, row, 1, 1, 0, 0, 1, 1);\r\n      data = pixelContext.getImageData(0, 0, 1, 1).data;\r\n    } catch (err) {\r\n      pixelContext = null;\r\n      return null;\r\n    }\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * @param {import('../../Map.js').FrameState} frameState Frame state.\r\n   * @return {string} Background color.\r\n   */\r\n  getBackground(frameState) {\r\n    const layer = this.getLayer();\r\n    let background = layer.getBackground();\r\n    if (typeof background === 'function') {\r\n      background = background(frameState.viewState.resolution);\r\n    }\r\n    return background || undefined;\r\n  }\r\n\r\n  /**\r\n   * Get a rendering container from an existing target, if compatible.\r\n   * @param {HTMLElement} target Potential render target.\r\n   * @param {string} transform CSS Transform.\r\n   * @param {string} [backgroundColor] Background color.\r\n   */\r\n  useContainer(target, transform, backgroundColor) {\r\n    const layerClassName = this.getLayer().getClassName();\r\n    let container, context;\r\n    if (\r\n      target &&\r\n      target.className === layerClassName &&\r\n      (!backgroundColor ||\r\n        (target &&\r\n          target.style.backgroundColor &&\r\n          equals(\r\n            asArray(target.style.backgroundColor),\r\n            asArray(backgroundColor)\r\n          )))\r\n    ) {\r\n      const canvas = target.firstElementChild;\r\n      if (canvas instanceof HTMLCanvasElement) {\r\n        context = canvas.getContext('2d');\r\n      }\r\n    }\r\n    if (context && context.canvas.style.transform === transform) {\r\n      // Container of the previous layer renderer can be used.\r\n      this.container = target;\r\n      this.context = context;\r\n      this.containerReused = true;\r\n    } else if (this.containerReused) {\r\n      // Previously reused container cannot be used any more.\r\n      this.container = null;\r\n      this.context = null;\r\n      this.containerReused = false;\r\n    }\r\n    if (!this.container) {\r\n      container = document.createElement('div');\r\n      container.className = layerClassName;\r\n      let style = container.style;\r\n      style.position = 'absolute';\r\n      style.width = '100%';\r\n      style.height = '100%';\r\n      context = createCanvasContext2D();\r\n      const canvas = context.canvas;\r\n      container.appendChild(canvas);\r\n      style = canvas.style;\r\n      style.position = 'absolute';\r\n      style.left = '0';\r\n      style.transformOrigin = 'top left';\r\n      this.container = container;\r\n      this.context = context;\r\n    }\r\n    if (\r\n      !this.containerReused &&\r\n      backgroundColor &&\r\n      !this.container.style.backgroundColor\r\n    ) {\r\n      this.container.style.backgroundColor = backgroundColor;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\r\n   * @protected\r\n   */\r\n  clipUnrotated(context, frameState, extent) {\r\n    const topLeft = getTopLeft(extent);\r\n    const topRight = getTopRight(extent);\r\n    const bottomRight = getBottomRight(extent);\r\n    const bottomLeft = getBottomLeft(extent);\r\n\r\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\r\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\r\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\r\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\r\n\r\n    const inverted = this.inversePixelTransform;\r\n    applyTransform(inverted, topLeft);\r\n    applyTransform(inverted, topRight);\r\n    applyTransform(inverted, bottomRight);\r\n    applyTransform(inverted, bottomLeft);\r\n\r\n    context.save();\r\n    context.beginPath();\r\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\r\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\r\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\r\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\r\n    context.clip();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @private\r\n   */\r\n  dispatchRenderEvent_(type, context, frameState) {\r\n    const layer = this.getLayer();\r\n    if (layer.hasListener(type)) {\r\n      const event = new RenderEvent(\r\n        type,\r\n        this.inversePixelTransform,\r\n        frameState,\r\n        context\r\n      );\r\n      layer.dispatchEvent(event);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  preRender(context, frameState) {\r\n    this.frameState = frameState;\r\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * @param {CanvasRenderingContext2D} context Context.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @protected\r\n   */\r\n  postRender(context, frameState) {\r\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\r\n  }\r\n\r\n  /**\r\n   * Creates a transform for rendering to an element that will be rotated after rendering.\r\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} rotation Rotation.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} width Width of the rendered element (in pixels).\r\n   * @param {number} height Height of the rendered element (in pixels).\r\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\r\n   * @protected\r\n   * @return {!import(\"../../transform.js\").Transform} Transform.\r\n   */\r\n  getRenderTransform(\r\n    center,\r\n    resolution,\r\n    rotation,\r\n    pixelRatio,\r\n    width,\r\n    height,\r\n    offsetX\r\n  ) {\r\n    const dx1 = width / 2;\r\n    const dy1 = height / 2;\r\n    const sx = pixelRatio / resolution;\r\n    const sy = -sx;\r\n    const dx2 = -center[0] + offsetX;\r\n    const dy2 = -center[1];\r\n    return composeTransform(\r\n      this.tempTransform,\r\n      dx1,\r\n      dy1,\r\n      sx,\r\n      sy,\r\n      -rotation,\r\n      dx2,\r\n      dy2\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    delete this.frameState;\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\nexport default CanvasLayerRenderer;\r\n"],
  "mappings": "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",
  "names": ["bbox", "extend", "RBush", "bbox", "equals", "xhr", "equals", "Event_default", "EventType_default", "Layer_default"]
}
