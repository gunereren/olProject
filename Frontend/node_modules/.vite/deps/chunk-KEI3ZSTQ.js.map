{
  "version": 3,
  "sources": ["../../ol/layer/BaseImage.js", "../../ol/renderer/canvas/ImageLayer.js", "../../ol/layer/Image.js", "../../ol/structs/LRUCache.js", "../../ol/tilecoord.js", "../../ol/TileCache.js", "../../ol/TileRange.js", "../../ol/tilegrid/TileGrid.js", "../../ol/tilegrid.js", "../../ol/source/Tile.js", "../../ol/source/TileEventType.js", "../../ol/tileurlfunction.js", "../../ol/source/UrlTile.js", "../../ol/Tile.js", "../../ol/VectorTile.js", "../../ol/VectorRenderTile.js", "../../ol/source/VectorTile.js", "../../ol/reproj/common.js", "../../ol/reproj/Triangulation.js", "../../ol/reproj.js", "../../ol/reproj/Image.js", "../../ol/source/Image.js", "../../ol/layer/TileProperty.js", "../../ol/layer/BaseTile.js", "../../ol/ImageTile.js", "../../ol/reproj/Tile.js", "../../ol/renderer/canvas/TileLayer.js", "../../ol/layer/Tile.js", "../../ol/ImageCanvas.js", "../../ol/source/Raster.js", "../../ol/source/TileImage.js", "../../ol/net.js", "../../ol/source/TileJSON.js", "../../ol/DataTile.js", "../../ol/reproj/DataTile.js"],
  "sourcesContent": ["/**\r\n * @module ol/layer/BaseImage\r\n */\r\nimport Layer from './Layer.js';\r\n\r\n/**\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\r\n * @property {ImageSourceType} [source] Source for this layer.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @template {import(\"../renderer/Layer.js\").default} RendererType\r\n * @extends {Layer<ImageSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseImageLayer extends Layer {\r\n  /**\r\n   * @param {Options<ImageSourceType>} [options] Layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n    super(options);\r\n  }\r\n}\r\n\r\nexport default BaseImageLayer;\r\n", "/**\r\n * @module ol/renderer/canvas/ImageLayer\r\n */\r\nimport CanvasLayerRenderer from './Layer.js';\r\nimport ImageState from '../../ImageState.js';\r\nimport ViewHint from '../../ViewHint.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  makeInverse,\r\n  toString as toTransformString,\r\n} from '../../transform.js';\r\nimport {\r\n  containsCoordinate,\r\n  containsExtent,\r\n  getHeight,\r\n  getIntersection,\r\n  getWidth,\r\n  intersects as intersectsExtent,\r\n  isEmpty,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for image layers.\r\n * @api\r\n */\r\nclass CanvasImageLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {import(\"../../layer/Image.js\").default} imageLayer Image layer.\r\n   */\r\n  constructor(imageLayer) {\r\n    super(imageLayer);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?import(\"../../ImageBase.js\").default}\r\n     */\r\n    this.image_ = null;\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   */\r\n  getImage() {\r\n    return this.image_ ? this.image_.getImage() : null;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewResolution = viewState.resolution;\r\n\r\n    const imageSource = this.getLayer().getSource();\r\n\r\n    const hints = frameState.viewHints;\r\n\r\n    let renderedExtent = frameState.extent;\r\n    if (layerState.extent !== undefined) {\r\n      renderedExtent = getIntersection(\r\n        renderedExtent,\r\n        fromUserExtent(layerState.extent, viewState.projection)\r\n      );\r\n    }\r\n\r\n    if (\r\n      !hints[ViewHint.ANIMATING] &&\r\n      !hints[ViewHint.INTERACTING] &&\r\n      !isEmpty(renderedExtent)\r\n    ) {\r\n      if (imageSource) {\r\n        const projection = viewState.projection;\r\n        const image = imageSource.getImage(\r\n          renderedExtent,\r\n          viewResolution,\r\n          pixelRatio,\r\n          projection\r\n        );\r\n        if (image) {\r\n          if (this.loadImage(image)) {\r\n            this.image_ = image;\r\n          } else if (image.getState() === ImageState.EMPTY) {\r\n            this.image_ = null;\r\n          }\r\n        }\r\n      } else {\r\n        this.image_ = null;\r\n      }\r\n    }\r\n\r\n    return !!this.image_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray} Data at the pixel location.\r\n   */\r\n  getData(pixel) {\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice()\r\n    );\r\n\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (!containsCoordinate(layerExtent, coordinate)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const imageExtent = this.image_.getExtent();\r\n    const img = this.getImage();\r\n\r\n    const imageMapWidth = getWidth(imageExtent);\r\n    const col = Math.floor(\r\n      img.width * ((coordinate[0] - imageExtent[0]) / imageMapWidth)\r\n    );\r\n    if (col < 0 || col >= img.width) {\r\n      return null;\r\n    }\r\n\r\n    const imageMapHeight = getHeight(imageExtent);\r\n    const row = Math.floor(\r\n      img.height * ((imageExtent[3] - coordinate[1]) / imageMapHeight)\r\n    );\r\n    if (row < 0 || row >= img.height) {\r\n      return null;\r\n    }\r\n\r\n    return this.getImageData(img, col, row);\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const image = this.image_;\r\n    const imageExtent = image.getExtent();\r\n    const imageResolution = image.getResolution();\r\n    const imagePixelRatio = image.getPixelRatio();\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const viewState = frameState.viewState;\r\n    const viewCenter = viewState.center;\r\n    const viewResolution = viewState.resolution;\r\n    const scale =\r\n      (pixelRatio * imageResolution) / (viewResolution * imagePixelRatio);\r\n\r\n    const extent = frameState.extent;\r\n    const resolution = viewState.resolution;\r\n    const rotation = viewState.rotation;\r\n    // desired dimensions of the canvas in pixels\r\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\r\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\r\n\r\n    // set forward and inverse pixel transforms\r\n    composeTransform(\r\n      this.pixelTransform,\r\n      frameState.size[0] / 2,\r\n      frameState.size[1] / 2,\r\n      1 / pixelRatio,\r\n      1 / pixelRatio,\r\n      rotation,\r\n      -width / 2,\r\n      -height / 2\r\n    );\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    const canvasTransform = toTransformString(this.pixelTransform);\r\n\r\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\r\n\r\n    const context = this.context;\r\n    const canvas = context.canvas;\r\n\r\n    if (canvas.width != width || canvas.height != height) {\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n    } else if (!this.containerReused) {\r\n      context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    // clipped rendering if layer extent is set\r\n    let clipped = false;\r\n    let render = true;\r\n    if (layerState.extent) {\r\n      const layerExtent = fromUserExtent(\r\n        layerState.extent,\r\n        viewState.projection\r\n      );\r\n      render = intersectsExtent(layerExtent, frameState.extent);\r\n      clipped = render && !containsExtent(layerExtent, frameState.extent);\r\n      if (clipped) {\r\n        this.clipUnrotated(context, frameState, layerExtent);\r\n      }\r\n    }\r\n\r\n    const img = this.getImage();\r\n\r\n    const transform = composeTransform(\r\n      this.tempTransform,\r\n      width / 2,\r\n      height / 2,\r\n      scale,\r\n      scale,\r\n      0,\r\n      (imagePixelRatio * (imageExtent[0] - viewCenter[0])) / imageResolution,\r\n      (imagePixelRatio * (viewCenter[1] - imageExtent[3])) / imageResolution\r\n    );\r\n\r\n    this.renderedResolution = (imageResolution * pixelRatio) / imagePixelRatio;\r\n\r\n    const dw = img.width * transform[0];\r\n    const dh = img.height * transform[3];\r\n\r\n    if (!this.getLayer().getSource().getInterpolate()) {\r\n      context.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n    if (render && dw >= 0.5 && dh >= 0.5) {\r\n      const dx = transform[4];\r\n      const dy = transform[5];\r\n      const opacity = layerState.opacity;\r\n      let previousAlpha;\r\n      if (opacity !== 1) {\r\n        previousAlpha = context.globalAlpha;\r\n        context.globalAlpha = opacity;\r\n      }\r\n      context.drawImage(img, 0, 0, +img.width, +img.height, dx, dy, dw, dh);\r\n      if (opacity !== 1) {\r\n        context.globalAlpha = previousAlpha;\r\n      }\r\n    }\r\n    this.postRender(context, frameState);\r\n\r\n    if (clipped) {\r\n      context.restore();\r\n    }\r\n    context.imageSmoothingEnabled = true;\r\n\r\n    if (canvasTransform !== canvas.style.transform) {\r\n      canvas.style.transform = canvasTransform;\r\n    }\r\n\r\n    return this.container;\r\n  }\r\n}\r\n\r\nexport default CanvasImageLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Image\r\n */\r\nimport BaseImageLayer from './BaseImage.js';\r\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Image.js\").default} ImageSourceType\r\n * @extends {BaseImageLayer<ImageSourceType, CanvasImageLayerRenderer>}\r\n * @api\r\n */\r\nclass ImageLayer extends BaseImageLayer {\r\n  /**\r\n   * @param {import(\"./BaseImage.js\").Options<ImageSourceType>} [options] Layer options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasImageLayerRenderer(this);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel location.  A four element RGBA array will be returned.  For requests outside the\r\n   * layer extent, `null` will be returned.  Data for an image can only be retrieved if the\r\n   * source's `crossOrigin` property is set.\r\n   *\r\n   * ```js\r\n   * // display layer data on every pointer move\r\n   * map.on('pointermove', (event) => {\r\n   *   console.log(layer.getData(event.pixel));\r\n   * });\r\n   * ```\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   * @api\r\n   */\r\n  getData(pixel) {\r\n    return super.getData(pixel);\r\n  }\r\n}\r\n\r\nexport default ImageLayer;\r\n", "/**\r\n * @module ol/structs/LRUCache\r\n */\r\n\r\nimport {assert} from '../asserts.js';\r\n\r\n/**\r\n * @typedef {Object} Entry\r\n * @property {string} key_ Key.\r\n * @property {Object} newer Newer.\r\n * @property {Object} older Older.\r\n * @property {*} value_ Value.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Implements a Least-Recently-Used cache where the keys do not conflict with\r\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\r\n * items from the cache is the responsibility of the user.\r\n *\r\n * @fires import(\"../events/Event.js\").default\r\n * @template T\r\n */\r\nclass LRUCache {\r\n  /**\r\n   * @param {number} [highWaterMark] High water mark.\r\n   */\r\n  constructor(highWaterMark) {\r\n    /**\r\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\r\n     * will be pruned at all.\r\n     * @type {number}\r\n     */\r\n    this.highWaterMark = highWaterMark !== undefined ? highWaterMark : 2048;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.count_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, Entry>}\r\n     */\r\n    this.entries_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */\r\n    this.oldest_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Entry}\r\n     */\r\n    this.newest_ = null;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\r\n  }\r\n\r\n  /**\r\n   * Expire the cache.\r\n   * @param {!Object<string, boolean>} [keep] Keys to keep. To be implemented by subclasses.\r\n   */\r\n  expireCache(keep) {\r\n    while (this.canExpireCache()) {\r\n      this.pop();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * FIXME empty description for jsdoc\r\n   */\r\n  clear() {\r\n    this.count_ = 0;\r\n    this.entries_ = {};\r\n    this.oldest_ = null;\r\n    this.newest_ = null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @return {boolean} Contains key.\r\n   */\r\n  containsKey(key) {\r\n    return this.entries_.hasOwnProperty(key);\r\n  }\r\n\r\n  /**\r\n   * @param {function(T, string, LRUCache<T>): ?} f The function\r\n   *     to call for every entry from the oldest to the newer. This function takes\r\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\r\n   *     The return value is ignored.\r\n   */\r\n  forEach(f) {\r\n    let entry = this.oldest_;\r\n    while (entry) {\r\n      f(entry.value_, entry.key_, this);\r\n      entry = entry.newer;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {*} [options] Options (reserved for subclasses).\r\n   * @return {T} Value.\r\n   */\r\n  get(key, options) {\r\n    const entry = this.entries_[key];\r\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\r\n    if (entry === this.newest_) {\r\n      return entry.value_;\r\n    }\r\n    if (entry === this.oldest_) {\r\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\r\n      this.oldest_.older = null;\r\n    } else {\r\n      entry.newer.older = entry.older;\r\n      entry.older.newer = entry.newer;\r\n    }\r\n    entry.newer = null;\r\n    entry.older = this.newest_;\r\n    this.newest_.newer = entry;\r\n    this.newest_ = entry;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * Remove an entry from the cache.\r\n   * @param {string} key The entry key.\r\n   * @return {T} The removed entry.\r\n   */\r\n  remove(key) {\r\n    const entry = this.entries_[key];\r\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\r\n    if (entry === this.newest_) {\r\n      this.newest_ = /** @type {Entry} */ (entry.older);\r\n      if (this.newest_) {\r\n        this.newest_.newer = null;\r\n      }\r\n    } else if (entry === this.oldest_) {\r\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\r\n      if (this.oldest_) {\r\n        this.oldest_.older = null;\r\n      }\r\n    } else {\r\n      entry.newer.older = entry.older;\r\n      entry.older.newer = entry.newer;\r\n    }\r\n    delete this.entries_[key];\r\n    --this.count_;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Count.\r\n   */\r\n  getCount() {\r\n    return this.count_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<string>} Keys.\r\n   */\r\n  getKeys() {\r\n    const keys = new Array(this.count_);\r\n    let i = 0;\r\n    let entry;\r\n    for (entry = this.newest_; entry; entry = entry.older) {\r\n      keys[i++] = entry.key_;\r\n    }\r\n    return keys;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<T>} Values.\r\n   */\r\n  getValues() {\r\n    const values = new Array(this.count_);\r\n    let i = 0;\r\n    let entry;\r\n    for (entry = this.newest_; entry; entry = entry.older) {\r\n      values[i++] = entry.value_;\r\n    }\r\n    return values;\r\n  }\r\n\r\n  /**\r\n   * @return {T} Last value.\r\n   */\r\n  peekLast() {\r\n    return this.oldest_.value_;\r\n  }\r\n\r\n  /**\r\n   * @return {string} Last key.\r\n   */\r\n  peekLastKey() {\r\n    return this.oldest_.key_;\r\n  }\r\n\r\n  /**\r\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\r\n   * @return {string} The newest key.\r\n   */\r\n  peekFirstKey() {\r\n    return this.newest_.key_;\r\n  }\r\n\r\n  /**\r\n   * Return an entry without updating least recently used time.\r\n   * @param {string} key Key.\r\n   * @return {T} Value.\r\n   */\r\n  peek(key) {\r\n    if (!this.containsKey(key)) {\r\n      return undefined;\r\n    }\r\n    return this.entries_[key].value_;\r\n  }\r\n\r\n  /**\r\n   * @return {T} value Value.\r\n   */\r\n  pop() {\r\n    const entry = this.oldest_;\r\n    delete this.entries_[entry.key_];\r\n    if (entry.newer) {\r\n      entry.newer.older = null;\r\n    }\r\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\r\n    if (!this.oldest_) {\r\n      this.newest_ = null;\r\n    }\r\n    --this.count_;\r\n    return entry.value_;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */\r\n  replace(key, value) {\r\n    this.get(key); // update `newest_`\r\n    this.entries_[key].value_ = value;\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key.\r\n   * @param {T} value Value.\r\n   */\r\n  set(key, value) {\r\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\r\n    const entry = {\r\n      key_: key,\r\n      newer: null,\r\n      older: this.newest_,\r\n      value_: value,\r\n    };\r\n    if (!this.newest_) {\r\n      this.oldest_ = entry;\r\n    } else {\r\n      this.newest_.newer = entry;\r\n    }\r\n    this.newest_ = entry;\r\n    this.entries_[key] = entry;\r\n    ++this.count_;\r\n  }\r\n\r\n  /**\r\n   * Set a maximum number of entries for the cache.\r\n   * @param {number} size Cache size.\r\n   * @api\r\n   */\r\n  setSize(size) {\r\n    this.highWaterMark = size;\r\n  }\r\n}\r\n\r\nexport default LRUCache;\r\n", "/**\r\n * @module ol/tilecoord\r\n */\r\n\r\n/**\r\n * An array of three numbers representing the location of a tile in a tile\r\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\r\n * @typedef {Array<number>} TileCoord\r\n * @api\r\n */\r\n\r\n/**\r\n * @param {number} z Z.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @param {TileCoord} [tileCoord] Tile coordinate.\r\n * @return {TileCoord} Tile coordinate.\r\n */\r\nexport function createOrUpdate(z, x, y, tileCoord) {\r\n  if (tileCoord !== undefined) {\r\n    tileCoord[0] = z;\r\n    tileCoord[1] = x;\r\n    tileCoord[2] = y;\r\n    return tileCoord;\r\n  }\r\n  return [z, x, y];\r\n}\r\n\r\n/**\r\n * @param {number} z Z.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {string} Key.\r\n */\r\nexport function getKeyZXY(z, x, y) {\r\n  return z + '/' + x + '/' + y;\r\n}\r\n\r\n/**\r\n * Get the key for a tile coord.\r\n * @param {TileCoord} tileCoord The tile coord.\r\n * @return {string} Key.\r\n */\r\nexport function getKey(tileCoord) {\r\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\r\n}\r\n\r\n/**\r\n * Get the tile cache key for a tile key obtained through `tile.getKey()`.\r\n * @param {string} tileKey The tile key.\r\n * @return {string} The cache key.\r\n */\r\nexport function getCacheKeyForTileKey(tileKey) {\r\n  const [z, x, y] = tileKey\r\n    .substring(tileKey.lastIndexOf('/') + 1, tileKey.length)\r\n    .split(',')\r\n    .map(Number);\r\n  return getKeyZXY(z, x, y);\r\n}\r\n\r\n/**\r\n * Get a tile coord given a key.\r\n * @param {string} key The tile coord key.\r\n * @return {TileCoord} The tile coord.\r\n */\r\nexport function fromKey(key) {\r\n  return key.split('/').map(Number);\r\n}\r\n\r\n/**\r\n * @param {TileCoord} tileCoord Tile coord.\r\n * @return {number} Hash.\r\n */\r\nexport function hash(tileCoord) {\r\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\r\n}\r\n\r\n/**\r\n * @param {TileCoord} tileCoord Tile coordinate.\r\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {boolean} Tile coordinate is within extent and zoom level range.\r\n */\r\nexport function withinExtentAndZ(tileCoord, tileGrid) {\r\n  const z = tileCoord[0];\r\n  const x = tileCoord[1];\r\n  const y = tileCoord[2];\r\n\r\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\r\n    return false;\r\n  }\r\n  const tileRange = tileGrid.getFullTileRange(z);\r\n  if (!tileRange) {\r\n    return true;\r\n  }\r\n  return tileRange.containsXY(x, y);\r\n}\r\n", "/**\r\n * @module ol/TileCache\r\n */\r\nimport LRUCache from './structs/LRUCache.js';\r\nimport {fromKey, getKey} from './tilecoord.js';\r\n\r\nclass TileCache extends LRUCache {\r\n  clear() {\r\n    while (this.getCount() > 0) {\r\n      this.pop().release();\r\n    }\r\n    super.clear();\r\n  }\r\n\r\n  /**\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(usedTiles) {\r\n    while (this.canExpireCache()) {\r\n      const tile = this.peekLast();\r\n      if (tile.getKey() in usedTiles) {\r\n        break;\r\n      } else {\r\n        this.pop().release();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prune all tiles from the cache that don't have the same z as the newest tile.\r\n   */\r\n  pruneExceptNewestZ() {\r\n    if (this.getCount() === 0) {\r\n      return;\r\n    }\r\n    const key = this.peekFirstKey();\r\n    const tileCoord = fromKey(key);\r\n    const z = tileCoord[0];\r\n    this.forEach((tile) => {\r\n      if (tile.tileCoord[0] !== z) {\r\n        this.remove(getKey(tile.tileCoord));\r\n        tile.release();\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nexport default TileCache;\r\n", "/**\r\n * @module ol/TileRange\r\n */\r\n\r\n/**\r\n * A representation of a contiguous block of tiles.  A tile range is specified\r\n * by its min/max tile coordinates and is inclusive of coordinates.\r\n */\r\nclass TileRange {\r\n  /**\r\n   * @param {number} minX Minimum X.\r\n   * @param {number} maxX Maximum X.\r\n   * @param {number} minY Minimum Y.\r\n   * @param {number} maxY Maximum Y.\r\n   */\r\n  constructor(minX, maxX, minY, maxY) {\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minX = minX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxX = maxX;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.minY = minY;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.maxY = maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {boolean} Contains tile coordinate.\r\n   */\r\n  contains(tileCoord) {\r\n    return this.containsXY(tileCoord[1], tileCoord[2]);\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Contains.\r\n   */\r\n  containsTileRange(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.minX &&\r\n      tileRange.maxX <= this.maxX &&\r\n      this.minY <= tileRange.minY &&\r\n      tileRange.maxY <= this.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @return {boolean} Contains coordinate.\r\n   */\r\n  containsXY(x, y) {\r\n    return this.minX <= x && x <= this.maxX && this.minY <= y && y <= this.maxY;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Equals.\r\n   */\r\n  equals(tileRange) {\r\n    return (\r\n      this.minX == tileRange.minX &&\r\n      this.minY == tileRange.minY &&\r\n      this.maxX == tileRange.maxX &&\r\n      this.maxY == tileRange.maxY\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   */\r\n  extend(tileRange) {\r\n    if (tileRange.minX < this.minX) {\r\n      this.minX = tileRange.minX;\r\n    }\r\n    if (tileRange.maxX > this.maxX) {\r\n      this.maxX = tileRange.maxX;\r\n    }\r\n    if (tileRange.minY < this.minY) {\r\n      this.minY = tileRange.minY;\r\n    }\r\n    if (tileRange.maxY > this.maxY) {\r\n      this.maxY = tileRange.maxY;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {number} Height.\r\n   */\r\n  getHeight() {\r\n    return this.maxY - this.minY + 1;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./size.js\").Size} Size.\r\n   */\r\n  getSize() {\r\n    return [this.getWidth(), this.getHeight()];\r\n  }\r\n\r\n  /**\r\n   * @return {number} Width.\r\n   */\r\n  getWidth() {\r\n    return this.maxX - this.minX + 1;\r\n  }\r\n\r\n  /**\r\n   * @param {TileRange} tileRange Tile range.\r\n   * @return {boolean} Intersects.\r\n   */\r\n  intersects(tileRange) {\r\n    return (\r\n      this.minX <= tileRange.maxX &&\r\n      this.maxX >= tileRange.minX &&\r\n      this.minY <= tileRange.maxY &&\r\n      this.maxY >= tileRange.minY\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * @param {number} minX Minimum X.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxY Maximum Y.\r\n * @param {TileRange} [tileRange] TileRange.\r\n * @return {TileRange} Tile range.\r\n */\r\nexport function createOrUpdate(minX, maxX, minY, maxY, tileRange) {\r\n  if (tileRange !== undefined) {\r\n    tileRange.minX = minX;\r\n    tileRange.maxX = maxX;\r\n    tileRange.minY = minY;\r\n    tileRange.maxY = maxY;\r\n    return tileRange;\r\n  }\r\n  return new TileRange(minX, maxX, minY, maxY);\r\n}\r\n\r\nexport default TileRange;\r\n", "/**\r\n * @module ol/tilegrid/TileGrid\r\n */\r\nimport TileRange, {\r\n  createOrUpdate as createOrUpdateTileRange,\r\n} from '../TileRange.js';\r\nimport {DEFAULT_TILE_SIZE} from './common.js';\r\nimport {assert} from '../asserts.js';\r\nimport {ceil, clamp, floor} from '../math.js';\r\nimport {createOrUpdate, getTopLeft} from '../extent.js';\r\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\r\nimport {intersectsLinearRing} from '../geom/flat/intersectsextent.js';\r\nimport {isSorted, linearFindNearest} from '../array.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @private\r\n * @type {import(\"../tilecoord.js\").TileCoord}\r\n */\r\nconst tmpTileCoord = [0, 0, 0];\r\n\r\n/**\r\n * Number of decimal digits to consider in integer values when rounding.\r\n * @type {number}\r\n */\r\nconst DECIMALS = 5;\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile~TileSource} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\r\n * of the grid for each zoom level. If specified the values\r\n * define each zoom level's extent together with the `origin` or `origins`.\r\n * A grid `extent` can be configured in addition, and will further limit the extent\r\n * for which tile requests are made by sources. If the bottom-left corner of\r\n * an extent is used as `origin` or `origins`, then the `y` value must be\r\n * negative because OpenLayers tile coordinates use the top left as the origin.\r\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array<number|import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\r\nclass TileGrid {\r\n  /**\r\n   * @param {Options} options Tile grid options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<number>}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n    assert(\r\n      isSorted(\r\n        this.resolutions_,\r\n        function (a, b) {\r\n          return b - a;\r\n        },\r\n        true\r\n      ),\r\n      17\r\n    ); // `resolutions` must be sorted in descending order\r\n\r\n    // check if we've got a consistent zoom factor and origin\r\n    let zoomFactor;\r\n    if (!options.origins) {\r\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\r\n        if (!zoomFactor) {\r\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\r\n        } else {\r\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\r\n            zoomFactor = undefined;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zoomFactor_ = zoomFactor;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxZoom = this.resolutions_.length - 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../coordinate.js\").Coordinate|null}\r\n     */\r\n    this.origin_ = options.origin !== undefined ? options.origin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\r\n     */\r\n    this.origins_ = null;\r\n    if (options.origins !== undefined) {\r\n      this.origins_ = options.origins;\r\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\r\n    }\r\n\r\n    const extent = options.extent;\r\n\r\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\r\n      this.origin_ = getTopLeft(extent);\r\n    }\r\n\r\n    assert(\r\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\r\n      18\r\n    ); // Either `origin` or `origins` must be configured, never both\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number|import(\"../size.js\").Size>}\r\n     */\r\n    this.tileSizes_ = null;\r\n    if (options.tileSizes !== undefined) {\r\n      this.tileSizes_ = options.tileSizes;\r\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|import(\"../size.js\").Size}\r\n     */\r\n    this.tileSize_ =\r\n      options.tileSize !== undefined\r\n        ? options.tileSize\r\n        : !this.tileSizes_\r\n        ? DEFAULT_TILE_SIZE\r\n        : null;\r\n    assert(\r\n      (!this.tileSize_ && this.tileSizes_) ||\r\n        (this.tileSize_ && !this.tileSizes_),\r\n      22\r\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.extent_ = extent !== undefined ? extent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../TileRange.js\").default>}\r\n     */\r\n    this.fullTileRanges_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent_ = [0, 0, 0, 0];\r\n\r\n    if (options.sizes !== undefined) {\r\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\r\n        const tileRange = new TileRange(\r\n          Math.min(0, size[0]),\r\n          Math.max(size[0] - 1, -1),\r\n          Math.min(0, size[1]),\r\n          Math.max(size[1] - 1, -1)\r\n        );\r\n        if (extent) {\r\n          const restrictedTileRange = this.getTileRangeForExtentAndZ(extent, z);\r\n          tileRange.minX = Math.max(restrictedTileRange.minX, tileRange.minX);\r\n          tileRange.maxX = Math.min(restrictedTileRange.maxX, tileRange.maxX);\r\n          tileRange.minY = Math.max(restrictedTileRange.minY, tileRange.minY);\r\n          tileRange.maxY = Math.min(restrictedTileRange.maxY, tileRange.maxY);\r\n        }\r\n        return tileRange;\r\n      }, this);\r\n    } else if (extent) {\r\n      this.calculateTileRanges_(extent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\r\n  forEachTileCoord(extent, zoom, callback) {\r\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\r\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\r\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\r\n        callback([zoom, i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   */\r\n  forEachTileCoordParentTileRange(\r\n    tileCoord,\r\n    callback,\r\n    tempTileRange,\r\n    tempExtent\r\n  ) {\r\n    let tileRange, x, y;\r\n    let tileCoordExtent = null;\r\n    let z = tileCoord[0] - 1;\r\n    if (this.zoomFactor_ === 2) {\r\n      x = tileCoord[1];\r\n      y = tileCoord[2];\r\n    } else {\r\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, tempExtent);\r\n    }\r\n    while (z >= this.minZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        x = Math.floor(x / 2);\r\n        y = Math.floor(y / 2);\r\n        tileRange = createOrUpdateTileRange(x, x, y, y, tempTileRange);\r\n      } else {\r\n        tileRange = this.getTileRangeForExtentAndZ(\r\n          tileCoordExtent,\r\n          z,\r\n          tempTileRange\r\n        );\r\n      }\r\n      if (callback(z, tileRange)) {\r\n        return true;\r\n      }\r\n      --z;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return this.maxZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return this.minZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\r\n   * @api\r\n   */\r\n  getOrigin(z) {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    }\r\n    return this.origins_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\r\n  getResolution(z) {\r\n    return this.resolutions_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array<number>} Resolutions.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary import(\"../extent.js\").Extent object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileCoordChildTileRange(tileCoord, tempTileRange, tempExtent) {\r\n    if (tileCoord[0] < this.maxZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        const minX = tileCoord[1] * 2;\r\n        const minY = tileCoord[2] * 2;\r\n        return createOrUpdateTileRange(\r\n          minX,\r\n          minX + 1,\r\n          minY,\r\n          minY + 1,\r\n          tempTileRange\r\n        );\r\n      }\r\n      const tileCoordExtent = this.getTileCoordExtent(\r\n        tileCoord,\r\n        tempExtent || this.tmpExtent_\r\n      );\r\n      return this.getTileRangeForExtentAndZ(\r\n        tileCoordExtent,\r\n        tileCoord[0] + 1,\r\n        tempTileRange\r\n      );\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary import(\"../TileRange.js\").default object.\r\n   * @return {import(\"../TileRange.js\").default|null} Tile range.\r\n   */\r\n  getTileRangeForTileCoordAndZ(tileCoord, z, tempTileRange) {\r\n    if (z > this.maxZoom || z < this.minZoom) {\r\n      return null;\r\n    }\r\n\r\n    const tileCoordZ = tileCoord[0];\r\n    const tileCoordX = tileCoord[1];\r\n    const tileCoordY = tileCoord[2];\r\n\r\n    if (z === tileCoordZ) {\r\n      return createOrUpdateTileRange(\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tileCoordX,\r\n        tileCoordY,\r\n        tempTileRange\r\n      );\r\n    }\r\n\r\n    if (this.zoomFactor_) {\r\n      const factor = Math.pow(this.zoomFactor_, z - tileCoordZ);\r\n      const minX = Math.floor(tileCoordX * factor);\r\n      const minY = Math.floor(tileCoordY * factor);\r\n      if (z < tileCoordZ) {\r\n        return createOrUpdateTileRange(minX, minX, minY, minY, tempTileRange);\r\n      }\r\n\r\n      const maxX = Math.floor(factor * (tileCoordX + 1)) - 1;\r\n      const maxY = Math.floor(factor * (tileCoordY + 1)) - 1;\r\n      return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n    }\r\n\r\n    const tileCoordExtent = this.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    return this.getTileRangeForExtentAndZ(tileCoordExtent, z, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {import(\"../TileRange.js\").default} [tempTileRange] Temporary tile range object.\r\n   * @return {import(\"../TileRange.js\").default} Tile range.\r\n   */\r\n  getTileRangeForExtentAndZ(extent, z, tempTileRange) {\r\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tmpTileCoord);\r\n    const minX = tmpTileCoord[1];\r\n    const minY = tmpTileCoord[2];\r\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tmpTileCoord);\r\n    const maxX = tmpTileCoord[1];\r\n    const maxY = tmpTileCoord[2];\r\n    return createOrUpdateTileRange(minX, maxX, minY, maxY, tempTileRange);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\r\n   */\r\n  getTileCoordCenter(tileCoord) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    return [\r\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\r\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../extent.js\").Extent} [tempExtent] Temporary extent object.\r\n   * @return {import(\"../extent.js\").Extent} Extent.\r\n   * @api\r\n   */\r\n  getTileCoordExtent(tileCoord, tempExtent) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\r\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\r\n    const maxX = minX + tileSize[0] * resolution;\r\n    const maxY = minY + tileSize[1] * resolution;\r\n    return createOrUpdate(minX, minY, maxX, maxY, tempExtent);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndResolution_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      resolution,\r\n      false,\r\n      opt_tileCoord\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndResolution_(\r\n    x,\r\n    y,\r\n    resolution,\r\n    reverseIntersectionPolicy,\r\n    opt_tileCoord\r\n  ) {\r\n    const z = this.getZForResolution(resolution);\r\n    const scale = resolution / this.getResolution(z);\r\n    const origin = this.getOrigin(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (scale * (x - origin[0])) / resolution / tileSize[0];\r\n    let tileCoordY = (scale * (origin[1] - y)) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Temporary import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\r\n    const origin = this.getOrigin(z);\r\n    const resolution = this.getResolution(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    let tileCoordX = (x - origin[0]) / resolution / tileSize[0];\r\n    let tileCoordY = (origin[1] - y) / resolution / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = ceil(tileCoordX, DECIMALS) - 1;\r\n      tileCoordY = ceil(tileCoordY, DECIMALS) - 1;\r\n    } else {\r\n      tileCoordX = floor(tileCoordX, DECIMALS);\r\n      tileCoordY = floor(tileCoordY, DECIMALS);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\r\n   * @param {number} z Zoom level.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} [opt_tileCoord] Destination import(\"../tilecoord.js\").TileCoord object.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndZ_(\r\n      coordinate[0],\r\n      coordinate[1],\r\n      z,\r\n      false,\r\n      opt_tileCoord\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\r\n  getTileCoordResolution(tileCoord) {\r\n    return this.resolutions_[tileCoord[0]];\r\n  }\r\n\r\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an {@link import(\"../size.js\").Size}, run the result through {@link module:ol/size.toSize}.\r\n   * @param {number} z Z.\r\n   * @return {number|import(\"../size.js\").Size} Tile size.\r\n   * @api\r\n   */\r\n  getTileSize(z) {\r\n    if (this.tileSize_) {\r\n      return this.tileSize_;\r\n    }\r\n    return this.tileSizes_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\r\n   */\r\n  getFullTileRange(z) {\r\n    if (!this.fullTileRanges_) {\r\n      return this.extent_\r\n        ? this.getTileRangeForExtentAndZ(this.extent_, z)\r\n        : null;\r\n    }\r\n    return this.fullTileRanges_[z];\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number|import(\"../array.js\").NearestDirectionFunction} [opt_direction]\r\n   *     If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest higher resolution (lower Z) will be used. If -1, the\r\n   *     nearest lower resolution (higher Z) will be used. Default is 0.\r\n   *     Use a {@link module:ol/array~NearestDirectionFunction} for more precise control.\r\n   *\r\n   * For example to change tile Z at the midpoint of zoom levels\r\n   * ```js\r\n   * function(value, high, low) {\r\n   *   return value - low * Math.sqrt(high / low);\r\n   * }\r\n   * ```\r\n   * @return {number} Z.\r\n   * @api\r\n   */\r\n  getZForResolution(resolution, opt_direction) {\r\n    const z = linearFindNearest(\r\n      this.resolutions_,\r\n      resolution,\r\n      opt_direction || 0\r\n    );\r\n    return clamp(z, this.minZoom, this.maxZoom);\r\n  }\r\n\r\n  /**\r\n   * The tile with the provided tile coordinate intersects the given viewport.\r\n   * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coordinate.\r\n   * @param {Array<number>} viewport Viewport as returned from {@link module:ol/extent.getRotatedViewport}.\r\n   * @return {boolean} The tile with the provided tile coordinate intersects the given viewport.\r\n   */\r\n  tileCoordIntersectsViewport(tileCoord, viewport) {\r\n    return intersectsLinearRing(\r\n      viewport,\r\n      0,\r\n      viewport.length,\r\n      2,\r\n      this.getTileCoordExtent(tileCoord)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\r\n  calculateTileRanges_(extent) {\r\n    const length = this.resolutions_.length;\r\n    const fullTileRanges = new Array(length);\r\n    for (let z = this.minZoom; z < length; ++z) {\r\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\r\n    }\r\n    this.fullTileRanges_ = fullTileRanges;\r\n  }\r\n}\r\n\r\nexport default TileGrid;\r\n", "/**\r\n * @module ol/tilegrid\r\n */\r\nimport TileGrid from './tilegrid/TileGrid.js';\r\nimport {DEFAULT_MAX_ZOOM, DEFAULT_TILE_SIZE} from './tilegrid/common.js';\r\nimport {METERS_PER_UNIT, get as getProjection} from './proj.js';\r\nimport {\r\n  containsCoordinate,\r\n  createOrUpdate,\r\n  getCorner,\r\n  getHeight,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {toSize} from './size.js';\r\n\r\n/**\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {!TileGrid} Default tile grid for the\r\n * passed projection.\r\n */\r\nexport function getForProjection(projection) {\r\n  let tileGrid = projection.getDefaultTileGrid();\r\n  if (!tileGrid) {\r\n    tileGrid = createForProjection(projection);\r\n    projection.setDefaultTileGrid(tileGrid);\r\n  }\r\n  return tileGrid;\r\n}\r\n\r\n/**\r\n * @param {TileGrid} tileGrid Tile grid.\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {import(\"./tilecoord.js\").TileCoord} Tile coordinate.\r\n */\r\nexport function wrapX(tileGrid, tileCoord, projection) {\r\n  const z = tileCoord[0];\r\n  const center = tileGrid.getTileCoordCenter(tileCoord);\r\n  const projectionExtent = extentFromProjection(projection);\r\n  if (!containsCoordinate(projectionExtent, center)) {\r\n    const worldWidth = getWidth(projectionExtent);\r\n    const worldsAway = Math.ceil(\r\n      (projectionExtent[0] - center[0]) / worldWidth\r\n    );\r\n    center[0] += worldWidth * worldsAway;\r\n    return tileGrid.getTileCoordForCoordAndZ(center, z);\r\n  }\r\n  return tileCoord;\r\n}\r\n\r\n/**\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\r\nexport function createForExtent(extent, maxZoom, tileSize, corner) {\r\n  corner = corner !== undefined ? corner : 'top-left';\r\n\r\n  const resolutions = resolutionsFromExtent(extent, maxZoom, tileSize);\r\n\r\n  return new TileGrid({\r\n    extent: extent,\r\n    origin: getCorner(extent, corner),\r\n    resolutions: resolutions,\r\n    tileSize: tileSize,\r\n  });\r\n}\r\n\r\n/**\r\n * @typedef {Object} XYZOptions\r\n * @property {import(\"./extent.js\").Extent} [extent] Extent for the tile grid. The origin for an XYZ tile grid is the\r\n * top-left corner of the extent. If `maxResolution` is not provided the zero level of the grid is defined by the resolution\r\n * at which one tile fits in the provided extent. If not provided, the extent of the EPSG:3857 projection is used.\r\n * @property {number} [maxResolution] Resolution at level zero.\r\n * @property {number} [maxZoom] Maximum zoom. The default is `42`. This determines the number of levels\r\n * in the grid set. For example, a `maxZoom` of 21 means there are 22 levels in the grid set.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {number|import(\"./size.js\").Size} [tileSize=[256, 256]] Tile size in pixels.\r\n */\r\n\r\n/**\r\n * Creates a tile grid with a standard XYZ tiling scheme.\r\n * @param {XYZOptions} [options] Tile grid options.\r\n * @return {!TileGrid} Tile grid instance.\r\n * @api\r\n */\r\nexport function createXYZ(options) {\r\n  const xyzOptions = options || {};\r\n\r\n  const extent = xyzOptions.extent || getProjection('EPSG:3857').getExtent();\r\n\r\n  const gridOptions = {\r\n    extent: extent,\r\n    minZoom: xyzOptions.minZoom,\r\n    tileSize: xyzOptions.tileSize,\r\n    resolutions: resolutionsFromExtent(\r\n      extent,\r\n      xyzOptions.maxZoom,\r\n      xyzOptions.tileSize,\r\n      xyzOptions.maxResolution\r\n    ),\r\n  };\r\n  return new TileGrid(gridOptions);\r\n}\r\n\r\n/**\r\n * Create a resolutions array from an extent.  A zoom factor of 2 is assumed.\r\n * @param {import(\"./extent.js\").Extent} extent Extent.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {number} [maxResolution] Resolution at level zero.\r\n * @return {!Array<number>} Resolutions array.\r\n */\r\nfunction resolutionsFromExtent(extent, maxZoom, tileSize, maxResolution) {\r\n  maxZoom = maxZoom !== undefined ? maxZoom : DEFAULT_MAX_ZOOM;\r\n  tileSize = toSize(tileSize !== undefined ? tileSize : DEFAULT_TILE_SIZE);\r\n\r\n  const height = getHeight(extent);\r\n  const width = getWidth(extent);\r\n\r\n  maxResolution =\r\n    maxResolution > 0\r\n      ? maxResolution\r\n      : Math.max(width / tileSize[0], height / tileSize[1]);\r\n\r\n  const length = maxZoom + 1;\r\n  const resolutions = new Array(length);\r\n  for (let z = 0; z < length; ++z) {\r\n    resolutions[z] = maxResolution / Math.pow(2, z);\r\n  }\r\n  return resolutions;\r\n}\r\n\r\n/**\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @param {number} [maxZoom] Maximum zoom level (default is\r\n *     DEFAULT_MAX_ZOOM).\r\n * @param {number|import(\"./size.js\").Size} [tileSize] Tile size (default uses\r\n *     DEFAULT_TILE_SIZE).\r\n * @param {import(\"./extent.js\").Corner} [corner] Extent corner (default is `'top-left'`).\r\n * @return {!TileGrid} TileGrid instance.\r\n */\r\nexport function createForProjection(projection, maxZoom, tileSize, corner) {\r\n  const extent = extentFromProjection(projection);\r\n  return createForExtent(extent, maxZoom, tileSize, corner);\r\n}\r\n\r\n/**\r\n * Generate a tile grid extent from a projection.  If the projection has an\r\n * extent, it is used.  If not, a global extent is assumed.\r\n * @param {import(\"./proj.js\").ProjectionLike} projection Projection.\r\n * @return {import(\"./extent.js\").Extent} Extent.\r\n */\r\nexport function extentFromProjection(projection) {\r\n  projection = getProjection(projection);\r\n  let extent = projection.getExtent();\r\n  if (!extent) {\r\n    const half =\r\n      (180 * METERS_PER_UNIT.degrees) / projection.getMetersPerUnit();\r\n    extent = createOrUpdate(-half, -half, half, half);\r\n  }\r\n  return extent;\r\n}\r\n", "/**\r\n * @module ol/source/Tile\r\n */\r\nimport Event from '../events/Event.js';\r\nimport Source from './Source.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileState from '../TileState.js';\r\nimport {abstract} from '../util.js';\r\nimport {assert} from '../asserts.js';\r\nimport {equivalent} from '../proj.js';\r\nimport {getKeyZXY, withinExtentAndZ} from '../tilecoord.js';\r\nimport {\r\n  getForProjection as getTileGridForProjection,\r\n  wrapX,\r\n} from '../tilegrid.js';\r\nimport {scale as scaleSize, toSize} from '../size.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./TileEventType\").TileSourceEventTypes, TileSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types|\r\n *     import(\"./TileEventType\").TileSourceEventTypes, Return>} TileSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] CacheSize.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {boolean} [wrapX=false] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing images divided into a tile grid.\r\n * @abstract\r\n * @api\r\n */\r\nclass TileSource extends Source {\r\n  /**\r\n   * @param {Options} options SourceTile source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      wrapX: options.wrapX,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {TileSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.opaque_ = options.opaque !== undefined ? options.opaque : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.tilePixelRatio_ =\r\n      options.tilePixelRatio !== undefined ? options.tilePixelRatio : 1;\r\n\r\n    /**\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default|null}\r\n     */\r\n    this.tileGrid = options.tileGrid !== undefined ? options.tileGrid : null;\r\n\r\n    const tileSize = [256, 256];\r\n    if (this.tileGrid) {\r\n      toSize(this.tileGrid.getTileSize(this.tileGrid.getMinZoom()), tileSize);\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../TileCache.js\").default}\r\n     */\r\n    this.tileCache = new TileCache(options.cacheSize || 0);\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../size.js\").Size}\r\n     */\r\n    this.tmpSize = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.key_ = options.key || '';\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").Options}\r\n     */\r\n    this.tileOptions = {\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    };\r\n\r\n    /**\r\n     * zDirection hint, read by the renderer. Indicates which resolution should be used\r\n     * by a renderer if the views resolution does not match any resolution of the tile source.\r\n     * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\r\n     * will be used. If -1, the nearest higher resolution will be used.\r\n     * @type {number|import(\"../array.js\").NearestDirectionFunction}\r\n     */\r\n    this.zDirection = options.zDirection ? options.zDirection : 0;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    return this.tileCache.canExpireCache();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (tileCache) {\r\n      tileCache.expireCache(usedTiles);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {number} z Zoom level.\r\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\r\n   * @param {function(import(\"../Tile.js\").default):(boolean|void)} callback Called with each\r\n   *     loaded tile.  If the callback returns `false`, the tile will not be\r\n   *     considered loaded.\r\n   * @return {boolean} The tile range is fully covered with loaded tiles.\r\n   */\r\n  forEachLoadedTile(projection, z, tileRange, callback) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (!tileCache) {\r\n      return false;\r\n    }\r\n\r\n    let covered = true;\r\n    let tile, tileCoordKey, loaded;\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        tileCoordKey = getKeyZXY(z, x, y);\r\n        loaded = false;\r\n        if (tileCache.containsKey(tileCoordKey)) {\r\n          tile = /** @type {!import(\"../Tile.js\").default} */ (\r\n            tileCache.get(tileCoordKey)\r\n          );\r\n          loaded = tile.getState() === TileState.LOADED;\r\n          if (loaded) {\r\n            loaded = callback(tile) !== false;\r\n          }\r\n        }\r\n        if (!loaded) {\r\n          covered = false;\r\n        }\r\n      }\r\n    }\r\n    return covered;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterForProjection(projection) {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\r\n  getKey() {\r\n    return this.key_;\r\n  }\r\n\r\n  /**\r\n   * Set the value to be used as the key for all tiles in the source.\r\n   * @param {string} key The key for tiles.\r\n   * @protected\r\n   */\r\n  setKey(key) {\r\n    if (this.key_ !== key) {\r\n      this.key_ = key;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {boolean} Opaque.\r\n   */\r\n  getOpaque(projection) {\r\n    return this.opaque_;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    const tileGrid = projection\r\n      ? this.getTileGridForProjection(projection)\r\n      : this.tileGrid;\r\n    if (!tileGrid) {\r\n      return null;\r\n    }\r\n    return tileGrid.getResolutions();\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../Tile.js\").default} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Return the tile grid of the tile source.\r\n   * @return {import(\"../tilegrid/TileGrid.js\").default|null} Tile grid.\r\n   * @api\r\n   */\r\n  getTileGrid() {\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    if (!this.tileGrid) {\r\n      return getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGrid;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   * @protected\r\n   */\r\n  getTileCacheForProjection(projection) {\r\n    const sourceProjection = this.getProjection();\r\n    assert(\r\n      sourceProjection === null || equivalent(sourceProjection, projection),\r\n      68 // A VectorTile source can only be rendered if it has a projection compatible with the view projection.\r\n    );\r\n    return this.tileCache;\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source. Subclasses may override this\r\n   * method, which is meant to return a supported pixel ratio that matches the\r\n   * provided `pixelRatio` as close as possible.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return this.tilePixelRatio_;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\r\n  getTilePixelSize(z, pixelRatio, projection) {\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    const tilePixelRatio = this.getTilePixelRatio(pixelRatio);\r\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\r\n    if (tilePixelRatio == 1) {\r\n      return tileSize;\r\n    }\r\n    return scaleSize(tileSize, tilePixelRatio, this.tmpSize);\r\n  }\r\n\r\n  /**\r\n   * Returns a tile coordinate wrapped around the x-axis. When the tile coordinate\r\n   * is outside the resolution and extent range of the tile grid, `null` will be\r\n   * returned.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"../proj/Projection.js\").default} [projection] Projection.\r\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate to be passed to the tileUrlFunction or\r\n   *     null if no tile URL should be created for the passed `tileCoord`.\r\n   */\r\n  getTileCoordForTileUrlFunction(tileCoord, projection) {\r\n    projection = projection !== undefined ? projection : this.getProjection();\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    if (this.getWrapX() && projection.isGlobal()) {\r\n      tileCoord = wrapX(tileGrid, tileCoord, projection);\r\n    }\r\n    return withinExtentAndZ(tileCoord, tileGrid) ? tileCoord : null;\r\n  }\r\n\r\n  /**\r\n   * Remove all cached tiles from the source. The next render cycle will fetch new tiles.\r\n   * @api\r\n   */\r\n  clear() {\r\n    this.tileCache.clear();\r\n  }\r\n\r\n  refresh() {\r\n    this.clear();\r\n    super.refresh();\r\n  }\r\n\r\n  /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  updateCacheSize(tileCount, projection) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    if (tileCount > tileCache.highWaterMark) {\r\n      tileCache.highWaterMark = tileCount;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @abstract\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  useTile(z, x, y, projection) {}\r\n}\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Tile~TileSource} instances are instances of this\r\n * type.\r\n */\r\nexport class TileSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Tile.js\").default} tile The tile.\r\n   */\r\n  constructor(type, tile) {\r\n    super(type);\r\n\r\n    /**\r\n     * The tile related to the event.\r\n     * @type {import(\"../Tile.js\").default}\r\n     * @api\r\n     */\r\n    this.tile = tile;\r\n  }\r\n}\r\n\r\nexport default TileSource;\r\n", "/**\r\n * @module ol/source/TileEventType\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  /**\r\n   * Triggered when a tile starts loading.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadstart\r\n   * @api\r\n   */\r\n  TILELOADSTART: 'tileloadstart',\r\n\r\n  /**\r\n   * Triggered when a tile finishes loading, either when its data is loaded,\r\n   * or when loading was aborted because the tile is no longer needed.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloadend\r\n   * @api\r\n   */\r\n  TILELOADEND: 'tileloadend',\r\n\r\n  /**\r\n   * Triggered if tile loading results in an error. Note that this is not the\r\n   * right place to re-fetch tiles. See {@link module:ol/ImageTile~ImageTile#load}\r\n   * for details.\r\n   * @event module:ol/source/Tile.TileSourceEvent#tileloaderror\r\n   * @api\r\n   */\r\n  TILELOADERROR: 'tileloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'tileloadstart'|'tileloadend'|'tileloaderror'} TileSourceEventTypes\r\n */\r\n", "/**\r\n * @module ol/tileurlfunction\r\n */\r\nimport {assert} from './asserts.js';\r\nimport {modulo} from './math.js';\r\nimport {hash as tileCoordHash} from './tilecoord.js';\r\n\r\n/**\r\n * @param {string} template Template.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplate(template, tileGrid) {\r\n  const zRegEx = /\\{z\\}/g;\r\n  const xRegEx = /\\{x\\}/g;\r\n  const yRegEx = /\\{y\\}/g;\r\n  const dashYRegEx = /\\{-y\\}/g;\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      return template\r\n        .replace(zRegEx, tileCoord[0].toString())\r\n        .replace(xRegEx, tileCoord[1].toString())\r\n        .replace(yRegEx, tileCoord[2].toString())\r\n        .replace(dashYRegEx, function () {\r\n          const z = tileCoord[0];\r\n          const range = tileGrid.getFullTileRange(z);\r\n          assert(range, 55); // The {-y} placeholder requires a tile grid with extent\r\n          const y = range.getHeight() - tileCoord[2] - 1;\r\n          return y.toString();\r\n        });\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Array<string>} templates Templates.\r\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTemplates(templates, tileGrid) {\r\n  const len = templates.length;\r\n  const tileUrlFunctions = new Array(len);\r\n  for (let i = 0; i < len; ++i) {\r\n    tileUrlFunctions[i] = createFromTemplate(templates[i], tileGrid);\r\n  }\r\n  return createFromTileUrlFunctions(tileUrlFunctions);\r\n}\r\n\r\n/**\r\n * @param {Array<import(\"./Tile.js\").UrlFunction>} tileUrlFunctions Tile URL Functions.\r\n * @return {import(\"./Tile.js\").UrlFunction} Tile URL function.\r\n */\r\nexport function createFromTileUrlFunctions(tileUrlFunctions) {\r\n  if (tileUrlFunctions.length === 1) {\r\n    return tileUrlFunctions[0];\r\n  }\r\n  return (\r\n    /**\r\n     * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\r\n     * @param {number} pixelRatio Pixel ratio.\r\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n     * @return {string|undefined} Tile URL.\r\n     */\r\n    function (tileCoord, pixelRatio, projection) {\r\n      if (!tileCoord) {\r\n        return undefined;\r\n      }\r\n      const h = tileCoordHash(tileCoord);\r\n      const index = modulo(h, tileUrlFunctions.length);\r\n      return tileUrlFunctions[index](tileCoord, pixelRatio, projection);\r\n    }\r\n  );\r\n}\r\n\r\n/**\r\n * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {import(\"./proj/Projection.js\").default} projection Projection.\r\n * @return {string|undefined} Tile URL.\r\n */\r\nexport function nullTileUrlFunction(tileCoord, pixelRatio, projection) {\r\n  return undefined;\r\n}\r\n\r\n/**\r\n * @param {string} url URL.\r\n * @return {Array<string>} Array of urls.\r\n */\r\nexport function expandUrl(url) {\r\n  const urls = [];\r\n  let match = /\\{([a-z])-([a-z])\\}/.exec(url);\r\n  if (match) {\r\n    // char range\r\n    const startCharCode = match[1].charCodeAt(0);\r\n    const stopCharCode = match[2].charCodeAt(0);\r\n    let charCode;\r\n    for (charCode = startCharCode; charCode <= stopCharCode; ++charCode) {\r\n      urls.push(url.replace(match[0], String.fromCharCode(charCode)));\r\n    }\r\n    return urls;\r\n  }\r\n  match = /\\{(\\d+)-(\\d+)\\}/.exec(url);\r\n  if (match) {\r\n    // number range\r\n    const stop = parseInt(match[2], 10);\r\n    for (let i = parseInt(match[1], 10); i <= stop; i++) {\r\n      urls.push(url.replace(match[0], i.toString()));\r\n    }\r\n    return urls;\r\n  }\r\n  urls.push(url);\r\n  return urls;\r\n}\r\n", "/**\r\n * @module ol/source/UrlTile\r\n */\r\nimport TileEventType from './TileEventType.js';\r\nimport TileSource, {TileSourceEvent} from './Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\r\nimport {getKeyZXY} from '../tilecoord.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Cache size.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] TileGrid.\r\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction TileLoadFunction.\r\n * @property {number} [tilePixelRatio] TilePixelRatio.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] TileUrlFunction.\r\n * @property {string} [url] Url.\r\n * @property {Array<string>} [urls] Urls.\r\n * @property {boolean} [wrapX=true] WrapX.\r\n * @property {number} [transition] Transition.\r\n * @property {string} [key] Key.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0] ZDirection.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for sources providing tiles divided into a tile grid over http.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n */\r\nclass UrlTile extends TileSource {\r\n  /**\r\n   * @param {Options} options Image tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      opaque: options.opaque,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      tileGrid: options.tileGrid,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n      key: options.key,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.generateTileUrlFunction_ =\r\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction = options.tileLoadFunction;\r\n\r\n    if (options.tileUrlFunction) {\r\n      this.tileUrlFunction = options.tileUrlFunction;\r\n    }\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<string>|null}\r\n     */\r\n    this.urls = null;\r\n\r\n    if (options.urls) {\r\n      this.setUrls(options.urls);\r\n    } else if (options.url) {\r\n      this.setUrl(options.url);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, boolean>}\r\n     */\r\n    this.tileLoadingKeys_ = {};\r\n  }\r\n\r\n  /**\r\n   * Return the tile load function of the source.\r\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\r\n   * @api\r\n   */\r\n  getTileLoadFunction() {\r\n    return this.tileLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * Return the tile URL function of the source.\r\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\r\n   * @api\r\n   */\r\n  getTileUrlFunction() {\r\n    return Object.getPrototypeOf(this).tileUrlFunction === this.tileUrlFunction\r\n      ? this.tileUrlFunction.bind(this)\r\n      : this.tileUrlFunction;\r\n  }\r\n\r\n  /**\r\n   * Return the URLs used for this source.\r\n   * When a tileUrlFunction is used instead of url or urls,\r\n   * null will be returned.\r\n   * @return {!Array<string>|null} URLs.\r\n   * @api\r\n   */\r\n  getUrls() {\r\n    return this.urls;\r\n  }\r\n\r\n  /**\r\n   * Handle tile change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\r\n  handleTileChange(event) {\r\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\r\n    const uid = getUid(tile);\r\n    const tileState = tile.getState();\r\n    let type;\r\n    if (tileState == TileState.LOADING) {\r\n      this.tileLoadingKeys_[uid] = true;\r\n      type = TileEventType.TILELOADSTART;\r\n    } else if (uid in this.tileLoadingKeys_) {\r\n      delete this.tileLoadingKeys_[uid];\r\n      type =\r\n        tileState == TileState.ERROR\r\n          ? TileEventType.TILELOADERROR\r\n          : tileState == TileState.LOADED\r\n          ? TileEventType.TILELOADEND\r\n          : undefined;\r\n    }\r\n    if (type != undefined) {\r\n      this.dispatchEvent(new TileSourceEvent(type, tile));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the tile load function of the source.\r\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @api\r\n   */\r\n  setTileLoadFunction(tileLoadFunction) {\r\n    this.tileCache.clear();\r\n    this.tileLoadFunction = tileLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the tile URL function of the source.\r\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\r\n   * @param {string} [key] Optional new tile key for the source.\r\n   * @api\r\n   */\r\n  setTileUrlFunction(tileUrlFunction, key) {\r\n    this.tileUrlFunction = tileUrlFunction;\r\n    this.tileCache.pruneExceptNewestZ();\r\n    if (typeof key !== 'undefined') {\r\n      this.setKey(key);\r\n    } else {\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    const urls = expandUrl(url);\r\n    this.urls = urls;\r\n    this.setUrls(urls);\r\n  }\r\n\r\n  /**\r\n   * Set the URLs to use for requests.\r\n   * @param {Array<string>} urls URLs.\r\n   * @api\r\n   */\r\n  setUrls(urls) {\r\n    this.urls = urls;\r\n    const key = urls.join('\\n');\r\n    if (this.generateTileUrlFunction_) {\r\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\r\n    } else {\r\n      this.setKey(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {string|undefined} Tile URL.\r\n   */\r\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Marks a tile coord as being used, without triggering a load.\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   */\r\n  useTile(z, x, y) {\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    if (this.tileCache.containsKey(tileCoordKey)) {\r\n      this.tileCache.get(tileCoordKey);\r\n    }\r\n  }\r\n}\r\n\r\nexport default UrlTile;\r\n", "/**\r\n * @module ol/Tile\r\n */\r\nimport EventTarget from './events/Target.js';\r\nimport EventType from './events/EventType.js';\r\nimport TileState from './TileState.js';\r\nimport {abstract} from './util.js';\r\nimport {easeIn} from './easing.js';\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Tile~Tile} for the tile and a\r\n * `{string}` for the url as arguments. The default is\r\n * ```js\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   tile.getImage().src = src;\r\n * });\r\n * ```\r\n * For more fine grained control, the load function can use fetch or XMLHttpRequest and involve\r\n * error handling:\r\n *\r\n * ```js\r\n * import TileState from 'ol/TileState.js';\r\n *\r\n * source.setTileLoadFunction(function(tile, src) {\r\n *   const xhr = new XMLHttpRequest();\r\n *   xhr.responseType = 'blob';\r\n *   xhr.addEventListener('loadend', function (evt) {\r\n *     const data = this.response;\r\n *     if (data !== undefined) {\r\n *       tile.getImage().src = URL.createObjectURL(data);\r\n *     } else {\r\n *       tile.setState(TileState.ERROR);\r\n *     }\r\n *   });\r\n *   xhr.addEventListener('error', function () {\r\n *     tile.setState(TileState.ERROR);\r\n *   });\r\n *   xhr.open('GET', src);\r\n *   xhr.send();\r\n * });\r\n * ```\r\n *\r\n * @typedef {function(Tile, string): void} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Tile~TileSource} sources use a function of this type to get\r\n * the url that provides a tile for a given tile coordinate.\r\n *\r\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\r\n * coordinate, a `{number}` representing the pixel ratio and a\r\n * {@link module:ol/proj/Projection~Projection} for the projection  as arguments\r\n * and returns a `{string}` representing the tile URL, or undefined if no tile\r\n * should be requested for the passed tile coordinate.\r\n *\r\n * @typedef {function(import(\"./tilecoord.js\").TileCoord, number,\r\n *           import(\"./proj/Projection.js\").default): (string|undefined)} UrlFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @api\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for tiles.\r\n *\r\n * @abstract\r\n */\r\nclass Tile extends EventTarget {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, options) {\r\n    super();\r\n\r\n    options = options ? options : {};\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.tileCoord = tileCoord;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"./TileState.js\").default}\r\n     */\r\n    this.state = state;\r\n\r\n    /**\r\n     * An \"interim\" tile for this tile. The interim tile may be used while this\r\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\r\n     * on the source.\r\n     * @type {Tile}\r\n     */\r\n    this.interimTile = null;\r\n\r\n    /**\r\n     * A key assigned to the tile. This is used by the tile source to determine\r\n     * if this tile can effectively be used, or if a new tile should be created\r\n     * and this one be used as an interim tile for this new tile.\r\n     * @type {string}\r\n     */\r\n    this.key = '';\r\n\r\n    /**\r\n     * The duration for the opacity transition.\r\n     * @type {number}\r\n     */\r\n    this.transition_ =\r\n      options.transition === undefined ? 250 : options.transition;\r\n\r\n    /**\r\n     * Lookup of start times for rendering transitions.  If the start time is\r\n     * equal to -1, the transition is complete.\r\n     * @type {Object<string, number>}\r\n     */\r\n    this.transitionStarts_ = {};\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate = !!options.interpolate;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * Called by the tile cache when the tile is removed from the cache due to expiry\r\n   */\r\n  release() {\r\n    if (this.state === TileState.ERROR) {\r\n      // to remove the `change` listener on this tile in `ol/TileQueue#handleTileChange`\r\n      this.setState(TileState.EMPTY);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {string} Key.\r\n   */\r\n  getKey() {\r\n    return this.key + '/' + this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * Get the interim tile most suitable for rendering using the chain of interim\r\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\r\n   * such tile exists, the original tile is returned.\r\n   * @return {!Tile} Best tile for rendering.\r\n   */\r\n  getInterimTile() {\r\n    if (!this.interimTile) {\r\n      //empty chain\r\n      return this;\r\n    }\r\n    let tile = this.interimTile;\r\n\r\n    // find the first loaded tile and return it. Since the chain is sorted in\r\n    // decreasing order of creation time, there is no need to search the remainder\r\n    // of the list (all those tiles correspond to older requests and will be\r\n    // cleaned up by refreshInterimChain)\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        // Show tile immediately instead of fading it in after loading, because\r\n        // the interim tile is in place already\r\n        this.transition_ = 0;\r\n        return tile;\r\n      }\r\n      tile = tile.interimTile;\r\n    } while (tile);\r\n\r\n    // we can not find a better tile\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Goes through the chain of interim tiles and discards sections of the chain\r\n   * that are no longer relevant.\r\n   */\r\n  refreshInterimChain() {\r\n    if (!this.interimTile) {\r\n      return;\r\n    }\r\n\r\n    let tile = this.interimTile;\r\n\r\n    /**\r\n     * @type {Tile}\r\n     */\r\n    let prev = this;\r\n\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        //we have a loaded tile, we can discard the rest of the list\r\n        //we would could abort any LOADING tile request\r\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\r\n        tile.interimTile = null;\r\n        break;\r\n      } else if (tile.getState() == TileState.LOADING) {\r\n        //keep this LOADING tile any loaded tiles later in the chain are\r\n        //older than this tile, so we're still interested in the request\r\n        prev = tile;\r\n      } else if (tile.getState() == TileState.IDLE) {\r\n        //the head of the list is the most current tile, we don't need\r\n        //to start any other requests for this chain\r\n        prev.interimTile = tile.interimTile;\r\n      } else {\r\n        prev = tile;\r\n      }\r\n      tile = prev.interimTile;\r\n    } while (tile);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for this tile.\r\n   * @return {import(\"./tilecoord.js\").TileCoord} The tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoord() {\r\n    return this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"./TileState.js\").default} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * Sets the state of this tile. If you write your own {@link module:ol/Tile~LoadFunction tileLoadFunction} ,\r\n   * it is important to set the state correctly to {@link module:ol/TileState~ERROR}\r\n   * when the tile cannot be loaded. Otherwise the tile cannot be removed from\r\n   * the tile queue and will block other requests.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @api\r\n   */\r\n  setState(state) {\r\n    if (this.state !== TileState.ERROR && this.state > state) {\r\n      throw new Error('Tile load sequence violation');\r\n    }\r\n    this.state = state;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @abstract\r\n   * @api\r\n   */\r\n  load() {\r\n    abstract();\r\n  }\r\n\r\n  /**\r\n   * Get the alpha value for rendering.\r\n   * @param {string} id An id for the renderer.\r\n   * @param {number} time The render frame time.\r\n   * @return {number} A number between 0 and 1.\r\n   */\r\n  getAlpha(id, time) {\r\n    if (!this.transition_) {\r\n      return 1;\r\n    }\r\n\r\n    let start = this.transitionStarts_[id];\r\n    if (!start) {\r\n      start = time;\r\n      this.transitionStarts_[id] = start;\r\n    } else if (start === -1) {\r\n      return 1;\r\n    }\r\n\r\n    const delta = time - start + 1000 / 60; // avoid rendering at 0\r\n    if (delta >= this.transition_) {\r\n      return 1;\r\n    }\r\n    return easeIn(delta / this.transition_);\r\n  }\r\n\r\n  /**\r\n   * Determine if a tile is in an alpha transition.  A tile is considered in\r\n   * transition if tile.getAlpha() has not yet been called or has been called\r\n   * and returned 1.\r\n   * @param {string} id An id for the renderer.\r\n   * @return {boolean} The tile is in transition.\r\n   */\r\n  inTransition(id) {\r\n    if (!this.transition_) {\r\n      return false;\r\n    }\r\n    return this.transitionStarts_[id] !== -1;\r\n  }\r\n\r\n  /**\r\n   * Mark a transition as complete.\r\n   * @param {string} id An id for the renderer.\r\n   */\r\n  endTransition(id) {\r\n    if (this.transition_) {\r\n      this.transitionStarts_[id] = -1;\r\n    }\r\n  }\r\n}\r\n\r\nexport default Tile;\r\n", "/**\r\n * @module ol/VectorTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\n\r\nclass VectorTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Data source url.\r\n   * @param {import(\"./format/Feature.js\").default} format Feature format.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, format, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * Extent of this tile; set by the source.\r\n     * @type {import(\"./extent.js\").Extent}\r\n     */\r\n    this.extent = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./format/Feature.js\").default}\r\n     */\r\n    this.format_ = format;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"./Feature.js\").default>}\r\n     */\r\n    this.features_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./featureloader.js\").FeatureLoader}\r\n     */\r\n    this.loader_;\r\n\r\n    /**\r\n     * Feature projection of this tile; set by the source.\r\n     * @type {import(\"./proj/Projection.js\").default}\r\n     */\r\n    this.projection = null;\r\n\r\n    /**\r\n     * Resolution of this tile; set by the source.\r\n     * @type {number}\r\n     */\r\n    this.resolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.url_ = src;\r\n\r\n    this.key = src;\r\n  }\r\n\r\n  /**\r\n   * Get the feature format assigned for reading this tile's features.\r\n   * @return {import(\"./format/Feature.js\").default} Feature format.\r\n   * @api\r\n   */\r\n  getFormat() {\r\n    return this.format_;\r\n  }\r\n\r\n  /**\r\n   * Get the features for this tile. Geometries will be in the view projection.\r\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\r\n  getFeatures() {\r\n    return this.features_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.setState(TileState.LOADING);\r\n      this.tileLoadFunction_(this, this.url_);\r\n      if (this.loader_) {\r\n        this.loader_(this.extent, this.resolution, this.projection);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handler for successful tile load.\r\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\r\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data projection.\r\n   */\r\n  onLoad(features, dataProjection) {\r\n    this.setFeatures(features);\r\n  }\r\n\r\n  /**\r\n   * Handler for tile load errors.\r\n   */\r\n  onError() {\r\n    this.setState(TileState.ERROR);\r\n  }\r\n\r\n  /**\r\n   * Function for use in an {@link module:ol/source/VectorTile~VectorTile}'s `tileLoadFunction`.\r\n   * Sets the features for the tile.\r\n   * @param {Array<import(\"./Feature.js\").default>} features Features.\r\n   * @api\r\n   */\r\n  setFeatures(features) {\r\n    this.features_ = features;\r\n    this.setState(TileState.LOADED);\r\n  }\r\n\r\n  /**\r\n   * Set the feature loader for reading this tile's features.\r\n   * @param {import(\"./featureloader.js\").FeatureLoader} loader Feature loader.\r\n   * @api\r\n   */\r\n  setLoader(loader) {\r\n    this.loader_ = loader;\r\n  }\r\n}\r\n\r\nexport default VectorTile;\r\n", "/**\r\n * @module ol/VectorRenderTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * @typedef {Object} ReplayState\r\n * @property {boolean} dirty Dirty.\r\n * @property {null|import(\"./render.js\").OrderFunction} renderedRenderOrder RenderedRenderOrder.\r\n * @property {number} renderedTileRevision RenderedTileRevision.\r\n * @property {number} renderedResolution RenderedResolution.\r\n * @property {number} renderedRevision RenderedRevision.\r\n * @property {number} renderedTileResolution RenderedTileResolution.\r\n * @property {number} renderedTileZ RenderedTileZ.\r\n */\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nconst canvasPool = [];\r\n\r\nclass VectorRenderTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {import(\"./tilecoord.js\").TileCoord} urlTileCoord Wrapped tile coordinate for source urls.\r\n   * @param {function(VectorRenderTile):Array<import(\"./VectorTile\").default>} getSourceTiles Function\r\n   * to get source tiles for this tile.\r\n   */\r\n  constructor(tileCoord, state, urlTileCoord, getSourceTiles) {\r\n    super(tileCoord, state, {transition: 0});\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, CanvasRenderingContext2D>}\r\n     */\r\n    this.context_ = {};\r\n\r\n    /**\r\n     * Executor groups by layer uid. Entries are read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\r\n    this.executorGroups = {};\r\n\r\n    /**\r\n     * Executor groups for decluttering, by layer uid. Entries are read/written by the renderer.\r\n     * @type {Object<string, Array<import(\"./render/canvas/ExecutorGroup.js\").default>>}\r\n     */\r\n    this.declutterExecutorGroups = {};\r\n\r\n    /**\r\n     * Number of loading source tiles. Read/written by the source.\r\n     * @type {number}\r\n     */\r\n    this.loadingSourceTiles = 0;\r\n\r\n    /**\r\n     * @type {Object<number, ImageData>}\r\n     */\r\n    this.hitDetectionImageData = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object<string, ReplayState>}\r\n     */\r\n    this.replayState_ = {};\r\n\r\n    /**\r\n     * @type {Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.sourceTiles = [];\r\n\r\n    /**\r\n     * @type {Object<string, boolean>}\r\n     */\r\n    this.errorTileKeys = {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.wantedResolution;\r\n\r\n    /**\r\n     * @type {!function():Array<import(\"./VectorTile.js\").default>}\r\n     */\r\n    this.getSourceTiles = getSourceTiles.bind(undefined, this);\r\n\r\n    /**\r\n     * @type {import(\"./tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord = urlTileCoord;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {CanvasRenderingContext2D} The rendering context.\r\n   */\r\n  getContext(layer) {\r\n    const key = getUid(layer);\r\n    if (!(key in this.context_)) {\r\n      this.context_[key] = createCanvasContext2D(1, 1, canvasPool);\r\n    }\r\n    return this.context_[key];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {boolean} Tile has a rendering context for the given layer.\r\n   */\r\n  hasContext(layer) {\r\n    return getUid(layer) in this.context_;\r\n  }\r\n\r\n  /**\r\n   * Get the Canvas for this tile.\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage(layer) {\r\n    return this.hasContext(layer) ? this.getContext(layer).canvas : null;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"./layer/Layer.js\").default} layer Layer.\r\n   * @return {ReplayState} The replay state.\r\n   */\r\n  getReplayState(layer) {\r\n    const key = getUid(layer);\r\n    if (!(key in this.replayState_)) {\r\n      this.replayState_[key] = {\r\n        dirty: false,\r\n        renderedRenderOrder: null,\r\n        renderedResolution: NaN,\r\n        renderedRevision: -1,\r\n        renderedTileResolution: NaN,\r\n        renderedTileRevision: -1,\r\n        renderedTileZ: -1,\r\n      };\r\n    }\r\n    return this.replayState_[key];\r\n  }\r\n\r\n  /**\r\n   * Load the tile.\r\n   */\r\n  load() {\r\n    this.getSourceTiles();\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   */\r\n  release() {\r\n    for (const key in this.context_) {\r\n      const context = this.context_[key];\r\n      releaseCanvas(context);\r\n      canvasPool.push(context.canvas);\r\n      delete this.context_[key];\r\n    }\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default VectorRenderTile;\r\n", "/**\r\n * @module ol/source/VectorTile\r\n */\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport Tile from '../VectorTile.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileGrid from '../tilegrid/TileGrid.js';\r\nimport TileState from '../TileState.js';\r\nimport UrlTile from './UrlTile.js';\r\nimport VectorRenderTile from '../VectorRenderTile.js';\r\nimport {DEFAULT_MAX_ZOOM} from '../tilegrid/common.js';\r\nimport {\r\n  buffer as bufferExtent,\r\n  getIntersection,\r\n  intersects,\r\n} from '../extent.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport {fromKey, getCacheKeyForTileKey, getKeyZXY} from '../tilecoord.js';\r\nimport {isEmpty} from '../obj.js';\r\nimport {loadFeaturesXhr} from '../featureloader.js';\r\nimport {toSize} from '../size.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least twice the number of tiles in the viewport.\r\n * @property {import(\"../extent.js\").Extent} [extent] Extent.\r\n * @property {import(\"../format/Feature.js\").default} [format] Feature format for tiles. Used and required by the default.\r\n * @property {boolean} [overlaps=true] This source may have overlapping geometries. Setting this\r\n * to `false` (e.g. for sources with polygons that represent administrative\r\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\r\n * stroke operations.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Projection of the tile grid.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {typeof import(\"../VectorTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/VectorTile~VectorTile}.\r\n * @property {number} [maxZoom=22] Optional max zoom level. Not used if `tileGrid` is provided.\r\n * @property {number} [minZoom] Optional min zoom level. Not used if `tileGrid` is provided.\r\n * @property {number|import(\"../size.js\").Size} [tileSize=512] Optional tile size. Not used if `tileGrid` is provided.\r\n * @property {number} [maxResolution] Optional tile grid resolution at level zero. Not used if `tileGrid` is provided.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction]\r\n * Optional function to load a tile given a URL. Could look like this for pbf tiles:\r\n * ```js\r\n * function(tile, url) {\r\n *   tile.setLoader(function(extent, resolution, projection) {\r\n *     fetch(url).then(function(response) {\r\n *       response.arrayBuffer().then(function(data) {\r\n *         const format = tile.getFormat() // ol/format/MVT configured as source format\r\n *         const features = format.readFeatures(data, {\r\n *           extent: extent,\r\n *           featureProjection: projection\r\n *         });\r\n *         tile.setFeatures(features);\r\n *       });\r\n *     });\r\n *   });\r\n * }\r\n * ```\r\n * If you do not need extent, resolution and projection to get the features for a tile (e.g.\r\n * for GeoJSON tiles), your `tileLoadFunction` does not need a `setLoader()` call. Only make sure\r\n * to call `setFeatures()` on the tile:\r\n * ```js\r\n * const format = new GeoJSON({featureProjection: map.getView().getProjection()});\r\n * async function tileLoadFunction(tile, url) {\r\n *   const response = await fetch(url);\r\n *   const data = await response.json();\r\n *   tile.setFeatures(format.readFeatures(data));\r\n * }\r\n * ```\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {number} [transition] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {Array<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * When set to `false`, only one world\r\n * will be rendered. When set to `true`, tiles will be wrapped horizontally to\r\n * render multiple worlds.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=1]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class for layer sources providing vector data divided into a tile grid, to be\r\n * used with {@link module:ol/layer/VectorTile~VectorTileLayer}. Although this source receives tiles\r\n * with vector features from the server, it is not meant for feature editing.\r\n * Features are optimized for rendering, their geometries are clipped at or near\r\n * tile boundaries and simplified for a view resolution. See\r\n * {@link module:ol/source/Vector~VectorSource} for vector sources that are suitable for feature\r\n * editing.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */\r\nclass VectorTile extends UrlTile {\r\n  /**\r\n   * @param {!Options} options Vector tile options.\r\n   */\r\n  constructor(options) {\r\n    const projection = options.projection || 'EPSG:3857';\r\n\r\n    const extent = options.extent || extentFromProjection(projection);\r\n\r\n    const tileGrid =\r\n      options.tileGrid ||\r\n      createXYZ({\r\n        extent: extent,\r\n        maxResolution: options.maxResolution,\r\n        maxZoom: options.maxZoom !== undefined ? options.maxZoom : 22,\r\n        minZoom: options.minZoom,\r\n        tileSize: options.tileSize || 512,\r\n      });\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      cacheSize: options.cacheSize,\r\n      interpolate: true,\r\n      opaque: false,\r\n      projection: projection,\r\n      state: options.state,\r\n      tileGrid: tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction\r\n        ? options.tileLoadFunction\r\n        : defaultLoadFunction,\r\n      tileUrlFunction: options.tileUrlFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX === undefined ? true : options.wrapX,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection === undefined ? 1 : options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../format/Feature.js\").default|null}\r\n     */\r\n    this.format_ = options.format ? options.format : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {TileCache}\r\n     */\r\n    this.sourceTileCache = new TileCache(this.tileCache.highWaterMark);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.overlaps_ = options.overlaps == undefined ? true : options.overlaps;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {typeof import(\"../VectorTile.js\").default}\r\n     */\r\n    this.tileClass = options.tileClass ? options.tileClass : Tile;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */\r\n    this.tileGrids_ = {};\r\n  }\r\n\r\n  /**\r\n   * Get features whose bounding box intersects the provided extent. Only features for cached\r\n   * tiles for the last rendered zoom level are available in the source. So this method is only\r\n   * suitable for requesting tiles for extents that are currently rendered.\r\n   *\r\n   * Features are returned in random tile order and as they are included in the tiles. This means\r\n   * they can be clipped, duplicated across tiles, and simplified to the render resolution.\r\n   *\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @return {Array<import(\"../Feature.js\").FeatureLike>} Features.\r\n   * @api\r\n   */\r\n  getFeaturesInExtent(extent) {\r\n    const features = [];\r\n    const tileCache = this.tileCache;\r\n    if (tileCache.getCount() === 0) {\r\n      return features;\r\n    }\r\n    const z = fromKey(tileCache.peekFirstKey())[0];\r\n    const tileGrid = this.tileGrid;\r\n    tileCache.forEach(function (tile) {\r\n      if (tile.tileCoord[0] !== z || tile.getState() !== TileState.LOADED) {\r\n        return;\r\n      }\r\n      const sourceTiles = tile.getSourceTiles();\r\n      for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\r\n        const sourceTile = sourceTiles[i];\r\n        const tileCoord = sourceTile.tileCoord;\r\n        if (intersects(extent, tileGrid.getTileCoordExtent(tileCoord))) {\r\n          const tileFeatures = sourceTile.getFeatures();\r\n          if (tileFeatures) {\r\n            for (let j = 0, jj = tileFeatures.length; j < jj; ++j) {\r\n              const candidate = tileFeatures[j];\r\n              const geometry = candidate.getGeometry();\r\n              if (intersects(extent, geometry.getExtent())) {\r\n                features.push(candidate);\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The source can have overlapping geometries.\r\n   */\r\n  getOverlaps() {\r\n    return this.overlaps_;\r\n  }\r\n\r\n  /**\r\n   * clear {@link module:ol/TileCache~TileCache} and delete all source tiles\r\n   * @api\r\n   */\r\n  clear() {\r\n    this.tileCache.clear();\r\n    this.sourceTileCache.clear();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    const tileCache = this.getTileCacheForProjection(projection);\r\n    const usedSourceTiles = Object.keys(usedTiles).reduce((acc, key) => {\r\n      const cacheKey = getCacheKeyForTileKey(key);\r\n      const tile = tileCache.peek(cacheKey);\r\n      if (tile) {\r\n        const sourceTiles = tile.sourceTiles;\r\n        for (let i = 0, ii = sourceTiles.length; i < ii; ++i) {\r\n          acc[sourceTiles[i].getKey()] = true;\r\n        }\r\n      }\r\n      return acc;\r\n    }, {});\r\n    super.expireCache(projection, usedTiles);\r\n    this.sourceTileCache.expireCache(usedSourceTiles);\r\n  }\r\n\r\n  /**\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection\").default} projection Projection.\r\n   * @param {VectorRenderTile} tile Vector image tile.\r\n   * @return {Array<import(\"../VectorTile\").default>} Tile keys.\r\n   */\r\n  getSourceTiles(pixelRatio, projection, tile) {\r\n    if (tile.getState() === TileState.IDLE) {\r\n      tile.setState(TileState.LOADING);\r\n      const urlTileCoord = tile.wrappedTileCoord;\r\n      const tileGrid = this.getTileGridForProjection(projection);\r\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\r\n      const z = urlTileCoord[0];\r\n      const resolution = tileGrid.getResolution(z);\r\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\r\n      bufferExtent(extent, -resolution, extent);\r\n      const sourceTileGrid = this.tileGrid;\r\n      const sourceExtent = sourceTileGrid.getExtent();\r\n      if (sourceExtent) {\r\n        getIntersection(extent, sourceExtent, extent);\r\n      }\r\n      const sourceZ = sourceTileGrid.getZForResolution(\r\n        resolution,\r\n        this.zDirection\r\n      );\r\n\r\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\r\n        const tileUrl = this.tileUrlFunction(\r\n          sourceTileCoord,\r\n          pixelRatio,\r\n          projection\r\n        );\r\n        const sourceTile = this.sourceTileCache.containsKey(tileUrl)\r\n          ? this.sourceTileCache.get(tileUrl)\r\n          : new this.tileClass(\r\n              sourceTileCoord,\r\n              tileUrl ? TileState.IDLE : TileState.EMPTY,\r\n              tileUrl,\r\n              this.format_,\r\n              this.tileLoadFunction\r\n            );\r\n        tile.sourceTiles.push(sourceTile);\r\n        const sourceTileState = sourceTile.getState();\r\n        if (sourceTileState < TileState.LOADED) {\r\n          const listenChange = (event) => {\r\n            this.handleTileChange(event);\r\n            const state = sourceTile.getState();\r\n            if (state === TileState.LOADED || state === TileState.ERROR) {\r\n              const sourceTileKey = sourceTile.getKey();\r\n              if (sourceTileKey in tile.errorTileKeys) {\r\n                if (sourceTile.getState() === TileState.LOADED) {\r\n                  delete tile.errorTileKeys[sourceTileKey];\r\n                }\r\n              } else {\r\n                tile.loadingSourceTiles--;\r\n              }\r\n              if (state === TileState.ERROR) {\r\n                tile.errorTileKeys[sourceTileKey] = true;\r\n              } else {\r\n                sourceTile.removeEventListener(EventType.CHANGE, listenChange);\r\n              }\r\n              if (tile.loadingSourceTiles === 0) {\r\n                tile.setState(\r\n                  isEmpty(tile.errorTileKeys)\r\n                    ? TileState.LOADED\r\n                    : TileState.ERROR\r\n                );\r\n              }\r\n            }\r\n          };\r\n          sourceTile.addEventListener(EventType.CHANGE, listenChange);\r\n          tile.loadingSourceTiles++;\r\n        }\r\n        if (sourceTileState === TileState.IDLE) {\r\n          sourceTile.extent =\r\n            sourceTileGrid.getTileCoordExtent(sourceTileCoord);\r\n          sourceTile.projection = projection;\r\n          sourceTile.resolution = sourceTileGrid.getResolution(\r\n            sourceTileCoord[0]\r\n          );\r\n          this.sourceTileCache.set(tileUrl, sourceTile);\r\n          sourceTile.load();\r\n        }\r\n      });\r\n      if (!tile.loadingSourceTiles) {\r\n        tile.setState(\r\n          tile.sourceTiles.some(\r\n            (sourceTile) => sourceTile.getState() === TileState.ERROR\r\n          )\r\n            ? TileState.ERROR\r\n            : TileState.LOADED\r\n        );\r\n      }\r\n    }\r\n\r\n    return tile.sourceTiles;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!VectorRenderTile} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const coordKey = getKeyZXY(z, x, y);\r\n    const key = this.getKey();\r\n    let tile;\r\n    if (this.tileCache.containsKey(coordKey)) {\r\n      tile = this.tileCache.get(coordKey);\r\n      if (tile.key === key) {\r\n        return tile;\r\n      }\r\n    }\r\n    const tileCoord = [z, x, y];\r\n    let urlTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection\r\n    );\r\n    const sourceExtent = this.getTileGrid().getExtent();\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    if (urlTileCoord && sourceExtent) {\r\n      const tileExtent = tileGrid.getTileCoordExtent(urlTileCoord);\r\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\r\n      bufferExtent(tileExtent, -tileGrid.getResolution(z), tileExtent);\r\n      if (!intersects(sourceExtent, tileExtent)) {\r\n        urlTileCoord = null;\r\n      }\r\n    }\r\n    let empty = true;\r\n    if (urlTileCoord !== null) {\r\n      const sourceTileGrid = this.tileGrid;\r\n      const resolution = tileGrid.getResolution(z);\r\n      const sourceZ = sourceTileGrid.getZForResolution(resolution, 1);\r\n      // make extent 1 pixel smaller so we don't load tiles for < 0.5 pixel render space\r\n      const extent = tileGrid.getTileCoordExtent(urlTileCoord);\r\n      bufferExtent(extent, -resolution, extent);\r\n      sourceTileGrid.forEachTileCoord(extent, sourceZ, (sourceTileCoord) => {\r\n        empty =\r\n          empty &&\r\n          !this.tileUrlFunction(sourceTileCoord, pixelRatio, projection);\r\n      });\r\n    }\r\n    const newTile = new VectorRenderTile(\r\n      tileCoord,\r\n      empty ? TileState.EMPTY : TileState.IDLE,\r\n      urlTileCoord,\r\n      this.getSourceTiles.bind(this, pixelRatio, projection)\r\n    );\r\n\r\n    newTile.key = key;\r\n    if (tile) {\r\n      newTile.interimTile = tile;\r\n      newTile.refreshInterimChain();\r\n      this.tileCache.replace(coordKey, newTile);\r\n    } else {\r\n      this.tileCache.set(coordKey, newTile);\r\n    }\r\n    return newTile;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    const code = projection.getCode();\r\n    let tileGrid = this.tileGrids_[code];\r\n    if (!tileGrid) {\r\n      // A tile grid that matches the tile size of the source tile grid is more\r\n      // likely to have 1:1 relationships between source tiles and rendered tiles.\r\n      const sourceTileGrid = this.tileGrid;\r\n      const resolutions = sourceTileGrid.getResolutions().slice();\r\n      const origins = resolutions.map(function (resolution, z) {\r\n        return sourceTileGrid.getOrigin(z);\r\n      });\r\n      const tileSizes = resolutions.map(function (resolution, z) {\r\n        return sourceTileGrid.getTileSize(z);\r\n      });\r\n      const length = DEFAULT_MAX_ZOOM + 1;\r\n      for (let z = resolutions.length; z < length; ++z) {\r\n        resolutions.push(resolutions[z - 1] / 2);\r\n        origins.push(origins[z - 1]);\r\n        tileSizes.push(tileSizes[z - 1]);\r\n      }\r\n      tileGrid = new TileGrid({\r\n        extent: sourceTileGrid.getExtent(),\r\n        origins: origins,\r\n        resolutions: resolutions,\r\n        tileSizes: tileSizes,\r\n      });\r\n      this.tileGrids_[code] = tileGrid;\r\n    }\r\n    return tileGrid;\r\n  }\r\n\r\n  /**\r\n   * Get the tile pixel ratio for this source.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @return {number} Tile pixel ratio.\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return pixelRatio;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Z.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../size.js\").Size} Tile size.\r\n   */\r\n  getTilePixelSize(z, pixelRatio, projection) {\r\n    const tileGrid = this.getTileGridForProjection(projection);\r\n    const tileSize = toSize(tileGrid.getTileSize(z), this.tmpSize);\r\n    return [\r\n      Math.round(tileSize[0] * pixelRatio),\r\n      Math.round(tileSize[1] * pixelRatio),\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Increases the cache size if needed\r\n   * @param {number} tileCount Minimum number of tiles needed.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   */\r\n  updateCacheSize(tileCount, projection) {\r\n    super.updateCacheSize(tileCount * 2, projection);\r\n    this.sourceTileCache.highWaterMark =\r\n      this.getTileCacheForProjection(projection).highWaterMark;\r\n  }\r\n}\r\n\r\nexport default VectorTile;\r\n\r\n/**\r\n * Sets the loader for a tile.\r\n * @param {import(\"../VectorTile.js\").default} tile Vector tile.\r\n * @param {string} url URL.\r\n */\r\nexport function defaultLoadFunction(tile, url) {\r\n  tile.setLoader(\r\n    /**\r\n     * @param {import(\"../extent.js\").Extent} extent Extent.\r\n     * @param {number} resolution Resolution.\r\n     * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n     */\r\n    function (extent, resolution, projection) {\r\n      loadFeaturesXhr(\r\n        url,\r\n        tile.getFormat(),\r\n        extent,\r\n        resolution,\r\n        projection,\r\n        tile.onLoad.bind(tile),\r\n        tile.onError.bind(tile)\r\n      );\r\n    }\r\n  );\r\n}\r\n", "/**\r\n * @module ol/reproj/common\r\n */\r\n\r\n/**\r\n * Default maximum allowed threshold  (in pixels) for reprojection\r\n * triangulation.\r\n * @type {number}\r\n */\r\nexport const ERROR_THRESHOLD = 0.5;\r\n", "/**\r\n * @module ol/reproj/Triangulation\r\n */\r\nimport {\r\n  boundingExtent,\r\n  createEmpty,\r\n  extendCoordinate,\r\n  getArea,\r\n  getBottomLeft,\r\n  getBottomRight,\r\n  getTopLeft,\r\n  getTopRight,\r\n  getWidth,\r\n  intersects,\r\n} from '../extent.js';\r\nimport {getTransform} from '../proj.js';\r\nimport {modulo} from '../math.js';\r\n\r\n/**\r\n * Single triangle; consists of 3 source points and 3 target points.\r\n * @typedef {Object} Triangle\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} source Source.\r\n * @property {Array<import(\"../coordinate.js\").Coordinate>} target Target.\r\n */\r\n\r\n/**\r\n * Maximum number of subdivision steps during raster reprojection triangulation.\r\n * Prevents high memory usage and large number of proj4 calls (for certain\r\n * transformations and areas). At most `2*(2^this)` triangles are created for\r\n * each triangulated extent (tile/image).\r\n * @type {number}\r\n */\r\nconst MAX_SUBDIVISION = 10;\r\n\r\n/**\r\n * Maximum allowed size of triangle relative to world width. When transforming\r\n * corners of world extent between certain projections, the resulting\r\n * triangulation seems to have zero error and no subdivision is performed. If\r\n * the triangle width is more than this (relative to world width; 0-1),\r\n * subdivison is forced (up to `MAX_SUBDIVISION`). Default is `0.25`.\r\n * @type {number}\r\n */\r\nconst MAX_TRIANGLE_WIDTH = 0.25;\r\n\r\n/**\r\n * @classdesc\r\n * Class containing triangulation of the given target extent.\r\n * Used for determining source data and the reprojection itself.\r\n */\r\nclass Triangulation {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent to triangulate.\r\n   * @param {import(\"../extent.js\").Extent} maxSourceExtent Maximal source extent that can be used.\r\n   * @param {number} errorThreshold Acceptable error (in source units).\r\n   * @param {?number} destinationResolution The (optional) resolution of the destination.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    targetProj,\r\n    targetExtent,\r\n    maxSourceExtent,\r\n    errorThreshold,\r\n    destinationResolution\r\n  ) {\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.sourceProj_ = sourceProj;\r\n\r\n    /**\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     * @private\r\n     */\r\n    this.targetProj_ = targetProj;\r\n\r\n    /** @type {!Object<string, import(\"../coordinate.js\").Coordinate>} */\r\n    let transformInvCache = {};\r\n    const transformInv = getTransform(this.targetProj_, this.sourceProj_);\r\n\r\n    /**\r\n     * @param {import(\"../coordinate.js\").Coordinate} c A coordinate.\r\n     * @return {import(\"../coordinate.js\").Coordinate} Transformed coordinate.\r\n     * @private\r\n     */\r\n    this.transformInv_ = function (c) {\r\n      const key = c[0] + '/' + c[1];\r\n      if (!transformInvCache[key]) {\r\n        transformInvCache[key] = transformInv(c);\r\n      }\r\n      return transformInvCache[key];\r\n    };\r\n\r\n    /**\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @private\r\n     */\r\n    this.maxSourceExtent_ = maxSourceExtent;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.errorThresholdSquared_ = errorThreshold * errorThreshold;\r\n\r\n    /**\r\n     * @type {Array<Triangle>}\r\n     * @private\r\n     */\r\n    this.triangles_ = [];\r\n\r\n    /**\r\n     * Indicates that the triangulation crosses edge of the source projection.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.wrapsXInSource_ = false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.canWrapXInSource_ =\r\n      this.sourceProj_.canWrapX() &&\r\n      !!maxSourceExtent &&\r\n      !!this.sourceProj_.getExtent() &&\r\n      getWidth(maxSourceExtent) >= getWidth(this.sourceProj_.getExtent());\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.sourceWorldWidth_ = this.sourceProj_.getExtent()\r\n      ? getWidth(this.sourceProj_.getExtent())\r\n      : null;\r\n\r\n    /**\r\n     * @type {?number}\r\n     * @private\r\n     */\r\n    this.targetWorldWidth_ = this.targetProj_.getExtent()\r\n      ? getWidth(this.targetProj_.getExtent())\r\n      : null;\r\n\r\n    const destinationTopLeft = getTopLeft(targetExtent);\r\n    const destinationTopRight = getTopRight(targetExtent);\r\n    const destinationBottomRight = getBottomRight(targetExtent);\r\n    const destinationBottomLeft = getBottomLeft(targetExtent);\r\n    const sourceTopLeft = this.transformInv_(destinationTopLeft);\r\n    const sourceTopRight = this.transformInv_(destinationTopRight);\r\n    const sourceBottomRight = this.transformInv_(destinationBottomRight);\r\n    const sourceBottomLeft = this.transformInv_(destinationBottomLeft);\r\n\r\n    /*\r\n     * The maxSubdivision controls how many splittings of the target area can\r\n     * be done. The idea here is to do a linear mapping of the target areas\r\n     * but the actual overall reprojection (can be) extremely non-linear. The\r\n     * default value of MAX_SUBDIVISION was chosen based on mapping a 256x256\r\n     * tile size. However this function is also called to remap canvas rendered\r\n     * layers which can be much larger. This calculation increases the maxSubdivision\r\n     * value by the right factor so that each 256x256 pixel area has\r\n     * MAX_SUBDIVISION divisions.\r\n     */\r\n    const maxSubdivision =\r\n      MAX_SUBDIVISION +\r\n      (destinationResolution\r\n        ? Math.max(\r\n            0,\r\n            Math.ceil(\r\n              Math.log2(\r\n                getArea(targetExtent) /\r\n                  (destinationResolution * destinationResolution * 256 * 256)\r\n              )\r\n            )\r\n          )\r\n        : 0);\r\n\r\n    this.addQuad_(\r\n      destinationTopLeft,\r\n      destinationTopRight,\r\n      destinationBottomRight,\r\n      destinationBottomLeft,\r\n      sourceTopLeft,\r\n      sourceTopRight,\r\n      sourceBottomRight,\r\n      sourceBottomLeft,\r\n      maxSubdivision\r\n    );\r\n\r\n    if (this.wrapsXInSource_) {\r\n      let leftBound = Infinity;\r\n      this.triangles_.forEach(function (triangle, i, arr) {\r\n        leftBound = Math.min(\r\n          leftBound,\r\n          triangle.source[0][0],\r\n          triangle.source[1][0],\r\n          triangle.source[2][0]\r\n        );\r\n      });\r\n\r\n      // Shift triangles to be as close to `leftBound` as possible\r\n      // (if the distance is more than `worldWidth / 2` it can be closer.\r\n      this.triangles_.forEach((triangle) => {\r\n        if (\r\n          Math.max(\r\n            triangle.source[0][0],\r\n            triangle.source[1][0],\r\n            triangle.source[2][0]\r\n          ) -\r\n            leftBound >\r\n          this.sourceWorldWidth_ / 2\r\n        ) {\r\n          const newTriangle = [\r\n            [triangle.source[0][0], triangle.source[0][1]],\r\n            [triangle.source[1][0], triangle.source[1][1]],\r\n            [triangle.source[2][0], triangle.source[2][1]],\r\n          ];\r\n          if (newTriangle[0][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[0][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[1][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[1][0] -= this.sourceWorldWidth_;\r\n          }\r\n          if (newTriangle[2][0] - leftBound > this.sourceWorldWidth_ / 2) {\r\n            newTriangle[2][0] -= this.sourceWorldWidth_;\r\n          }\r\n\r\n          // Rarely (if the extent contains both the dateline and prime meridian)\r\n          // the shift can in turn break some triangles.\r\n          // Detect this here and don't shift in such cases.\r\n          const minX = Math.min(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0]\r\n          );\r\n          const maxX = Math.max(\r\n            newTriangle[0][0],\r\n            newTriangle[1][0],\r\n            newTriangle[2][0]\r\n          );\r\n          if (maxX - minX < this.sourceWorldWidth_ / 2) {\r\n            triangle.source = newTriangle;\r\n          }\r\n        }\r\n      });\r\n    }\r\n\r\n    transformInvCache = {};\r\n  }\r\n\r\n  /**\r\n   * Adds triangle to the triangulation.\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @private\r\n   */\r\n  addTriangle_(a, b, c, aSrc, bSrc, cSrc) {\r\n    this.triangles_.push({\r\n      source: [aSrc, bSrc, cSrc],\r\n      target: [a, b, c],\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Adds quad (points in clock-wise order) to the triangulation\r\n   * (and reprojects the vertices) if valid.\r\n   * Performs quad subdivision if needed to increase precision.\r\n   *\r\n   * @param {import(\"../coordinate.js\").Coordinate} a The target a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} b The target b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} c The target c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} d The target d coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} aSrc The source a coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} bSrc The source b coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} cSrc The source c coordinate.\r\n   * @param {import(\"../coordinate.js\").Coordinate} dSrc The source d coordinate.\r\n   * @param {number} maxSubdivision Maximal allowed subdivision of the quad.\r\n   * @private\r\n   */\r\n  addQuad_(a, b, c, d, aSrc, bSrc, cSrc, dSrc, maxSubdivision) {\r\n    const sourceQuadExtent = boundingExtent([aSrc, bSrc, cSrc, dSrc]);\r\n    const sourceCoverageX = this.sourceWorldWidth_\r\n      ? getWidth(sourceQuadExtent) / this.sourceWorldWidth_\r\n      : null;\r\n    const sourceWorldWidth = /** @type {number} */ (this.sourceWorldWidth_);\r\n\r\n    // when the quad is wrapped in the source projection\r\n    // it covers most of the projection extent, but not fully\r\n    const wrapsX =\r\n      this.sourceProj_.canWrapX() &&\r\n      sourceCoverageX > 0.5 &&\r\n      sourceCoverageX < 1;\r\n\r\n    let needsSubdivision = false;\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (this.targetProj_.isGlobal() && this.targetWorldWidth_) {\r\n        const targetQuadExtent = boundingExtent([a, b, c, d]);\r\n        const targetCoverageX =\r\n          getWidth(targetQuadExtent) / this.targetWorldWidth_;\r\n        needsSubdivision =\r\n          targetCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n      if (!wrapsX && this.sourceProj_.isGlobal() && sourceCoverageX) {\r\n        needsSubdivision =\r\n          sourceCoverageX > MAX_TRIANGLE_WIDTH || needsSubdivision;\r\n      }\r\n    }\r\n\r\n    if (!needsSubdivision && this.maxSourceExtent_) {\r\n      if (\r\n        isFinite(sourceQuadExtent[0]) &&\r\n        isFinite(sourceQuadExtent[1]) &&\r\n        isFinite(sourceQuadExtent[2]) &&\r\n        isFinite(sourceQuadExtent[3])\r\n      ) {\r\n        if (!intersects(sourceQuadExtent, this.maxSourceExtent_)) {\r\n          // whole quad outside source projection extent -> ignore\r\n          return;\r\n        }\r\n      }\r\n    }\r\n\r\n    let isNotFinite = 0;\r\n\r\n    if (!needsSubdivision) {\r\n      if (\r\n        !isFinite(aSrc[0]) ||\r\n        !isFinite(aSrc[1]) ||\r\n        !isFinite(bSrc[0]) ||\r\n        !isFinite(bSrc[1]) ||\r\n        !isFinite(cSrc[0]) ||\r\n        !isFinite(cSrc[1]) ||\r\n        !isFinite(dSrc[0]) ||\r\n        !isFinite(dSrc[1])\r\n      ) {\r\n        if (maxSubdivision > 0) {\r\n          needsSubdivision = true;\r\n        } else {\r\n          // It might be the case that only 1 of the points is infinite. In this case\r\n          // we can draw a single triangle with the other three points\r\n          isNotFinite =\r\n            (!isFinite(aSrc[0]) || !isFinite(aSrc[1]) ? 8 : 0) +\r\n            (!isFinite(bSrc[0]) || !isFinite(bSrc[1]) ? 4 : 0) +\r\n            (!isFinite(cSrc[0]) || !isFinite(cSrc[1]) ? 2 : 0) +\r\n            (!isFinite(dSrc[0]) || !isFinite(dSrc[1]) ? 1 : 0);\r\n          if (\r\n            isNotFinite != 1 &&\r\n            isNotFinite != 2 &&\r\n            isNotFinite != 4 &&\r\n            isNotFinite != 8\r\n          ) {\r\n            return;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxSubdivision > 0) {\r\n      if (!needsSubdivision) {\r\n        const center = [(a[0] + c[0]) / 2, (a[1] + c[1]) / 2];\r\n        const centerSrc = this.transformInv_(center);\r\n\r\n        let dx;\r\n        if (wrapsX) {\r\n          const centerSrcEstimX =\r\n            (modulo(aSrc[0], sourceWorldWidth) +\r\n              modulo(cSrc[0], sourceWorldWidth)) /\r\n            2;\r\n          dx = centerSrcEstimX - modulo(centerSrc[0], sourceWorldWidth);\r\n        } else {\r\n          dx = (aSrc[0] + cSrc[0]) / 2 - centerSrc[0];\r\n        }\r\n        const dy = (aSrc[1] + cSrc[1]) / 2 - centerSrc[1];\r\n        const centerSrcErrorSquared = dx * dx + dy * dy;\r\n        needsSubdivision = centerSrcErrorSquared > this.errorThresholdSquared_;\r\n      }\r\n      if (needsSubdivision) {\r\n        if (Math.abs(a[0] - c[0]) <= Math.abs(a[1] - c[1])) {\r\n          // split horizontally (top & bottom)\r\n          const bc = [(b[0] + c[0]) / 2, (b[1] + c[1]) / 2];\r\n          const bcSrc = this.transformInv_(bc);\r\n          const da = [(d[0] + a[0]) / 2, (d[1] + a[1]) / 2];\r\n          const daSrc = this.transformInv_(da);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            b,\r\n            bc,\r\n            da,\r\n            aSrc,\r\n            bSrc,\r\n            bcSrc,\r\n            daSrc,\r\n            maxSubdivision - 1\r\n          );\r\n          this.addQuad_(\r\n            da,\r\n            bc,\r\n            c,\r\n            d,\r\n            daSrc,\r\n            bcSrc,\r\n            cSrc,\r\n            dSrc,\r\n            maxSubdivision - 1\r\n          );\r\n        } else {\r\n          // split vertically (left & right)\r\n          const ab = [(a[0] + b[0]) / 2, (a[1] + b[1]) / 2];\r\n          const abSrc = this.transformInv_(ab);\r\n          const cd = [(c[0] + d[0]) / 2, (c[1] + d[1]) / 2];\r\n          const cdSrc = this.transformInv_(cd);\r\n\r\n          this.addQuad_(\r\n            a,\r\n            ab,\r\n            cd,\r\n            d,\r\n            aSrc,\r\n            abSrc,\r\n            cdSrc,\r\n            dSrc,\r\n            maxSubdivision - 1\r\n          );\r\n          this.addQuad_(\r\n            ab,\r\n            b,\r\n            c,\r\n            cd,\r\n            abSrc,\r\n            bSrc,\r\n            cSrc,\r\n            cdSrc,\r\n            maxSubdivision - 1\r\n          );\r\n        }\r\n        return;\r\n      }\r\n    }\r\n\r\n    if (wrapsX) {\r\n      if (!this.canWrapXInSource_) {\r\n        return;\r\n      }\r\n      this.wrapsXInSource_ = true;\r\n    }\r\n\r\n    // Exactly zero or one of *Src is not finite\r\n    // The triangles must have the diagonal line as the first side\r\n    // This is to allow easy code in reproj.s to make it straight for broken\r\n    // browsers that can't handle diagonal clipping\r\n    if ((isNotFinite & 0xb) == 0) {\r\n      this.addTriangle_(a, c, d, aSrc, cSrc, dSrc);\r\n    }\r\n    if ((isNotFinite & 0xe) == 0) {\r\n      this.addTriangle_(a, c, b, aSrc, cSrc, bSrc);\r\n    }\r\n    if (isNotFinite) {\r\n      // Try the other two triangles\r\n      if ((isNotFinite & 0xd) == 0) {\r\n        this.addTriangle_(b, d, a, bSrc, dSrc, aSrc);\r\n      }\r\n      if ((isNotFinite & 0x7) == 0) {\r\n        this.addTriangle_(b, d, c, bSrc, dSrc, cSrc);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculates extent of the `source` coordinates from all the triangles.\r\n   *\r\n   * @return {import(\"../extent.js\").Extent} Calculated extent.\r\n   */\r\n  calculateSourceExtent() {\r\n    const extent = createEmpty();\r\n\r\n    this.triangles_.forEach(function (triangle, i, arr) {\r\n      const src = triangle.source;\r\n      extendCoordinate(extent, src[0]);\r\n      extendCoordinate(extent, src[1]);\r\n      extendCoordinate(extent, src[2]);\r\n    });\r\n\r\n    return extent;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<Triangle>} Array of the calculated triangles.\r\n   */\r\n  getTriangles() {\r\n    return this.triangles_;\r\n  }\r\n}\r\n\r\nexport default Triangulation;\r\n", "/**\r\n * @module ol/reproj\r\n */\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  extend,\r\n  forEachCorner,\r\n  getCenter,\r\n  getHeight,\r\n  getTopLeft,\r\n  getWidth,\r\n} from './extent.js';\r\nimport {createCanvasContext2D, releaseCanvas} from './dom.js';\r\nimport {getPointResolution, transform} from './proj.js';\r\nimport {solveLinearSystem} from './math.js';\r\n\r\nlet brokenDiagonalRendering_;\r\n\r\n/**\r\n * @type {Array<HTMLCanvasElement>}\r\n */\r\nexport const canvasPool = [];\r\n\r\n/**\r\n * This draws a small triangle into a canvas by setting the triangle as the clip region\r\n * and then drawing a (too large) rectangle\r\n *\r\n * @param {CanvasRenderingContext2D} ctx The context in which to draw the triangle\r\n * @param {number} u1 The x-coordinate of the second point. The first point is 0,0.\r\n * @param {number} v1 The y-coordinate of the second point.\r\n * @param {number} u2 The x-coordinate of the third point.\r\n * @param {number} v2 The y-coordinate of the third point.\r\n */\r\nfunction drawTestTriangle(ctx, u1, v1, u2, v2) {\r\n  ctx.beginPath();\r\n  ctx.moveTo(0, 0);\r\n  ctx.lineTo(u1, v1);\r\n  ctx.lineTo(u2, v2);\r\n  ctx.closePath();\r\n  ctx.save();\r\n  ctx.clip();\r\n  ctx.fillRect(0, 0, Math.max(u1, u2) + 1, Math.max(v1, v2));\r\n  ctx.restore();\r\n}\r\n\r\n/**\r\n * Given the data from getImageData, see if the right values appear at the provided offset.\r\n * Returns true if either the color or transparency is off\r\n *\r\n * @param {Uint8ClampedArray} data The data returned from getImageData\r\n * @param {number} offset The pixel offset from the start of data.\r\n * @return {boolean} true if the diagonal rendering is broken\r\n */\r\nfunction verifyBrokenDiagonalRendering(data, offset) {\r\n  // the values ought to be close to the rgba(210, 0, 0, 0.75)\r\n  return (\r\n    Math.abs(data[offset * 4] - 210) > 2 ||\r\n    Math.abs(data[offset * 4 + 3] - 0.75 * 255) > 2\r\n  );\r\n}\r\n\r\n/**\r\n * Determines if the current browser configuration can render triangular clip regions correctly.\r\n * This value is cached so the function is only expensive the first time called.\r\n * Firefox on Windows (as of now) does not if HWA is enabled. See https://bugzilla.mozilla.org/show_bug.cgi?id=1606976\r\n * Chrome works, and everything seems to work on OSX and Android. This function caches the\r\n * result. I suppose that it is conceivably possible that a browser might flip modes while the app is\r\n * running, but lets hope not.\r\n *\r\n * @return {boolean} true if the Diagonal Rendering is broken.\r\n */\r\nfunction isBrokenDiagonalRendering() {\r\n  if (brokenDiagonalRendering_ === undefined) {\r\n    const ctx = createCanvasContext2D(6, 6, canvasPool);\r\n    ctx.globalCompositeOperation = 'lighter';\r\n    ctx.fillStyle = 'rgba(210, 0, 0, 0.75)';\r\n    drawTestTriangle(ctx, 4, 5, 4, 0);\r\n    drawTestTriangle(ctx, 4, 5, 0, 5);\r\n    const data = ctx.getImageData(0, 0, 3, 3).data;\r\n    brokenDiagonalRendering_ =\r\n      verifyBrokenDiagonalRendering(data, 0) ||\r\n      verifyBrokenDiagonalRendering(data, 4) ||\r\n      verifyBrokenDiagonalRendering(data, 8);\r\n    releaseCanvas(ctx);\r\n    canvasPool.push(ctx.canvas);\r\n  }\r\n\r\n  return brokenDiagonalRendering_;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./coordinate.js\").Coordinate} targetCenter Target center.\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetCenter,\r\n  targetResolution\r\n) {\r\n  const sourceCenter = transform(targetCenter, targetProj, sourceProj);\r\n\r\n  // calculate the ideal resolution of the source data\r\n  let sourceResolution = getPointResolution(\r\n    targetProj,\r\n    targetResolution,\r\n    targetCenter\r\n  );\r\n\r\n  const targetMetersPerUnit = targetProj.getMetersPerUnit();\r\n  if (targetMetersPerUnit !== undefined) {\r\n    sourceResolution *= targetMetersPerUnit;\r\n  }\r\n  const sourceMetersPerUnit = sourceProj.getMetersPerUnit();\r\n  if (sourceMetersPerUnit !== undefined) {\r\n    sourceResolution /= sourceMetersPerUnit;\r\n  }\r\n\r\n  // Based on the projection properties, the point resolution at the specified\r\n  // coordinates may be slightly different. We need to reverse-compensate this\r\n  // in order to achieve optimal results.\r\n\r\n  const sourceExtent = sourceProj.getExtent();\r\n  if (!sourceExtent || containsCoordinate(sourceExtent, sourceCenter)) {\r\n    const compensationFactor =\r\n      getPointResolution(sourceProj, sourceResolution, sourceCenter) /\r\n      sourceResolution;\r\n    if (isFinite(compensationFactor) && compensationFactor > 0) {\r\n      sourceResolution /= compensationFactor;\r\n    }\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * Calculates ideal resolution to use from the source in order to achieve\r\n * pixel mapping as close as possible to 1:1 during reprojection.\r\n * The resolution is calculated regardless of what resolutions\r\n * are actually available in the dataset (TileGrid, Image, ...).\r\n *\r\n * @param {import(\"./proj/Projection.js\").default} sourceProj Source projection.\r\n * @param {import(\"./proj/Projection.js\").default} targetProj Target projection.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent\r\n * @param {number} targetResolution Target resolution.\r\n * @return {number} The best resolution to use. Can be +-Infinity, NaN or 0.\r\n */\r\nexport function calculateSourceExtentResolution(\r\n  sourceProj,\r\n  targetProj,\r\n  targetExtent,\r\n  targetResolution\r\n) {\r\n  const targetCenter = getCenter(targetExtent);\r\n  let sourceResolution = calculateSourceResolution(\r\n    sourceProj,\r\n    targetProj,\r\n    targetCenter,\r\n    targetResolution\r\n  );\r\n\r\n  if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n    forEachCorner(targetExtent, function (corner) {\r\n      sourceResolution = calculateSourceResolution(\r\n        sourceProj,\r\n        targetProj,\r\n        corner,\r\n        targetResolution\r\n      );\r\n      return isFinite(sourceResolution) && sourceResolution > 0;\r\n    });\r\n  }\r\n\r\n  return sourceResolution;\r\n}\r\n\r\n/**\r\n * @typedef {Object} ImageExtent\r\n * @property {import(\"./extent.js\").Extent} extent Extent.\r\n * @property {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\r\n */\r\n\r\n/**\r\n * Renders the source data into new canvas based on the triangulation.\r\n *\r\n * @param {number} width Width of the canvas.\r\n * @param {number} height Height of the canvas.\r\n * @param {number} pixelRatio Pixel ratio.\r\n * @param {number} sourceResolution Source resolution.\r\n * @param {import(\"./extent.js\").Extent} sourceExtent Extent of the data source.\r\n * @param {number} targetResolution Target resolution.\r\n * @param {import(\"./extent.js\").Extent} targetExtent Target extent.\r\n * @param {import(\"./reproj/Triangulation.js\").default} triangulation Calculated triangulation.\r\n * @param {Array<ImageExtent>} sources Array of sources.\r\n * @param {number} gutter Gutter of the sources.\r\n * @param {boolean} [renderEdges] Render reprojection edges.\r\n * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n * @return {HTMLCanvasElement} Canvas with reprojected data.\r\n */\r\nexport function render(\r\n  width,\r\n  height,\r\n  pixelRatio,\r\n  sourceResolution,\r\n  sourceExtent,\r\n  targetResolution,\r\n  targetExtent,\r\n  triangulation,\r\n  sources,\r\n  gutter,\r\n  renderEdges,\r\n  interpolate\r\n) {\r\n  const context = createCanvasContext2D(\r\n    Math.round(pixelRatio * width),\r\n    Math.round(pixelRatio * height),\r\n    canvasPool\r\n  );\r\n\r\n  if (!interpolate) {\r\n    context.imageSmoothingEnabled = false;\r\n  }\r\n\r\n  if (sources.length === 0) {\r\n    return context.canvas;\r\n  }\r\n\r\n  context.scale(pixelRatio, pixelRatio);\r\n\r\n  function pixelRound(value) {\r\n    return Math.round(value * pixelRatio) / pixelRatio;\r\n  }\r\n\r\n  context.globalCompositeOperation = 'lighter';\r\n\r\n  const sourceDataExtent = createEmpty();\r\n  sources.forEach(function (src, i, arr) {\r\n    extend(sourceDataExtent, src.extent);\r\n  });\r\n\r\n  const canvasWidthInUnits = getWidth(sourceDataExtent);\r\n  const canvasHeightInUnits = getHeight(sourceDataExtent);\r\n  const stitchContext = createCanvasContext2D(\r\n    Math.round((pixelRatio * canvasWidthInUnits) / sourceResolution),\r\n    Math.round((pixelRatio * canvasHeightInUnits) / sourceResolution),\r\n    canvasPool\r\n  );\r\n\r\n  if (!interpolate) {\r\n    stitchContext.imageSmoothingEnabled = false;\r\n  }\r\n\r\n  const stitchScale = pixelRatio / sourceResolution;\r\n\r\n  sources.forEach(function (src, i, arr) {\r\n    const xPos = src.extent[0] - sourceDataExtent[0];\r\n    const yPos = -(src.extent[3] - sourceDataExtent[3]);\r\n    const srcWidth = getWidth(src.extent);\r\n    const srcHeight = getHeight(src.extent);\r\n\r\n    // This test should never fail -- but it does. Need to find a fix the upstream condition\r\n    if (src.image.width > 0 && src.image.height > 0) {\r\n      stitchContext.drawImage(\r\n        src.image,\r\n        gutter,\r\n        gutter,\r\n        src.image.width - 2 * gutter,\r\n        src.image.height - 2 * gutter,\r\n        xPos * stitchScale,\r\n        yPos * stitchScale,\r\n        srcWidth * stitchScale,\r\n        srcHeight * stitchScale\r\n      );\r\n    }\r\n  });\r\n\r\n  const targetTopLeft = getTopLeft(targetExtent);\r\n\r\n  triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n    /* Calculate affine transform (src -> dst)\r\n     * Resulting matrix can be used to transform coordinate\r\n     * from `sourceProjection` to destination pixels.\r\n     *\r\n     * To optimize number of context calls and increase numerical stability,\r\n     * we also do the following operations:\r\n     * trans(-topLeftExtentCorner), scale(1 / targetResolution), scale(1, -1)\r\n     * here before solving the linear system so [ui, vi] are pixel coordinates.\r\n     *\r\n     * Src points: xi, yi\r\n     * Dst points: ui, vi\r\n     * Affine coefficients: aij\r\n     *\r\n     * | x0 y0 1  0  0 0 |   |a00|   |u0|\r\n     * | x1 y1 1  0  0 0 |   |a01|   |u1|\r\n     * | x2 y2 1  0  0 0 | x |a02| = |u2|\r\n     * |  0  0 0 x0 y0 1 |   |a10|   |v0|\r\n     * |  0  0 0 x1 y1 1 |   |a11|   |v1|\r\n     * |  0  0 0 x2 y2 1 |   |a12|   |v2|\r\n     */\r\n    const source = triangle.source;\r\n    const target = triangle.target;\r\n    let x0 = source[0][0],\r\n      y0 = source[0][1];\r\n    let x1 = source[1][0],\r\n      y1 = source[1][1];\r\n    let x2 = source[2][0],\r\n      y2 = source[2][1];\r\n    // Make sure that everything is on pixel boundaries\r\n    const u0 = pixelRound((target[0][0] - targetTopLeft[0]) / targetResolution);\r\n    const v0 = pixelRound(\r\n      -(target[0][1] - targetTopLeft[1]) / targetResolution\r\n    );\r\n    const u1 = pixelRound((target[1][0] - targetTopLeft[0]) / targetResolution);\r\n    const v1 = pixelRound(\r\n      -(target[1][1] - targetTopLeft[1]) / targetResolution\r\n    );\r\n    const u2 = pixelRound((target[2][0] - targetTopLeft[0]) / targetResolution);\r\n    const v2 = pixelRound(\r\n      -(target[2][1] - targetTopLeft[1]) / targetResolution\r\n    );\r\n\r\n    // Shift all the source points to improve numerical stability\r\n    // of all the subsequent calculations. The [x0, y0] is used here.\r\n    // This is also used to simplify the linear system.\r\n    const sourceNumericalShiftX = x0;\r\n    const sourceNumericalShiftY = y0;\r\n    x0 = 0;\r\n    y0 = 0;\r\n    x1 -= sourceNumericalShiftX;\r\n    y1 -= sourceNumericalShiftY;\r\n    x2 -= sourceNumericalShiftX;\r\n    y2 -= sourceNumericalShiftY;\r\n\r\n    const augmentedMatrix = [\r\n      [x1, y1, 0, 0, u1 - u0],\r\n      [x2, y2, 0, 0, u2 - u0],\r\n      [0, 0, x1, y1, v1 - v0],\r\n      [0, 0, x2, y2, v2 - v0],\r\n    ];\r\n    const affineCoefs = solveLinearSystem(augmentedMatrix);\r\n    if (!affineCoefs) {\r\n      return;\r\n    }\r\n\r\n    context.save();\r\n    context.beginPath();\r\n\r\n    if (isBrokenDiagonalRendering() || !interpolate) {\r\n      // Make sure that all lines are horizontal or vertical\r\n      context.moveTo(u1, v1);\r\n      // This is the diagonal line. Do it in 4 steps\r\n      const steps = 4;\r\n      const ud = u0 - u1;\r\n      const vd = v0 - v1;\r\n      for (let step = 0; step < steps; step++) {\r\n        // Go horizontally\r\n        context.lineTo(\r\n          u1 + pixelRound(((step + 1) * ud) / steps),\r\n          v1 + pixelRound((step * vd) / (steps - 1))\r\n        );\r\n        // Go vertically\r\n        if (step != steps - 1) {\r\n          context.lineTo(\r\n            u1 + pixelRound(((step + 1) * ud) / steps),\r\n            v1 + pixelRound(((step + 1) * vd) / (steps - 1))\r\n          );\r\n        }\r\n      }\r\n      // We are almost at u0r, v0r\r\n      context.lineTo(u2, v2);\r\n    } else {\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n    }\r\n\r\n    context.clip();\r\n\r\n    context.transform(\r\n      affineCoefs[0],\r\n      affineCoefs[2],\r\n      affineCoefs[1],\r\n      affineCoefs[3],\r\n      u0,\r\n      v0\r\n    );\r\n\r\n    context.translate(\r\n      sourceDataExtent[0] - sourceNumericalShiftX,\r\n      sourceDataExtent[3] - sourceNumericalShiftY\r\n    );\r\n\r\n    context.scale(\r\n      sourceResolution / pixelRatio,\r\n      -sourceResolution / pixelRatio\r\n    );\r\n\r\n    context.drawImage(stitchContext.canvas, 0, 0);\r\n    context.restore();\r\n  });\r\n\r\n  releaseCanvas(stitchContext);\r\n  canvasPool.push(stitchContext.canvas);\r\n\r\n  if (renderEdges) {\r\n    context.save();\r\n\r\n    context.globalCompositeOperation = 'source-over';\r\n    context.strokeStyle = 'black';\r\n    context.lineWidth = 1;\r\n\r\n    triangulation.getTriangles().forEach(function (triangle, i, arr) {\r\n      const target = triangle.target;\r\n      const u0 = (target[0][0] - targetTopLeft[0]) / targetResolution;\r\n      const v0 = -(target[0][1] - targetTopLeft[1]) / targetResolution;\r\n      const u1 = (target[1][0] - targetTopLeft[0]) / targetResolution;\r\n      const v1 = -(target[1][1] - targetTopLeft[1]) / targetResolution;\r\n      const u2 = (target[2][0] - targetTopLeft[0]) / targetResolution;\r\n      const v2 = -(target[2][1] - targetTopLeft[1]) / targetResolution;\r\n\r\n      context.beginPath();\r\n      context.moveTo(u1, v1);\r\n      context.lineTo(u0, v0);\r\n      context.lineTo(u2, v2);\r\n      context.closePath();\r\n      context.stroke();\r\n    });\r\n\r\n    context.restore();\r\n  }\r\n  return context.canvas;\r\n}\r\n", "/**\r\n * @module ol/reproj/Image\r\n */\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport ImageBase from '../ImageBase.js';\r\nimport ImageState from '../ImageState.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {\r\n  calculateSourceResolution,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport {\r\n  getCenter,\r\n  getHeight,\r\n  getIntersection,\r\n  getWidth,\r\n  isEmpty,\r\n} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected image.\r\n * See {@link module:ol/source/Image~ImageSource}.\r\n */\r\nclass ReprojImage extends ImageBase {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\r\n   * @param {number} targetResolution Target resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {FunctionType} getImageFunction\r\n   *     Function returning source images (extent, resolution, pixelRatio).\r\n   * @param {boolean} interpolate Use linear interpolation when resampling.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    targetProj,\r\n    targetExtent,\r\n    targetResolution,\r\n    pixelRatio,\r\n    getImageFunction,\r\n    interpolate\r\n  ) {\r\n    let maxSourceExtent = sourceProj.getExtent();\r\n    if (maxSourceExtent && sourceProj.canWrapX()) {\r\n      maxSourceExtent = maxSourceExtent.slice();\r\n      maxSourceExtent[0] = -Infinity;\r\n      maxSourceExtent[2] = Infinity;\r\n    }\r\n    let maxTargetExtent = targetProj.getExtent();\r\n    if (maxTargetExtent && targetProj.canWrapX()) {\r\n      maxTargetExtent = maxTargetExtent.slice();\r\n      maxTargetExtent[0] = -Infinity;\r\n      maxTargetExtent[2] = Infinity;\r\n    }\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    const targetCenter = getCenter(limitedTargetExtent);\r\n    const sourceResolution = calculateSourceResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      targetCenter,\r\n      targetResolution\r\n    );\r\n\r\n    const errorThresholdInPixels = ERROR_THRESHOLD;\r\n\r\n    const triangulation = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution\r\n    );\r\n\r\n    const sourceExtent = triangulation.calculateSourceExtent();\r\n    const sourceImage = isEmpty(sourceExtent)\r\n      ? null\r\n      : getImageFunction(sourceExtent, sourceResolution, pixelRatio);\r\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\r\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\r\n\r\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../proj/Projection.js\").default}\r\n     */\r\n    this.targetProj_ = targetProj;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.maxSourceExtent_ = maxSourceExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = triangulation;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.targetResolution_ = targetResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../extent.js\").Extent}\r\n     */\r\n    this.targetExtent_ = targetExtent;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../ImageBase.js\").default}\r\n     */\r\n    this.sourceImage_ = sourceImage;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourcePixelRatio_ = sourcePixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.interpolate_ = interpolate;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../events.js\").EventsKey}\r\n     */\r\n    this.sourceListenerKey_ = null;\r\n  }\r\n\r\n  /**\r\n   * Clean up.\r\n   */\r\n  disposeInternal() {\r\n    if (this.state == ImageState.LOADING) {\r\n      this.unlistenSource_();\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * @return {import(\"../proj/Projection.js\").default} Projection.\r\n   */\r\n  getProjection() {\r\n    return this.targetProj_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const sourceState = this.sourceImage_.getState();\r\n    if (sourceState == ImageState.LOADED) {\r\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\r\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\r\n\r\n      this.canvas_ = renderReprojected(\r\n        width,\r\n        height,\r\n        this.sourcePixelRatio_,\r\n        this.sourceImage_.getResolution(),\r\n        this.maxSourceExtent_,\r\n        this.targetResolution_,\r\n        this.targetExtent_,\r\n        this.triangulation_,\r\n        [\r\n          {\r\n            extent: this.sourceImage_.getExtent(),\r\n            image: this.sourceImage_.getImage(),\r\n          },\r\n        ],\r\n        0,\r\n        undefined,\r\n        this.interpolate_\r\n      );\r\n    }\r\n    this.state = sourceState;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      this.state = ImageState.LOADING;\r\n      this.changed();\r\n\r\n      const sourceState = this.sourceImage_.getState();\r\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\r\n        this.reproject_();\r\n      } else {\r\n        this.sourceListenerKey_ = listen(\r\n          this.sourceImage_,\r\n          EventType.CHANGE,\r\n          function (e) {\r\n            const sourceState = this.sourceImage_.getState();\r\n            if (\r\n              sourceState == ImageState.LOADED ||\r\n              sourceState == ImageState.ERROR\r\n            ) {\r\n              this.unlistenSource_();\r\n              this.reproject_();\r\n            }\r\n          },\r\n          this\r\n        );\r\n        this.sourceImage_.load();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSource_() {\r\n    unlistenByKey(\r\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\r\n    );\r\n    this.sourceListenerKey_ = null;\r\n  }\r\n}\r\n\r\nexport default ReprojImage;\r\n", "/**\r\n * @module ol/source/Image\r\n */\r\nimport Event from '../events/Event.js';\r\nimport ImageState from '../ImageState.js';\r\nimport ReprojImage from '../reproj/Image.js';\r\nimport Source from './Source.js';\r\nimport {abstract} from '../util.js';\r\nimport {equals} from '../extent.js';\r\nimport {equivalent} from '../proj.js';\r\nimport {linearFindNearest} from '../array.js';\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport const ImageSourceEventType = {\r\n  /**\r\n   * Triggered when an image starts loading.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\r\n   * @api\r\n   */\r\n  IMAGELOADSTART: 'imageloadstart',\r\n\r\n  /**\r\n   * Triggered when an image finishes loading.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\r\n   * @api\r\n   */\r\n  IMAGELOADEND: 'imageloadend',\r\n\r\n  /**\r\n   * Triggered if image loading results in an error.\r\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\r\n   * @api\r\n   */\r\n  IMAGELOADERROR: 'imageloaderror',\r\n};\r\n\r\n/**\r\n * @typedef {'imageloadend'|'imageloaderror'|'imageloadstart'} ImageSourceEventTypes\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\r\n * type.\r\n */\r\nexport class ImageSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Image.js\").default} image The image.\r\n   */\r\n  constructor(type, image) {\r\n    super(type);\r\n\r\n    /**\r\n     * The image related to the event.\r\n     * @type {import(\"../Image.js\").default}\r\n     * @api\r\n     */\r\n    this.image = image;\r\n  }\r\n}\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<ImageSourceEventTypes, ImageSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\r\n *     |ImageSourceEventTypes, Return>} ImageSourceOnSignature\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\r\n * @property {Array<number>} [resolutions] Resolutions.\r\n * @property {import(\"./Source.js\").State} [state] State.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing a single image.\r\n * @abstract\r\n * @fires module:ol/source/Image.ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageSource extends Source {\r\n  /**\r\n   * @param {Options} options Single image source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      interpolate:\r\n        options.interpolate !== undefined ? options.interpolate : true,\r\n    });\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {ImageSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<number>|null}\r\n     */\r\n    this.resolutions_ =\r\n      options.resolutions !== undefined ? options.resolutions : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../reproj/Image.js\").default}\r\n     */\r\n    this.reprojectedImage_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.reprojectedRevision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array<number>|null} resolutions Resolutions.\r\n   */\r\n  setResolutions(resolutions) {\r\n    this.resolutions_ = resolutions;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {number} resolution Resolution.\r\n   * @return {number} Resolution.\r\n   */\r\n  findNearestResolution(resolution) {\r\n    const resolutions = this.getResolutions();\r\n    if (resolutions) {\r\n      const idx = linearFindNearest(resolutions, resolution, 0);\r\n      resolution = resolutions[idx];\r\n    }\r\n    return resolution;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageBase.js\").default} Single image.\r\n   */\r\n  getImage(extent, resolution, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (\r\n      !sourceProjection ||\r\n      !projection ||\r\n      equivalent(sourceProjection, projection)\r\n    ) {\r\n      if (sourceProjection) {\r\n        projection = sourceProjection;\r\n      }\r\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\r\n    }\r\n    if (this.reprojectedImage_) {\r\n      if (\r\n        this.reprojectedRevision_ == this.getRevision() &&\r\n        equivalent(this.reprojectedImage_.getProjection(), projection) &&\r\n        this.reprojectedImage_.getResolution() == resolution &&\r\n        equals(this.reprojectedImage_.getExtent(), extent)\r\n      ) {\r\n        return this.reprojectedImage_;\r\n      }\r\n      this.reprojectedImage_.dispose();\r\n      this.reprojectedImage_ = null;\r\n    }\r\n\r\n    this.reprojectedImage_ = new ReprojImage(\r\n      sourceProjection,\r\n      projection,\r\n      extent,\r\n      resolution,\r\n      pixelRatio,\r\n      (extent, resolution, pixelRatio) =>\r\n        this.getImageInternal(extent, resolution, pixelRatio, sourceProjection),\r\n      this.getInterpolate()\r\n    );\r\n    this.reprojectedRevision_ = this.getRevision();\r\n\r\n    return this.reprojectedImage_;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageBase.js\").default} Single image.\r\n   * @protected\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n    return abstract();\r\n  }\r\n\r\n  /**\r\n   * Handle image change events.\r\n   * @param {import(\"../events/Event.js\").default} event Event.\r\n   * @protected\r\n   */\r\n  handleImageChange(event) {\r\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\r\n    let type;\r\n    switch (image.getState()) {\r\n      case ImageState.LOADING:\r\n        this.loading = true;\r\n        type = ImageSourceEventType.IMAGELOADSTART;\r\n        break;\r\n      case ImageState.LOADED:\r\n        this.loading = false;\r\n        type = ImageSourceEventType.IMAGELOADEND;\r\n        break;\r\n      case ImageState.ERROR:\r\n        this.loading = false;\r\n        type = ImageSourceEventType.IMAGELOADERROR;\r\n        break;\r\n      default:\r\n        return;\r\n    }\r\n    if (this.hasListener(type)) {\r\n      this.dispatchEvent(new ImageSourceEvent(type, image));\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Default image load function for image sources that use import(\"../Image.js\").Image image\r\n * instances.\r\n * @param {import(\"../Image.js\").default} image Image.\r\n * @param {string} src Source.\r\n */\r\nexport function defaultImageLoadFunction(image, src) {\r\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\r\n}\r\n\r\nexport default ImageSource;\r\n", "/**\r\n * @module ol/layer/TileProperty\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nexport default {\r\n  PRELOAD: 'preload',\r\n  USE_INTERIM_TILES_ON_ERROR: 'useInterimTilesOnError',\r\n};\r\n", "/**\r\n * @module ol/layer/BaseTile\r\n */\r\nimport Layer from './Layer.js';\r\nimport TileProperty from './TileProperty.js';\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Base\").BaseLayerObjectEventTypes|\r\n *     import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError', import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../render/EventType\").LayerRenderEventTypes, import(\"../render/Event\").default, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"./Base\").BaseLayerObjectEventTypes|\r\n *   import(\"./Layer.js\").LayerEventType|'change:preload'|'change:useInterimTilesOnError'|import(\"../render/EventType\").LayerRenderEventTypes, Return>} BaseTileLayerOnSignature\r\n */\r\n\r\n/**\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @typedef {Object} Options\r\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\r\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\r\n * method was used.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\r\n * visible.\r\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\r\n * be visible.\r\n * @property {number} [preload=0] Preload. Load low-resolution tiles up to `preload` levels. `0`\r\n * means no preloading.\r\n * @property {TileSourceType} [source] Source for this layer.\r\n * @property {import(\"../Map.js\").default} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link import(\"../Map.js\").default#addLayer map.addLayer()}.\r\n * @property {boolean} [useInterimTilesOnError=true] Use interim tiles on error.\r\n * @property {Object<string, *>} [properties] Arbitrary observable properties. Can be accessed with `#get()` and `#set()`.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @template {import(\"../renderer/Layer.js\").default} RendererType\r\n * @extends {Layer<TileSourceType, RendererType>}\r\n * @api\r\n */\r\nclass BaseTileLayer extends Layer {\r\n  /**\r\n   * @param {Options<TileSourceType>} [options] Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    options = options ? options : {};\r\n\r\n    const baseOptions = Object.assign({}, options);\r\n\r\n    delete baseOptions.preload;\r\n    delete baseOptions.useInterimTilesOnError;\r\n    super(baseOptions);\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {BaseTileLayerOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    this.setPreload(options.preload !== undefined ? options.preload : 0);\r\n    this.setUseInterimTilesOnError(\r\n      options.useInterimTilesOnError !== undefined\r\n        ? options.useInterimTilesOnError\r\n        : true\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the level as number to which we will preload tiles up to.\r\n   * @return {number} The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getPreload() {\r\n    return /** @type {number} */ (this.get(TileProperty.PRELOAD));\r\n  }\r\n\r\n  /**\r\n   * Set the level as number to which we will preload tiles up to.\r\n   * @param {number} preload The level to preload tiles up to.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setPreload(preload) {\r\n    this.set(TileProperty.PRELOAD, preload);\r\n  }\r\n\r\n  /**\r\n   * Whether we use interim tiles on error.\r\n   * @return {boolean} Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getUseInterimTilesOnError() {\r\n    return /** @type {boolean} */ (\r\n      this.get(TileProperty.USE_INTERIM_TILES_ON_ERROR)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Set whether we use interim tiles on error.\r\n   * @param {boolean} useInterimTilesOnError Use interim tiles on error.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setUseInterimTilesOnError(useInterimTilesOnError) {\r\n    this.set(TileProperty.USE_INTERIM_TILES_ON_ERROR, useInterimTilesOnError);\r\n  }\r\n\r\n  /**\r\n   * Get data for a pixel location.  The return type depends on the source data.  For image tiles,\r\n   * a four element RGBA array will be returned.  For data tiles, the array length will match the\r\n   * number of bands in the dataset.  For requests outside the layer extent, `null` will be returned.\r\n   * Data for a image tiles can only be retrieved if the source's `crossOrigin` property is set.\r\n   *\r\n   * ```js\r\n   * // display layer data on every pointer move\r\n   * map.on('pointermove', (event) => {\r\n   *   console.log(layer.getData(event.pixel));\r\n   * });\r\n   * ```\r\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray|Uint8Array|Float32Array|DataView|null} Pixel data.\r\n   * @api\r\n   */\r\n  getData(pixel) {\r\n    return super.getData(pixel);\r\n  }\r\n}\r\n\r\nexport default BaseTileLayer;\r\n", "/**\r\n * @module ol/ImageTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\nimport {listenImage} from './Image.js';\r\n\r\nclass ImageTile extends Tile {\r\n  /**\r\n   * @param {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n   * @param {import(\"./TileState.js\").default} state State.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {import(\"./Tile.js\").LoadFunction} tileLoadFunction Tile load function.\r\n   * @param {import(\"./Tile.js\").Options} [options] Tile options.\r\n   */\r\n  constructor(tileCoord, state, src, crossOrigin, tileLoadFunction, options) {\r\n    super(tileCoord, state, options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ = crossOrigin;\r\n\r\n    /**\r\n     * Image URI\r\n     *\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    this.key = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLImageElement|HTMLCanvasElement}\r\n     */\r\n    this.image_ = new Image();\r\n    if (crossOrigin !== null) {\r\n      this.image_.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {?function():void}\r\n     */\r\n    this.unlisten_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"./Tile.js\").LoadFunction}\r\n     */\r\n    this.tileLoadFunction_ = tileLoadFunction;\r\n  }\r\n\r\n  /**\r\n   * Get the HTML image element for this tile (may be a Canvas, Image, or Video).\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Sets an HTML image element for this tile (may be a Canvas or preloaded Image).\r\n   * @param {HTMLCanvasElement|HTMLImageElement} element Element.\r\n   */\r\n  setImage(element) {\r\n    this.image_ = element;\r\n    this.state = TileState.LOADED;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.state = TileState.ERROR;\r\n    this.unlistenImage_();\r\n    this.image_ = getBlankImage();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    const image = /** @type {HTMLImageElement} */ (this.image_);\r\n    if (image.naturalWidth && image.naturalHeight) {\r\n      this.state = TileState.LOADED;\r\n    } else {\r\n      this.state = TileState.EMPTY;\r\n    }\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   *\r\n   * To retry loading tiles on failed requests, use a custom `tileLoadFunction`\r\n   * that checks for error status codes and reloads only when the status code is\r\n   * 408, 429, 500, 502, 503 and 504, and only when not too many retries have been\r\n   * made already:\r\n   *\r\n   * ```js\r\n   * const retryCodes = [408, 429, 500, 502, 503, 504];\r\n   * const retries = {};\r\n   * source.setTileLoadFunction((tile, src) => {\r\n   *   const image = tile.getImage();\r\n   *   fetch(src)\r\n   *     .then((response) => {\r\n   *       if (retryCodes.includes(response.status)) {\r\n   *         retries[src] = (retries[src] || 0) + 1;\r\n   *         if (retries[src] <= 3) {\r\n   *           setTimeout(() => tile.load(), retries[src] * 1000);\r\n   *         }\r\n   *         return Promise.reject();\r\n   *       }\r\n   *       return response.blob();\r\n   *     })\r\n   *     .then((blob) => {\r\n   *       const imageUrl = URL.createObjectURL(blob);\r\n   *       image.src = imageUrl;\r\n   *       setTimeout(() => URL.revokeObjectURL(imageUrl), 5000);\r\n   *     })\r\n   *     .catch(() => tile.setState(3)); // error\r\n   * });\r\n   * ```\r\n   *\r\n   * @api\r\n   */\r\n  load() {\r\n    if (this.state == TileState.ERROR) {\r\n      this.state = TileState.IDLE;\r\n      this.image_ = new Image();\r\n      if (this.crossOrigin_ !== null) {\r\n        this.image_.crossOrigin = this.crossOrigin_;\r\n      }\r\n    }\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n      this.tileLoadFunction_(this, this.src_);\r\n      this.unlisten_ = listenImage(\r\n        this.image_,\r\n        this.handleImageLoad_.bind(this),\r\n        this.handleImageError_.bind(this)\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    if (this.unlisten_) {\r\n      this.unlisten_();\r\n      this.unlisten_ = null;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Get a 1-pixel blank image.\r\n * @return {HTMLCanvasElement} Blank image.\r\n */\r\nfunction getBlankImage() {\r\n  const ctx = createCanvasContext2D(1, 1);\r\n  ctx.fillStyle = 'rgba(0,0,0,0)';\r\n  ctx.fillRect(0, 0, 1, 1);\r\n  return ctx.canvas;\r\n}\r\n\r\nexport default ImageTile;\r\n", "/**\r\n * @module ol/reproj/Tile\r\n */\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\nimport EventType from '../events/EventType.js';\r\nimport Tile from '../Tile.js';\r\nimport TileState from '../TileState.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {\r\n  calculateSourceExtentResolution,\r\n  canvasPool,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport {clamp} from '../math.js';\r\nimport {getArea, getIntersection} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\nimport {releaseCanvas} from '../dom.js';\r\n\r\n/**\r\n * @typedef {function(number, number, number, number) : (import(\"../ImageTile.js\").default)} FunctionType\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected tile.\r\n * See {@link module:ol/source/TileImage~TileImage}.\r\n *\r\n */\r\nclass ReprojTile extends Tile {\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\r\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\r\n   * @param {import(\"../tilecoord.js\").TileCoord} wrappedTileCoord Coordinate of the tile wrapped in X.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {number} gutter Gutter of the source tiles.\r\n   * @param {FunctionType} getTileFunction\r\n   *     Function returning source tiles (z, x, y, pixelRatio).\r\n   * @param {number} [errorThreshold] Acceptable reprojection error (in px).\r\n   * @param {boolean} [renderEdges] Render reprojection edges.\r\n   * @param {boolean} [interpolate] Use linear interpolation when resampling.\r\n   */\r\n  constructor(\r\n    sourceProj,\r\n    sourceTileGrid,\r\n    targetProj,\r\n    targetTileGrid,\r\n    tileCoord,\r\n    wrappedTileCoord,\r\n    pixelRatio,\r\n    gutter,\r\n    getTileFunction,\r\n    errorThreshold,\r\n    renderEdges,\r\n    interpolate\r\n  ) {\r\n    super(tileCoord, TileState.IDLE, {interpolate: !!interpolate});\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderEdges_ = renderEdges !== undefined ? renderEdges : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = gutter;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.sourceTileGrid_ = sourceTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.targetTileGrid_ = targetTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord_ = wrappedTileCoord ? wrappedTileCoord : tileCoord;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<import(\"../ImageTile.js\").default>}\r\n     */\r\n    this.sourceTiles_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.sourcesListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourceZ_ = 0;\r\n\r\n    const targetExtent = targetTileGrid.getTileCoordExtent(\r\n      this.wrappedTileCoord_\r\n    );\r\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\r\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    if (getArea(limitedTargetExtent) === 0) {\r\n      // Tile is completely outside range -> EMPTY\r\n      // TODO: is it actually correct that the source even creates the tile ?\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const sourceProjExtent = sourceProj.getExtent();\r\n    if (sourceProjExtent) {\r\n      if (!maxSourceExtent) {\r\n        maxSourceExtent = sourceProjExtent;\r\n      } else {\r\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\r\n      }\r\n    }\r\n\r\n    const targetResolution = targetTileGrid.getResolution(\r\n      this.wrappedTileCoord_[0]\r\n    );\r\n\r\n    const sourceResolution = calculateSourceExtentResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      targetResolution\r\n    );\r\n\r\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n      // invalid sourceResolution -> EMPTY\r\n      // probably edges of the projections when no extent is defined\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const errorThresholdInPixels =\r\n      errorThreshold !== undefined ? errorThreshold : ERROR_THRESHOLD;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution\r\n    );\r\n\r\n    if (this.triangulation_.getTriangles().length === 0) {\r\n      // no valid triangles -> EMPTY\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    this.sourceZ_ = sourceTileGrid.getZForResolution(sourceResolution);\r\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\r\n\r\n    if (maxSourceExtent) {\r\n      if (sourceProj.canWrapX()) {\r\n        sourceExtent[1] = clamp(\r\n          sourceExtent[1],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3]\r\n        );\r\n        sourceExtent[3] = clamp(\r\n          sourceExtent[3],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3]\r\n        );\r\n      } else {\r\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\r\n      }\r\n    }\r\n\r\n    if (!getArea(sourceExtent)) {\r\n      this.state = TileState.EMPTY;\r\n    } else {\r\n      const sourceRange = sourceTileGrid.getTileRangeForExtentAndZ(\r\n        sourceExtent,\r\n        this.sourceZ_\r\n      );\r\n\r\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\r\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\r\n          const tile = getTileFunction(this.sourceZ_, srcX, srcY, pixelRatio);\r\n          if (tile) {\r\n            this.sourceTiles_.push(tile);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.sourceTiles_.length === 0) {\r\n        this.state = TileState.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the HTML Canvas element for this tile.\r\n   * @return {HTMLCanvasElement} Canvas.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const sources = [];\r\n    this.sourceTiles_.forEach((tile) => {\r\n      if (tile && tile.getState() == TileState.LOADED) {\r\n        sources.push({\r\n          extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\r\n          image: tile.getImage(),\r\n        });\r\n      }\r\n    });\r\n    this.sourceTiles_.length = 0;\r\n\r\n    if (sources.length === 0) {\r\n      this.state = TileState.ERROR;\r\n    } else {\r\n      const z = this.wrappedTileCoord_[0];\r\n      const size = this.targetTileGrid_.getTileSize(z);\r\n      const width = typeof size === 'number' ? size : size[0];\r\n      const height = typeof size === 'number' ? size : size[1];\r\n      const targetResolution = this.targetTileGrid_.getResolution(z);\r\n      const sourceResolution = this.sourceTileGrid_.getResolution(\r\n        this.sourceZ_\r\n      );\r\n\r\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\r\n        this.wrappedTileCoord_\r\n      );\r\n\r\n      this.canvas_ = renderReprojected(\r\n        width,\r\n        height,\r\n        this.pixelRatio_,\r\n        sourceResolution,\r\n        this.sourceTileGrid_.getExtent(),\r\n        targetResolution,\r\n        targetExtent,\r\n        this.triangulation_,\r\n        sources,\r\n        this.gutter_,\r\n        this.renderEdges_,\r\n        this.interpolate\r\n      );\r\n\r\n      this.state = TileState.LOADED;\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == TileState.IDLE) {\r\n      this.state = TileState.LOADING;\r\n      this.changed();\r\n\r\n      let leftToLoad = 0;\r\n\r\n      this.sourcesListenerKeys_ = [];\r\n      this.sourceTiles_.forEach((tile) => {\r\n        const state = tile.getState();\r\n        if (state == TileState.IDLE || state == TileState.LOADING) {\r\n          leftToLoad++;\r\n\r\n          const sourceListenKey = listen(\r\n            tile,\r\n            EventType.CHANGE,\r\n            function (e) {\r\n              const state = tile.getState();\r\n              if (\r\n                state == TileState.LOADED ||\r\n                state == TileState.ERROR ||\r\n                state == TileState.EMPTY\r\n              ) {\r\n                unlistenByKey(sourceListenKey);\r\n                leftToLoad--;\r\n                if (leftToLoad === 0) {\r\n                  this.unlistenSources_();\r\n                  this.reproject_();\r\n                }\r\n              }\r\n            },\r\n            this\r\n          );\r\n          this.sourcesListenerKeys_.push(sourceListenKey);\r\n        }\r\n      });\r\n\r\n      if (leftToLoad === 0) {\r\n        setTimeout(this.reproject_.bind(this), 0);\r\n      } else {\r\n        this.sourceTiles_.forEach(function (tile, i, arr) {\r\n          const state = tile.getState();\r\n          if (state == TileState.IDLE) {\r\n            tile.load();\r\n          }\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSources_() {\r\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\r\n    this.sourcesListenerKeys_ = null;\r\n  }\r\n\r\n  /**\r\n   * Remove from the cache due to expiry\r\n   */\r\n  release() {\r\n    if (this.canvas_) {\r\n      releaseCanvas(this.canvas_.getContext('2d'));\r\n      canvasPool.push(this.canvas_);\r\n      this.canvas_ = null;\r\n    }\r\n    super.release();\r\n  }\r\n}\r\n\r\nexport default ReprojTile;\r\n", "/**\r\n * @module ol/renderer/canvas/TileLayer\r\n */\r\nimport CanvasLayerRenderer from './Layer.js';\r\nimport ImageTile from '../../ImageTile.js';\r\nimport ReprojTile from '../../reproj/Tile.js';\r\nimport TileRange from '../../TileRange.js';\r\nimport TileState from '../../TileState.js';\r\nimport {\r\n  apply as applyTransform,\r\n  compose as composeTransform,\r\n  makeInverse,\r\n  toString as toTransformString,\r\n} from '../../transform.js';\r\nimport {ascending} from '../../array.js';\r\nimport {\r\n  containsCoordinate,\r\n  createEmpty,\r\n  equals,\r\n  getHeight,\r\n  getIntersection,\r\n  getRotatedViewport,\r\n  getTopLeft,\r\n  getWidth,\r\n  intersects,\r\n} from '../../extent.js';\r\nimport {fromUserExtent} from '../../proj.js';\r\nimport {getUid} from '../../util.js';\r\nimport {toSize} from '../../size.js';\r\n\r\n/**\r\n * @classdesc\r\n * Canvas renderer for tile layers.\r\n * @api\r\n * @template {import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default} [LayerType=import(\"../../layer/Tile.js\").default<import(\"../../source/Tile.js\").default>|import(\"../../layer/VectorTile.js\").default]\r\n * @extends {CanvasLayerRenderer<LayerType>}\r\n */\r\nclass CanvasTileLayerRenderer extends CanvasLayerRenderer {\r\n  /**\r\n   * @param {LayerType} tileLayer Tile layer.\r\n   */\r\n  constructor(tileLayer) {\r\n    super(tileLayer);\r\n\r\n    /**\r\n     * Rendered extent has changed since the previous `renderFrame()` call\r\n     * @type {boolean}\r\n     */\r\n    this.extentChanged = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?import(\"../../extent.js\").Extent}\r\n     */\r\n    this.renderedExtent_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.renderedPixelRatio;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../proj/Projection.js\").default}\r\n     */\r\n    this.renderedProjection = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Array<import(\"../../Tile.js\").default>}\r\n     */\r\n    this.renderedTiles = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.newTiles_ = false;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {import(\"../../extent.js\").Extent}\r\n     */\r\n    this.tmpExtent = createEmpty();\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../../TileRange.js\").default}\r\n     */\r\n    this.tmpTileRange_ = new TileRange(0, 0, 0, 0);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {import(\"../../Tile.js\").default} tile Tile.\r\n   * @return {boolean} Tile is drawable.\r\n   */\r\n  isDrawableTile(tile) {\r\n    const tileLayer = this.getLayer();\r\n    const tileState = tile.getState();\r\n    const useInterimTilesOnError = tileLayer.getUseInterimTilesOnError();\r\n    return (\r\n      tileState == TileState.LOADED ||\r\n      tileState == TileState.EMPTY ||\r\n      (tileState == TileState.ERROR && !useInterimTilesOnError)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {!import(\"../../Tile.js\").default} Tile.\r\n   */\r\n  getTile(z, x, y, frameState) {\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const projection = frameState.viewState.projection;\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getSource();\r\n    let tile = tileSource.getTile(z, x, y, pixelRatio, projection);\r\n    if (tile.getState() == TileState.ERROR) {\r\n      if (tileLayer.getUseInterimTilesOnError() && tileLayer.getPreload() > 0) {\r\n        // Preloaded tiles for lower resolutions might have finished loading.\r\n        this.newTiles_ = true;\r\n      }\r\n    }\r\n    if (!this.isDrawableTile(tile)) {\r\n      tile = tile.getInterimTile();\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\r\n   * @return {Uint8ClampedArray} Data at the pixel location.\r\n   */\r\n  getData(pixel) {\r\n    const frameState = this.frameState;\r\n    if (!frameState) {\r\n      return null;\r\n    }\r\n\r\n    const layer = this.getLayer();\r\n    const coordinate = applyTransform(\r\n      frameState.pixelToCoordinateTransform,\r\n      pixel.slice()\r\n    );\r\n\r\n    const layerExtent = layer.getExtent();\r\n    if (layerExtent) {\r\n      if (!containsCoordinate(layerExtent, coordinate)) {\r\n        return null;\r\n      }\r\n    }\r\n\r\n    const pixelRatio = frameState.pixelRatio;\r\n    const projection = frameState.viewState.projection;\r\n    const viewState = frameState.viewState;\r\n    const source = layer.getRenderSource();\r\n    const tileGrid = source.getTileGridForProjection(viewState.projection);\r\n    const tilePixelRatio = source.getTilePixelRatio(frameState.pixelRatio);\r\n\r\n    for (\r\n      let z = tileGrid.getZForResolution(viewState.resolution);\r\n      z >= tileGrid.getMinZoom();\r\n      --z\r\n    ) {\r\n      const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\r\n      const tile = source.getTile(\r\n        z,\r\n        tileCoord[1],\r\n        tileCoord[2],\r\n        pixelRatio,\r\n        projection\r\n      );\r\n      if (\r\n        !(tile instanceof ImageTile || tile instanceof ReprojTile) ||\r\n        (tile instanceof ReprojTile && tile.getState() === TileState.EMPTY)\r\n      ) {\r\n        return null;\r\n      }\r\n\r\n      if (tile.getState() !== TileState.LOADED) {\r\n        continue;\r\n      }\r\n\r\n      const tileOrigin = tileGrid.getOrigin(z);\r\n      const tileSize = toSize(tileGrid.getTileSize(z));\r\n      const tileResolution = tileGrid.getResolution(z);\r\n\r\n      const col = Math.floor(\r\n        tilePixelRatio *\r\n          ((coordinate[0] - tileOrigin[0]) / tileResolution -\r\n            tileCoord[1] * tileSize[0])\r\n      );\r\n\r\n      const row = Math.floor(\r\n        tilePixelRatio *\r\n          ((tileOrigin[1] - coordinate[1]) / tileResolution -\r\n            tileCoord[2] * tileSize[1])\r\n      );\r\n\r\n      const gutter = Math.round(\r\n        tilePixelRatio * source.getGutterForProjection(viewState.projection)\r\n      );\r\n\r\n      return this.getImageData(tile.getImage(), col + gutter, row + gutter);\r\n    }\r\n\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @param {Object<number, Object<string, import(\"../../Tile.js\").default>>} tiles Lookup of loaded tiles by zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @param {import(\"../../Tile.js\").default} tile Tile.\r\n   * @return {boolean|void} If `false`, the tile will not be considered loaded.\r\n   */\r\n  loadedTileCallback(tiles, zoom, tile) {\r\n    if (this.isDrawableTile(tile)) {\r\n      return super.loadedTileCallback(tiles, zoom, tile);\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Determine whether render should be called.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @return {boolean} Layer is ready to be rendered.\r\n   */\r\n  prepareFrame(frameState) {\r\n    return !!this.getLayer().getSource();\r\n  }\r\n\r\n  /**\r\n   * Render the layer.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {HTMLElement} target Target that may be used to render content to.\r\n   * @return {HTMLElement} The rendered element.\r\n   */\r\n  renderFrame(frameState, target) {\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const viewState = frameState.viewState;\r\n    const projection = viewState.projection;\r\n    const viewResolution = viewState.resolution;\r\n    const viewCenter = viewState.center;\r\n    const rotation = viewState.rotation;\r\n    const pixelRatio = frameState.pixelRatio;\r\n\r\n    const tileLayer = this.getLayer();\r\n    const tileSource = tileLayer.getSource();\r\n    const sourceRevision = tileSource.getRevision();\r\n    const tileGrid = tileSource.getTileGridForProjection(projection);\r\n    const z = tileGrid.getZForResolution(viewResolution, tileSource.zDirection);\r\n    const tileResolution = tileGrid.getResolution(z);\r\n\r\n    let extent = frameState.extent;\r\n    const resolution = frameState.viewState.resolution;\r\n    const tilePixelRatio = tileSource.getTilePixelRatio(pixelRatio);\r\n    // desired dimensions of the canvas in pixels\r\n    const width = Math.round((getWidth(extent) / resolution) * pixelRatio);\r\n    const height = Math.round((getHeight(extent) / resolution) * pixelRatio);\r\n\r\n    const layerExtent =\r\n      layerState.extent && fromUserExtent(layerState.extent, projection);\r\n    if (layerExtent) {\r\n      extent = getIntersection(\r\n        extent,\r\n        fromUserExtent(layerState.extent, projection)\r\n      );\r\n    }\r\n\r\n    const dx = (tileResolution * width) / 2 / tilePixelRatio;\r\n    const dy = (tileResolution * height) / 2 / tilePixelRatio;\r\n    const canvasExtent = [\r\n      viewCenter[0] - dx,\r\n      viewCenter[1] - dy,\r\n      viewCenter[0] + dx,\r\n      viewCenter[1] + dy,\r\n    ];\r\n\r\n    const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\r\n\r\n    /**\r\n     * @type {Object<number, Object<string, import(\"../../Tile.js\").default>>}\r\n     */\r\n    const tilesToDrawByZ = {};\r\n    tilesToDrawByZ[z] = {};\r\n\r\n    const findLoadedTiles = this.createLoadedTileFinder(\r\n      tileSource,\r\n      projection,\r\n      tilesToDrawByZ\r\n    );\r\n\r\n    const tmpExtent = this.tmpExtent;\r\n    const tmpTileRange = this.tmpTileRange_;\r\n    this.newTiles_ = false;\r\n    const viewport = rotation\r\n      ? getRotatedViewport(\r\n          viewState.center,\r\n          resolution,\r\n          rotation,\r\n          frameState.size\r\n        )\r\n      : undefined;\r\n    for (let x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n      for (let y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n        if (\r\n          rotation &&\r\n          !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\r\n        ) {\r\n          continue;\r\n        }\r\n        const tile = this.getTile(z, x, y, frameState);\r\n        if (this.isDrawableTile(tile)) {\r\n          const uid = getUid(this);\r\n          if (tile.getState() == TileState.LOADED) {\r\n            tilesToDrawByZ[z][tile.tileCoord.toString()] = tile;\r\n            let inTransition = tile.inTransition(uid);\r\n            if (inTransition && layerState.opacity !== 1) {\r\n              // Skipping transition when layer is not fully opaque avoids visual artifacts.\r\n              tile.endTransition(uid);\r\n              inTransition = false;\r\n            }\r\n            if (\r\n              !this.newTiles_ &&\r\n              (inTransition || !this.renderedTiles.includes(tile))\r\n            ) {\r\n              this.newTiles_ = true;\r\n            }\r\n          }\r\n          if (tile.getAlpha(uid, frameState.time) === 1) {\r\n            // don't look for alt tiles if alpha is 1\r\n            continue;\r\n          }\r\n        }\r\n\r\n        const childTileRange = tileGrid.getTileCoordChildTileRange(\r\n          tile.tileCoord,\r\n          tmpTileRange,\r\n          tmpExtent\r\n        );\r\n\r\n        let covered = false;\r\n        if (childTileRange) {\r\n          covered = findLoadedTiles(z + 1, childTileRange);\r\n        }\r\n        if (!covered) {\r\n          tileGrid.forEachTileCoordParentTileRange(\r\n            tile.tileCoord,\r\n            findLoadedTiles,\r\n            tmpTileRange,\r\n            tmpExtent\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    const canvasScale =\r\n      ((tileResolution / viewResolution) * pixelRatio) / tilePixelRatio;\r\n\r\n    // set forward and inverse pixel transforms\r\n    composeTransform(\r\n      this.pixelTransform,\r\n      frameState.size[0] / 2,\r\n      frameState.size[1] / 2,\r\n      1 / pixelRatio,\r\n      1 / pixelRatio,\r\n      rotation,\r\n      -width / 2,\r\n      -height / 2\r\n    );\r\n\r\n    const canvasTransform = toTransformString(this.pixelTransform);\r\n\r\n    this.useContainer(target, canvasTransform, this.getBackground(frameState));\r\n    const context = this.context;\r\n    const canvas = context.canvas;\r\n\r\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\r\n\r\n    // set scale transform for calculating tile positions on the canvas\r\n    composeTransform(\r\n      this.tempTransform,\r\n      width / 2,\r\n      height / 2,\r\n      canvasScale,\r\n      canvasScale,\r\n      0,\r\n      -width / 2,\r\n      -height / 2\r\n    );\r\n\r\n    if (canvas.width != width || canvas.height != height) {\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n    } else if (!this.containerReused) {\r\n      context.clearRect(0, 0, width, height);\r\n    }\r\n\r\n    if (layerExtent) {\r\n      this.clipUnrotated(context, frameState, layerExtent);\r\n    }\r\n\r\n    if (!tileSource.getInterpolate()) {\r\n      context.imageSmoothingEnabled = false;\r\n    }\r\n\r\n    this.preRender(context, frameState);\r\n\r\n    this.renderedTiles.length = 0;\r\n    /** @type {Array<number>} */\r\n    let zs = Object.keys(tilesToDrawByZ).map(Number);\r\n    zs.sort(ascending);\r\n\r\n    let clips, clipZs, currentClip;\r\n    if (\r\n      layerState.opacity === 1 &&\r\n      (!this.containerReused ||\r\n        tileSource.getOpaque(frameState.viewState.projection))\r\n    ) {\r\n      zs = zs.reverse();\r\n    } else {\r\n      clips = [];\r\n      clipZs = [];\r\n    }\r\n    for (let i = zs.length - 1; i >= 0; --i) {\r\n      const currentZ = zs[i];\r\n      const currentTilePixelSize = tileSource.getTilePixelSize(\r\n        currentZ,\r\n        pixelRatio,\r\n        projection\r\n      );\r\n      const currentResolution = tileGrid.getResolution(currentZ);\r\n      const currentScale = currentResolution / tileResolution;\r\n      const dx = currentTilePixelSize[0] * currentScale * canvasScale;\r\n      const dy = currentTilePixelSize[1] * currentScale * canvasScale;\r\n      const originTileCoord = tileGrid.getTileCoordForCoordAndZ(\r\n        getTopLeft(canvasExtent),\r\n        currentZ\r\n      );\r\n      const originTileExtent = tileGrid.getTileCoordExtent(originTileCoord);\r\n      const origin = applyTransform(this.tempTransform, [\r\n        (tilePixelRatio * (originTileExtent[0] - canvasExtent[0])) /\r\n          tileResolution,\r\n        (tilePixelRatio * (canvasExtent[3] - originTileExtent[3])) /\r\n          tileResolution,\r\n      ]);\r\n      const tileGutter =\r\n        tilePixelRatio * tileSource.getGutterForProjection(projection);\r\n      const tilesToDraw = tilesToDrawByZ[currentZ];\r\n      for (const tileCoordKey in tilesToDraw) {\r\n        const tile = /** @type {import(\"../../ImageTile.js\").default} */ (\r\n          tilesToDraw[tileCoordKey]\r\n        );\r\n        const tileCoord = tile.tileCoord;\r\n\r\n        // Calculate integer positions and sizes so that tiles align\r\n        const xIndex = originTileCoord[1] - tileCoord[1];\r\n        const nextX = Math.round(origin[0] - (xIndex - 1) * dx);\r\n        const yIndex = originTileCoord[2] - tileCoord[2];\r\n        const nextY = Math.round(origin[1] - (yIndex - 1) * dy);\r\n        const x = Math.round(origin[0] - xIndex * dx);\r\n        const y = Math.round(origin[1] - yIndex * dy);\r\n        const w = nextX - x;\r\n        const h = nextY - y;\r\n        const transition = z === currentZ;\r\n\r\n        const inTransition =\r\n          transition && tile.getAlpha(getUid(this), frameState.time) !== 1;\r\n        let contextSaved = false;\r\n        if (!inTransition) {\r\n          if (clips) {\r\n            // Clip mask for regions in this tile that already filled by a higher z tile\r\n            currentClip = [x, y, x + w, y, x + w, y + h, x, y + h];\r\n            for (let i = 0, ii = clips.length; i < ii; ++i) {\r\n              if (z !== currentZ && currentZ < clipZs[i]) {\r\n                const clip = clips[i];\r\n                if (\r\n                  intersects(\r\n                    [x, y, x + w, y + h],\r\n                    [clip[0], clip[3], clip[4], clip[7]]\r\n                  )\r\n                ) {\r\n                  if (!contextSaved) {\r\n                    context.save();\r\n                    contextSaved = true;\r\n                  }\r\n                  context.beginPath();\r\n                  // counter-clockwise (outer ring) for current tile\r\n                  context.moveTo(currentClip[0], currentClip[1]);\r\n                  context.lineTo(currentClip[2], currentClip[3]);\r\n                  context.lineTo(currentClip[4], currentClip[5]);\r\n                  context.lineTo(currentClip[6], currentClip[7]);\r\n                  // clockwise (inner ring) for higher z tile\r\n                  context.moveTo(clip[6], clip[7]);\r\n                  context.lineTo(clip[4], clip[5]);\r\n                  context.lineTo(clip[2], clip[3]);\r\n                  context.lineTo(clip[0], clip[1]);\r\n                  context.clip();\r\n                }\r\n              }\r\n            }\r\n            clips.push(currentClip);\r\n            clipZs.push(currentZ);\r\n          } else {\r\n            context.clearRect(x, y, w, h);\r\n          }\r\n        }\r\n        this.drawTileImage(\r\n          tile,\r\n          frameState,\r\n          x,\r\n          y,\r\n          w,\r\n          h,\r\n          tileGutter,\r\n          transition\r\n        );\r\n        if (clips && !inTransition) {\r\n          if (contextSaved) {\r\n            context.restore();\r\n          }\r\n          this.renderedTiles.unshift(tile);\r\n        } else {\r\n          this.renderedTiles.push(tile);\r\n        }\r\n        this.updateUsedTiles(frameState.usedTiles, tileSource, tile);\r\n      }\r\n    }\r\n\r\n    this.renderedRevision = sourceRevision;\r\n    this.renderedResolution = tileResolution;\r\n    this.extentChanged =\r\n      !this.renderedExtent_ || !equals(this.renderedExtent_, canvasExtent);\r\n    this.renderedExtent_ = canvasExtent;\r\n    this.renderedPixelRatio = pixelRatio;\r\n    this.renderedProjection = projection;\r\n\r\n    this.manageTilePyramid(\r\n      frameState,\r\n      tileSource,\r\n      tileGrid,\r\n      pixelRatio,\r\n      projection,\r\n      extent,\r\n      z,\r\n      tileLayer.getPreload()\r\n    );\r\n    this.scheduleExpireCache(frameState, tileSource);\r\n\r\n    this.postRender(context, frameState);\r\n\r\n    if (layerState.extent) {\r\n      context.restore();\r\n    }\r\n    context.imageSmoothingEnabled = true;\r\n\r\n    if (canvasTransform !== canvas.style.transform) {\r\n      canvas.style.transform = canvasTransform;\r\n    }\r\n\r\n    return this.container;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {number} x Left of the tile.\r\n   * @param {number} y Top of the tile.\r\n   * @param {number} w Width of the tile.\r\n   * @param {number} h Height of the tile.\r\n   * @param {number} gutter Tile gutter.\r\n   * @param {boolean} transition Apply an alpha transition.\r\n   */\r\n  drawTileImage(tile, frameState, x, y, w, h, gutter, transition) {\r\n    const image = this.getTileImage(tile);\r\n    if (!image) {\r\n      return;\r\n    }\r\n    const uid = getUid(this);\r\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\r\n    const alpha =\r\n      layerState.opacity *\r\n      (transition ? tile.getAlpha(uid, frameState.time) : 1);\r\n    const alphaChanged = alpha !== this.context.globalAlpha;\r\n    if (alphaChanged) {\r\n      this.context.save();\r\n      this.context.globalAlpha = alpha;\r\n    }\r\n    this.context.drawImage(\r\n      image,\r\n      gutter,\r\n      gutter,\r\n      image.width - 2 * gutter,\r\n      image.height - 2 * gutter,\r\n      x,\r\n      y,\r\n      w,\r\n      h\r\n    );\r\n\r\n    if (alphaChanged) {\r\n      this.context.restore();\r\n    }\r\n    if (alpha !== layerState.opacity) {\r\n      frameState.animate = true;\r\n    } else if (transition) {\r\n      tile.endTransition(uid);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Image\r\n   */\r\n  getImage() {\r\n    const context = this.context;\r\n    return context ? context.canvas : null;\r\n  }\r\n\r\n  /**\r\n   * Get the image from a tile.\r\n   * @param {import(\"../../ImageTile.js\").default} tile Tile.\r\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\r\n   * @protected\r\n   */\r\n  getTileImage(tile) {\r\n    return tile.getImage();\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n   * @protected\r\n   */\r\n  scheduleExpireCache(frameState, tileSource) {\r\n    if (tileSource.canExpireCache()) {\r\n      /**\r\n       * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n       * @param {import(\"../../Map.js\").default} map Map.\r\n       * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n       */\r\n      const postRenderFunction = function (tileSource, map, frameState) {\r\n        const tileSourceKey = getUid(tileSource);\r\n        if (tileSourceKey in frameState.usedTiles) {\r\n          tileSource.expireCache(\r\n            frameState.viewState.projection,\r\n            frameState.usedTiles[tileSourceKey]\r\n          );\r\n        }\r\n      }.bind(null, tileSource);\r\n\r\n      frameState.postRenderFunctions.push(\r\n        /** @type {import(\"../../Map.js\").PostRenderFunction} */ (\r\n          postRenderFunction\r\n        )\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {!Object<string, !Object<string, boolean>>} usedTiles Used tiles.\r\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n   * @param {import('../../Tile.js').default} tile Tile.\r\n   * @protected\r\n   */\r\n  updateUsedTiles(usedTiles, tileSource, tile) {\r\n    // FIXME should we use tilesToDrawByZ instead?\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in usedTiles)) {\r\n      usedTiles[tileSourceKey] = {};\r\n    }\r\n    usedTiles[tileSourceKey][tile.getKey()] = true;\r\n  }\r\n\r\n  /**\r\n   * Manage tile pyramid.\r\n   * This function performs a number of functions related to the tiles at the\r\n   * current zoom and lower zoom levels:\r\n   * - registers idle tiles in frameState.wantedTiles so that they are not\r\n   *   discarded by the tile queue\r\n   * - enqueues missing tiles\r\n   * @param {import(\"../../Map.js\").FrameState} frameState Frame state.\r\n   * @param {import(\"../../source/Tile.js\").default} tileSource Tile source.\r\n   * @param {import(\"../../tilegrid/TileGrid.js\").default} tileGrid Tile grid.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../../proj/Projection.js\").default} projection Projection.\r\n   * @param {import(\"../../extent.js\").Extent} extent Extent.\r\n   * @param {number} currentZ Current Z.\r\n   * @param {number} preload Load low resolution tiles up to `preload` levels.\r\n   * @param {function(import(\"../../Tile.js\").default):void} [tileCallback] Tile callback.\r\n   * @protected\r\n   */\r\n  manageTilePyramid(\r\n    frameState,\r\n    tileSource,\r\n    tileGrid,\r\n    pixelRatio,\r\n    projection,\r\n    extent,\r\n    currentZ,\r\n    preload,\r\n    tileCallback\r\n  ) {\r\n    const tileSourceKey = getUid(tileSource);\r\n    if (!(tileSourceKey in frameState.wantedTiles)) {\r\n      frameState.wantedTiles[tileSourceKey] = {};\r\n    }\r\n    const wantedTiles = frameState.wantedTiles[tileSourceKey];\r\n    const tileQueue = frameState.tileQueue;\r\n    const minZoom = tileGrid.getMinZoom();\r\n    const rotation = frameState.viewState.rotation;\r\n    const viewport = rotation\r\n      ? getRotatedViewport(\r\n          frameState.viewState.center,\r\n          frameState.viewState.resolution,\r\n          rotation,\r\n          frameState.size\r\n        )\r\n      : undefined;\r\n    let tileCount = 0;\r\n    let tile, tileRange, tileResolution, x, y, z;\r\n    for (z = minZoom; z <= currentZ; ++z) {\r\n      tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z, tileRange);\r\n      tileResolution = tileGrid.getResolution(z);\r\n      for (x = tileRange.minX; x <= tileRange.maxX; ++x) {\r\n        for (y = tileRange.minY; y <= tileRange.maxY; ++y) {\r\n          if (\r\n            rotation &&\r\n            !tileGrid.tileCoordIntersectsViewport([z, x, y], viewport)\r\n          ) {\r\n            continue;\r\n          }\r\n          if (currentZ - z <= preload) {\r\n            ++tileCount;\r\n            tile = tileSource.getTile(z, x, y, pixelRatio, projection);\r\n            if (tile.getState() == TileState.IDLE) {\r\n              wantedTiles[tile.getKey()] = true;\r\n              if (!tileQueue.isKeyQueued(tile.getKey())) {\r\n                tileQueue.enqueue([\r\n                  tile,\r\n                  tileSourceKey,\r\n                  tileGrid.getTileCoordCenter(tile.tileCoord),\r\n                  tileResolution,\r\n                ]);\r\n              }\r\n            }\r\n            if (tileCallback !== undefined) {\r\n              tileCallback(tile);\r\n            }\r\n          } else {\r\n            tileSource.useTile(z, x, y, projection);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    tileSource.updateCacheSize(tileCount, projection);\r\n  }\r\n}\r\n\r\nexport default CanvasTileLayerRenderer;\r\n", "/**\r\n * @module ol/layer/Tile\r\n */\r\nimport BaseTileLayer from './BaseTile.js';\r\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\r\n\r\n/**\r\n * @classdesc\r\n * For layer sources that provide pre-rendered, tiled images in grids that are\r\n * organized by zoom levels for specific resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @template {import(\"../source/Tile.js\").default} TileSourceType\r\n * @extends BaseTileLayer<TileSourceType, CanvasTileLayerRenderer>\r\n * @api\r\n */\r\nclass TileLayer extends BaseTileLayer {\r\n  /**\r\n   * @param {import(\"./BaseTile.js\").Options<TileSourceType>} [options] Tile layer options.\r\n   */\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  createRenderer() {\r\n    return new CanvasTileLayerRenderer(this);\r\n  }\r\n}\r\n\r\nexport default TileLayer;\r\n", "/**\r\n * @module ol/ImageCanvas\r\n */\r\nimport ImageBase from './ImageBase.js';\r\nimport ImageState from './ImageState.js';\r\n\r\n/**\r\n * A function that is called to trigger asynchronous canvas drawing.  It is\r\n * called with a \"done\" callback that should be called when drawing is done.\r\n * If any error occurs during drawing, the \"done\" callback should be called with\r\n * that error.\r\n *\r\n * @typedef {function(function(Error=): void): void} Loader\r\n */\r\n\r\nclass ImageCanvas extends ImageBase {\r\n  /**\r\n   * @param {import(\"./extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {HTMLCanvasElement} canvas Canvas.\r\n   * @param {Loader} [loader] Optional loader function to\r\n   *     support asynchronous canvas drawing.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, canvas, loader) {\r\n    const state = loader !== undefined ? ImageState.IDLE : ImageState.LOADED;\r\n\r\n    super(extent, resolution, pixelRatio, state);\r\n\r\n    /**\r\n     * Optional canvas loader function.\r\n     * @type {?Loader}\r\n     * @private\r\n     */\r\n    this.loader_ = loader !== undefined ? loader : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = canvas;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Error}\r\n     */\r\n    this.error_ = null;\r\n  }\r\n\r\n  /**\r\n   * Get any error associated with asynchronous rendering.\r\n   * @return {?Error} Any error that occurred during rendering.\r\n   */\r\n  getError() {\r\n    return this.error_;\r\n  }\r\n\r\n  /**\r\n   * Handle async drawing complete.\r\n   * @param {Error} [err] Any error during drawing.\r\n   * @private\r\n   */\r\n  handleLoad_(err) {\r\n    if (err) {\r\n      this.error_ = err;\r\n      this.state = ImageState.ERROR;\r\n    } else {\r\n      this.state = ImageState.LOADED;\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE) {\r\n      this.state = ImageState.LOADING;\r\n      this.changed();\r\n      this.loader_(this.handleLoad_.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @return {HTMLCanvasElement} Canvas element.\r\n   */\r\n  getImage() {\r\n    return this.canvas_;\r\n  }\r\n}\r\n\r\nexport default ImageCanvas;\r\n", "/**\r\n * @module ol/source/Raster\r\n */\r\nimport Disposable from '../Disposable.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport ImageCanvas from '../ImageCanvas.js';\r\nimport ImageLayer from '../layer/Image.js';\r\nimport ImageSource from './Image.js';\r\nimport Source from './Source.js';\r\nimport TileLayer from '../layer/Tile.js';\r\nimport TileQueue from '../TileQueue.js';\r\nimport TileSource from './Tile.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {create as createTransform} from '../transform.js';\r\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\r\nimport {getUid} from '../util.js';\r\n\r\nlet hasImageData = true;\r\ntry {\r\n  new ImageData(10, 10);\r\n} catch (_) {\r\n  hasImageData = false;\r\n}\r\n\r\n/** @type {CanvasRenderingContext2D} */\r\nlet context;\r\n\r\n/**\r\n * @param {Uint8ClampedArray} data Image data.\r\n * @param {number} width Number of columns.\r\n * @param {number} height Number of rows.\r\n * @return {ImageData} Image data.\r\n */\r\nexport function newImageData(data, width, height) {\r\n  if (hasImageData) {\r\n    return new ImageData(data, width, height);\r\n  }\r\n\r\n  if (!context) {\r\n    context = document.createElement('canvas').getContext('2d');\r\n  }\r\n  const imageData = context.createImageData(width, height);\r\n  imageData.data.set(data);\r\n  return imageData;\r\n}\r\n\r\n/**\r\n * @typedef {Object} MinionData\r\n * @property {Array<ArrayBuffer>} buffers Array of buffers.\r\n * @property {Object} meta Operation metadata.\r\n * @property {boolean} imageOps The operation is an image operation.\r\n * @property {number} width The width of the image.\r\n * @property {number} height The height of the image.\r\n */\r\n\r\n/* istanbul ignore next */\r\n/**\r\n * Create a function for running operations.  This function is serialized for\r\n * use in a worker.\r\n * @param {function(Array, Object):*} operation The operation.\r\n * @return {function(MinionData):ArrayBuffer} A function that takes an object with\r\n * buffers, meta, imageOps, width, and height properties and returns an array\r\n * buffer.\r\n */\r\nfunction createMinion(operation) {\r\n  let workerHasImageData = true;\r\n  try {\r\n    new ImageData(10, 10);\r\n  } catch (_) {\r\n    workerHasImageData = false;\r\n  }\r\n\r\n  function newWorkerImageData(data, width, height) {\r\n    if (workerHasImageData) {\r\n      return new ImageData(data, width, height);\r\n    }\r\n    return {data: data, width: width, height: height};\r\n  }\r\n\r\n  return function (data) {\r\n    // bracket notation for minification support\r\n    const buffers = data['buffers'];\r\n    const meta = data['meta'];\r\n    const imageOps = data['imageOps'];\r\n    const width = data['width'];\r\n    const height = data['height'];\r\n\r\n    const numBuffers = buffers.length;\r\n    const numBytes = buffers[0].byteLength;\r\n\r\n    if (imageOps) {\r\n      const images = new Array(numBuffers);\r\n      for (let b = 0; b < numBuffers; ++b) {\r\n        images[b] = newWorkerImageData(\r\n          new Uint8ClampedArray(buffers[b]),\r\n          width,\r\n          height\r\n        );\r\n      }\r\n      const output = operation(images, meta).data;\r\n      return output.buffer;\r\n    }\r\n\r\n    const output = new Uint8ClampedArray(numBytes);\r\n    const arrays = new Array(numBuffers);\r\n    const pixels = new Array(numBuffers);\r\n    for (let b = 0; b < numBuffers; ++b) {\r\n      arrays[b] = new Uint8ClampedArray(buffers[b]);\r\n      pixels[b] = [0, 0, 0, 0];\r\n    }\r\n    for (let i = 0; i < numBytes; i += 4) {\r\n      for (let j = 0; j < numBuffers; ++j) {\r\n        const array = arrays[j];\r\n        pixels[j][0] = array[i];\r\n        pixels[j][1] = array[i + 1];\r\n        pixels[j][2] = array[i + 2];\r\n        pixels[j][3] = array[i + 3];\r\n      }\r\n      const pixel = operation(pixels, meta);\r\n      output[i] = pixel[0];\r\n      output[i + 1] = pixel[1];\r\n      output[i + 2] = pixel[2];\r\n      output[i + 3] = pixel[3];\r\n    }\r\n    return output.buffer;\r\n  };\r\n}\r\n\r\n/**\r\n * Create a worker for running operations.\r\n * @param {ProcessorOptions} config Processor options.\r\n * @param {function(MessageEvent): void} onMessage Called with a message event.\r\n * @return {Worker} The worker.\r\n */\r\nfunction createWorker(config, onMessage) {\r\n  const lib = Object.keys(config.lib || {}).map(function (name) {\r\n    return 'const ' + name + ' = ' + config.lib[name].toString() + ';';\r\n  });\r\n\r\n  const lines = lib.concat([\r\n    'const __minion__ = (' + createMinion.toString() + ')(',\r\n    config.operation.toString(),\r\n    ');',\r\n    'self.addEventListener(\"message\", function(event) {',\r\n    '  const buffer = __minion__(event.data);',\r\n    '  self.postMessage({buffer: buffer, meta: event.data.meta}, [buffer]);',\r\n    '});',\r\n  ]);\r\n\r\n  const worker = new Worker(\r\n    typeof Blob === 'undefined'\r\n      ? 'data:text/javascript;base64,' +\r\n        Buffer.from(lines.join('\\n'), 'binary').toString('base64')\r\n      : URL.createObjectURL(new Blob(lines, {type: 'text/javascript'}))\r\n  );\r\n  worker.addEventListener('message', onMessage);\r\n  return worker;\r\n}\r\n\r\n/**\r\n * @typedef {Object} FauxMessageEvent\r\n * @property {Object} data Message data.\r\n */\r\n\r\n/**\r\n * Create a faux worker for running operations.\r\n * @param {ProcessorOptions} config Configuration.\r\n * @param {function(FauxMessageEvent): void} onMessage Called with a message event.\r\n * @return {Object} The faux worker.\r\n */\r\nfunction createFauxWorker(config, onMessage) {\r\n  const minion = createMinion(config.operation);\r\n  let terminated = false;\r\n  return {\r\n    postMessage: function (data) {\r\n      setTimeout(function () {\r\n        if (terminated) {\r\n          return;\r\n        }\r\n        onMessage({data: {buffer: minion(data), meta: data['meta']}});\r\n      }, 0);\r\n    },\r\n    terminate: function () {\r\n      terminated = true;\r\n    },\r\n  };\r\n}\r\n\r\n/**\r\n * @typedef {function(Error, ImageData, (Object|Array<Object>)): void} JobCallback\r\n */\r\n\r\n/**\r\n * @typedef {Object} Job\r\n * @property {Object} meta Job metadata.\r\n * @property {Array<ImageData>} inputs Array of input data.\r\n * @property {JobCallback} callback Called when the job is complete.\r\n */\r\n\r\n/**\r\n * @typedef {Object} ProcessorOptions\r\n * @property {number} threads Number of workers to spawn.\r\n * @property {Operation} operation The operation.\r\n * @property {Object<string, Function>} [lib] Functions that will be made available to operations run in a worker.\r\n * @property {number} queue The number of queued jobs to allow.\r\n * @property {boolean} [imageOps=false] Pass all the image data to the operation instead of a single pixel.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A processor runs pixel or image operations in workers.\r\n */\r\nexport class Processor extends Disposable {\r\n  /**\r\n   * @param {ProcessorOptions} config Configuration.\r\n   */\r\n  constructor(config) {\r\n    super();\r\n\r\n    this._imageOps = !!config.imageOps;\r\n    let threads;\r\n    if (config.threads === 0) {\r\n      threads = 0;\r\n    } else if (this._imageOps) {\r\n      threads = 1;\r\n    } else {\r\n      threads = config.threads || 1;\r\n    }\r\n\r\n    /**\r\n     * @type {Array<Worker>}\r\n     */\r\n    const workers = new Array(threads);\r\n    if (threads) {\r\n      for (let i = 0; i < threads; ++i) {\r\n        workers[i] = createWorker(config, this._onWorkerMessage.bind(this, i));\r\n      }\r\n    } else {\r\n      workers[0] = createFauxWorker(\r\n        config,\r\n        this._onWorkerMessage.bind(this, 0)\r\n      );\r\n    }\r\n    this._workers = workers;\r\n\r\n    /**\r\n     * @type {Array<Job>}\r\n     * @private\r\n     */\r\n    this._queue = [];\r\n\r\n    this._maxQueueLength = config.queue || Infinity;\r\n    this._running = 0;\r\n\r\n    /**\r\n     * @type {Object<number, any>}\r\n     * @private\r\n     */\r\n    this._dataLookup = {};\r\n\r\n    /**\r\n     * @type {Job}\r\n     * @private\r\n     */\r\n    this._job = null;\r\n  }\r\n\r\n  /**\r\n   * Run operation on input data.\r\n   * @param {Array<ImageData>} inputs Array of image data.\r\n   * @param {Object} meta A user data object.  This is passed to all operations\r\n   *     and must be serializable.\r\n   * @param {function(Error, ImageData, Object): void} callback Called when work\r\n   *     completes.  The first argument is any error.  The second is the ImageData\r\n   *     generated by operations.  The third is the user data object.\r\n   */\r\n  process(inputs, meta, callback) {\r\n    this._enqueue({\r\n      inputs: inputs,\r\n      meta: meta,\r\n      callback: callback,\r\n    });\r\n    this._dispatch();\r\n  }\r\n\r\n  /**\r\n   * Add a job to the queue.\r\n   * @param {Job} job The job.\r\n   */\r\n  _enqueue(job) {\r\n    this._queue.push(job);\r\n    while (this._queue.length > this._maxQueueLength) {\r\n      this._queue.shift().callback(null, null);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dispatch a job.\r\n   */\r\n  _dispatch() {\r\n    if (this._running || this._queue.length === 0) {\r\n      return;\r\n    }\r\n\r\n    const job = this._queue.shift();\r\n    this._job = job;\r\n    const width = job.inputs[0].width;\r\n    const height = job.inputs[0].height;\r\n    const buffers = job.inputs.map(function (input) {\r\n      return input.data.buffer;\r\n    });\r\n    const threads = this._workers.length;\r\n    this._running = threads;\r\n    if (threads === 1) {\r\n      this._workers[0].postMessage(\r\n        {\r\n          buffers: buffers,\r\n          meta: job.meta,\r\n          imageOps: this._imageOps,\r\n          width: width,\r\n          height: height,\r\n        },\r\n        buffers\r\n      );\r\n      return;\r\n    }\r\n\r\n    const length = job.inputs[0].data.length;\r\n    const segmentLength = 4 * Math.ceil(length / 4 / threads);\r\n    for (let i = 0; i < threads; ++i) {\r\n      const offset = i * segmentLength;\r\n      const slices = [];\r\n      for (let j = 0, jj = buffers.length; j < jj; ++j) {\r\n        slices.push(buffers[j].slice(offset, offset + segmentLength));\r\n      }\r\n      this._workers[i].postMessage(\r\n        {\r\n          buffers: slices,\r\n          meta: job.meta,\r\n          imageOps: this._imageOps,\r\n          width: width,\r\n          height: height,\r\n        },\r\n        slices\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle messages from the worker.\r\n   * @param {number} index The worker index.\r\n   * @param {MessageEvent} event The message event.\r\n   */\r\n  _onWorkerMessage(index, event) {\r\n    if (this.disposed) {\r\n      return;\r\n    }\r\n    this._dataLookup[index] = event.data;\r\n    --this._running;\r\n    if (this._running === 0) {\r\n      this._resolveJob();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resolve a job.  If there are no more worker threads, the processor callback\r\n   * will be called.\r\n   */\r\n  _resolveJob() {\r\n    const job = this._job;\r\n    const threads = this._workers.length;\r\n    let data, meta;\r\n    if (threads === 1) {\r\n      data = new Uint8ClampedArray(this._dataLookup[0]['buffer']);\r\n      meta = this._dataLookup[0]['meta'];\r\n    } else {\r\n      const length = job.inputs[0].data.length;\r\n      data = new Uint8ClampedArray(length);\r\n      meta = new Array(threads);\r\n      const segmentLength = 4 * Math.ceil(length / 4 / threads);\r\n      for (let i = 0; i < threads; ++i) {\r\n        const buffer = this._dataLookup[i]['buffer'];\r\n        const offset = i * segmentLength;\r\n        data.set(new Uint8ClampedArray(buffer), offset);\r\n        meta[i] = this._dataLookup[i]['meta'];\r\n      }\r\n    }\r\n    this._job = null;\r\n    this._dataLookup = {};\r\n    job.callback(\r\n      null,\r\n      newImageData(data, job.inputs[0].width, job.inputs[0].height),\r\n      meta\r\n    );\r\n    this._dispatch();\r\n  }\r\n\r\n  /**\r\n   * Terminate all workers associated with the processor.\r\n   */\r\n  disposeInternal() {\r\n    for (let i = 0; i < this._workers.length; ++i) {\r\n      this._workers[i].terminate();\r\n    }\r\n    this._workers.length = 0;\r\n  }\r\n}\r\n\r\n/**\r\n * A function that takes an array of input data, performs some operation, and\r\n * returns an array of output data.\r\n * For `pixel` type operations, the function will be called with an array of\r\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\r\n * range of 0 - 255. It should return a single pixel array.\r\n * For `'image'` type operations, functions will be called with an array of\r\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData)\r\n * and should return a single\r\n * [ImageData](https://developer.mozilla.org/en-US/docs/Web/API/ImageData).\r\n * The operations\r\n * are called with a second \"data\" argument, which can be used for storage.  The\r\n * data object is accessible from raster events, where it can be initialized in\r\n * \"beforeoperations\" and accessed again in \"afteroperations\".\r\n *\r\n * @typedef {function((Array<Array<number>>|Array<ImageData>), Object):\r\n *     (Array<number>|ImageData)} Operation\r\n */\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst RasterEventType = {\r\n  /**\r\n   * Triggered before operations are run.  Listeners will receive an event object with\r\n   * a `data` property that can be used to make data available to operations.\r\n   * @event module:ol/source/Raster.RasterSourceEvent#beforeoperations\r\n   * @api\r\n   */\r\n  BEFOREOPERATIONS: 'beforeoperations',\r\n\r\n  /**\r\n   * Triggered after operations are run.  Listeners will receive an event object with\r\n   * a `data` property.  If more than one thread is used, `data` will be an array of\r\n   * objects.  If a single thread is used, `data` will be a single object.\r\n   * @event module:ol/source/Raster.RasterSourceEvent#afteroperations\r\n   * @api\r\n   */\r\n  AFTEROPERATIONS: 'afteroperations',\r\n};\r\n\r\n/**\r\n * @typedef {'pixel' | 'image'} RasterOperationType\r\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\r\n */\r\n\r\n/**\r\n * @typedef {import(\"./Image.js\").ImageSourceEventTypes|'beforeoperations'|'afteroperations'} RasterSourceEventTypes\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Raster~RasterSource} instances are instances of this\r\n * type.\r\n */\r\nexport class RasterSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\r\n   * @param {Object|Array<Object>} data An object made available to operations.  For \"afteroperations\" evenets\r\n   * this will be an array of objects if more than one thread is used.\r\n   */\r\n  constructor(type, frameState, data) {\r\n    super(type);\r\n\r\n    /**\r\n     * The raster extent.\r\n     * @type {import(\"../extent.js\").Extent}\r\n     * @api\r\n     */\r\n    this.extent = frameState.extent;\r\n\r\n    /**\r\n     * The pixel resolution (map units per pixel).\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\r\n\r\n    /**\r\n     * An object made available to all operations.  This can be used by operations\r\n     * as a storage object (e.g. for calculating statistics).\r\n     * @type {Object}\r\n     * @api\r\n     */\r\n    this.data = data;\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources Input\r\n * sources or layers.  For vector data, use an VectorImage layer.\r\n * @property {Operation} [operation] Raster operation.\r\n * The operation will be called with data from input sources\r\n * and the output will be assigned to the raster source.\r\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\r\n * @property {number} [threads] By default, operations will be run in a single worker thread.\r\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\r\n * be run in multiple worker threads.  Note that there is additional overhead in\r\n * transferring data to multiple workers, and that depending on the user's\r\n * system, it may not be possible to parallelize the work.\r\n * @property {RasterOperationType} [operationType='pixel'] Operation type.\r\n * Supported values are `'pixel'` and `'image'`.  By default,\r\n * `'pixel'` operations are assumed, and operations will be called with an\r\n * array of pixels from input sources.  If set to `'image'`, operations will\r\n * be called with an array of ImageData objects from input sources.\r\n * @property {Array<number>|null} [resolutions] Resolutions. If specified, raster operations will only\r\n * be run at the given resolutions.  By default, the resolutions of the first source with resolutions\r\n * specified will be used, if any. Set to `null` to use any view resolution instead.\r\n */\r\n\r\n/***\r\n * @template Return\r\n * @typedef {import(\"../Observable\").OnSignature<import(\"../Observable\").EventTypes, import(\"../events/Event.js\").default, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"../ObjectEventType\").Types, import(\"../Object\").ObjectEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<import(\"./Image.js\").ImageSourceEventTypes, import(\"./Image.js\").ImageSourceEvent, Return> &\r\n *   import(\"../Observable\").OnSignature<RasterSourceEventTypes, RasterSourceEvent, Return> &\r\n *   import(\"../Observable\").CombinedOnSignature<import(\"../Observable\").EventTypes|import(\"../ObjectEventType\").Types\r\n *     |RasterSourceEventTypes, Return>} RasterSourceOnSignature\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * A source that transforms data from any number of input sources using an\r\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\r\n * output pixel values.\r\n *\r\n * @fires module:ol/source/Raster.RasterSourceEvent\r\n * @api\r\n */\r\nclass RasterSource extends ImageSource {\r\n  /**\r\n   * @param {Options} options Options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      projection: null,\r\n    });\r\n\r\n    /***\r\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.on;\r\n\r\n    /***\r\n     * @type {RasterSourceOnSignature<import(\"../events\").EventsKey>}\r\n     */\r\n    this.once;\r\n\r\n    /***\r\n     * @type {RasterSourceOnSignature<void>}\r\n     */\r\n    this.un;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Processor}\r\n     */\r\n    this.processor_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {RasterOperationType}\r\n     */\r\n    this.operationType_ =\r\n      options.operationType !== undefined ? options.operationType : 'pixel';\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array<import(\"../layer/Layer.js\").default>}\r\n     */\r\n    this.layers_ = createLayers(options.sources);\r\n\r\n    const changed = this.changed.bind(this);\r\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\r\n      this.layers_[i].addEventListener(EventType.CHANGE, changed);\r\n    }\r\n\r\n    /** @type {boolean} */\r\n    this.useResolutions_ = options.resolutions !== null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../TileQueue.js\").default}\r\n     */\r\n    this.tileQueue_ = new TileQueue(function () {\r\n      return 1;\r\n    }, this.changed.bind(this));\r\n\r\n    /**\r\n     * The most recently requested frame state.\r\n     * @type {import(\"../Map.js\").FrameState}\r\n     * @private\r\n     */\r\n    this.requestedFrameState_;\r\n\r\n    /**\r\n     * The most recently rendered image canvas.\r\n     * @type {import(\"../ImageCanvas.js\").default}\r\n     * @private\r\n     */\r\n    this.renderedImageCanvas_ = null;\r\n\r\n    /**\r\n     * The most recently rendered revision.\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../Map.js\").FrameState}\r\n     */\r\n    this.frameState_ = {\r\n      animate: false,\r\n      coordinateToPixelTransform: createTransform(),\r\n      declutterTree: null,\r\n      extent: null,\r\n      index: 0,\r\n      layerIndex: 0,\r\n      layerStatesArray: getLayerStatesArray(this.layers_),\r\n      pixelRatio: 1,\r\n      pixelToCoordinateTransform: createTransform(),\r\n      postRenderFunctions: [],\r\n      size: [0, 0],\r\n      tileQueue: this.tileQueue_,\r\n      time: Date.now(),\r\n      usedTiles: {},\r\n      viewState: /** @type {import(\"../View.js\").State} */ ({\r\n        rotation: 0,\r\n      }),\r\n      viewHints: [],\r\n      wantedTiles: {},\r\n      mapId: getUid(this),\r\n      renderTargets: {},\r\n    };\r\n\r\n    this.setAttributions(function (frameState) {\r\n      const attributions = [];\r\n      for (\r\n        let index = 0, iMax = options.sources.length;\r\n        index < iMax;\r\n        ++index\r\n      ) {\r\n        const sourceOrLayer = options.sources[index];\r\n        const source =\r\n          sourceOrLayer instanceof Source\r\n            ? sourceOrLayer\r\n            : sourceOrLayer.getSource();\r\n        if (!source) {\r\n          continue;\r\n        }\r\n        const attributionGetter = source.getAttributions();\r\n        if (typeof attributionGetter === 'function') {\r\n          const sourceAttribution = attributionGetter(frameState);\r\n          attributions.push.apply(attributions, sourceAttribution);\r\n        }\r\n      }\r\n      return attributions.length !== 0 ? attributions : null;\r\n    });\r\n\r\n    if (options.operation !== undefined) {\r\n      this.setOperation(options.operation, options.lib);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the operation.\r\n   * @param {Operation} operation New operation.\r\n   * @param {Object} [lib] Functions that will be available to operations run\r\n   *     in a worker.\r\n   * @api\r\n   */\r\n  setOperation(operation, lib) {\r\n    if (this.processor_) {\r\n      this.processor_.dispose();\r\n    }\r\n\r\n    this.processor_ = new Processor({\r\n      operation: operation,\r\n      imageOps: this.operationType_ === 'image',\r\n      queue: 1,\r\n      lib: lib,\r\n      threads: this.threads_,\r\n    });\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Update the stored frame state.\r\n   * @param {import(\"../extent.js\").Extent} extent The view extent (in map units).\r\n   * @param {number} resolution The view resolution.\r\n   * @param {import(\"../proj/Projection.js\").default} projection The view projection.\r\n   * @return {import(\"../Map.js\").FrameState} The updated frame state.\r\n   * @private\r\n   */\r\n  updateFrameState_(extent, resolution, projection) {\r\n    const frameState = /** @type {import(\"../Map.js\").FrameState} */ (\r\n      Object.assign({}, this.frameState_)\r\n    );\r\n\r\n    frameState.viewState = /** @type {import(\"../View.js\").State} */ (\r\n      Object.assign({}, frameState.viewState)\r\n    );\r\n\r\n    const center = getCenter(extent);\r\n\r\n    frameState.size[0] = Math.ceil(getWidth(extent) / resolution);\r\n    frameState.size[1] = Math.ceil(getHeight(extent) / resolution);\r\n    frameState.extent = [\r\n      center[0] - (frameState.size[0] * resolution) / 2,\r\n      center[1] - (frameState.size[1] * resolution) / 2,\r\n      center[0] + (frameState.size[0] * resolution) / 2,\r\n      center[1] + (frameState.size[1] * resolution) / 2,\r\n    ];\r\n    frameState.time = Date.now();\r\n\r\n    const viewState = frameState.viewState;\r\n    viewState.center = center;\r\n    viewState.projection = projection;\r\n    viewState.resolution = resolution;\r\n    return frameState;\r\n  }\r\n\r\n  /**\r\n   * Determine if all sources are ready.\r\n   * @return {boolean} All sources are ready.\r\n   * @private\r\n   */\r\n  allSourcesReady_() {\r\n    let ready = true;\r\n    let source;\r\n    for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\r\n      source = this.layers_[i].getSource();\r\n      if (!source || source.getState() !== 'ready') {\r\n        ready = false;\r\n        break;\r\n      }\r\n    }\r\n    return ready;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../extent.js\").Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\r\n   */\r\n  getImage(extent, resolution, pixelRatio, projection) {\r\n    if (!this.allSourcesReady_()) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n    const frameState = this.updateFrameState_(extent, resolution, projection);\r\n    this.requestedFrameState_ = frameState;\r\n\r\n    // check if we can't reuse the existing ol/ImageCanvas\r\n    if (this.renderedImageCanvas_) {\r\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\r\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\r\n      if (\r\n        resolution !== renderedResolution ||\r\n        !equals(frameState.extent, renderedExtent)\r\n      ) {\r\n        this.renderedImageCanvas_ = null;\r\n      }\r\n    }\r\n\r\n    if (\r\n      !this.renderedImageCanvas_ ||\r\n      this.getRevision() !== this.renderedRevision_\r\n    ) {\r\n      this.processSources_();\r\n    }\r\n\r\n    frameState.tileQueue.loadMoreTiles(16, 16);\r\n\r\n    if (frameState.animate) {\r\n      requestAnimationFrame(this.changed.bind(this));\r\n    }\r\n\r\n    return this.renderedImageCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Start processing source data.\r\n   * @private\r\n   */\r\n  processSources_() {\r\n    const frameState = this.requestedFrameState_;\r\n    const len = this.layers_.length;\r\n    const imageDatas = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      frameState.layerIndex = i;\r\n      frameState.renderTargets = {};\r\n      const imageData = getImageData(this.layers_[i], frameState);\r\n      if (imageData) {\r\n        imageDatas[i] = imageData;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const data = {};\r\n    this.dispatchEvent(\r\n      new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data)\r\n    );\r\n    this.processor_.process(\r\n      imageDatas,\r\n      data,\r\n      this.onWorkerComplete_.bind(this, frameState)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Called when pixel processing is complete.\r\n   * @param {import(\"../Map.js\").FrameState} frameState The frame state.\r\n   * @param {Error} err Any error during processing.\r\n   * @param {ImageData} output The output image data.\r\n   * @param {Object|Array<Object>} data The user data (or an array if more than one thread).\r\n   * @private\r\n   */\r\n  onWorkerComplete_(frameState, err, output, data) {\r\n    if (err || !output) {\r\n      return;\r\n    }\r\n\r\n    // do nothing if extent or resolution changed\r\n    const extent = frameState.extent;\r\n    const resolution = frameState.viewState.resolution;\r\n    if (\r\n      resolution !== this.requestedFrameState_.viewState.resolution ||\r\n      !equals(extent, this.requestedFrameState_.extent)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let context;\r\n    if (this.renderedImageCanvas_) {\r\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\r\n    } else {\r\n      const width = Math.round(getWidth(extent) / resolution);\r\n      const height = Math.round(getHeight(extent) / resolution);\r\n      context = createCanvasContext2D(width, height);\r\n      this.renderedImageCanvas_ = new ImageCanvas(\r\n        extent,\r\n        resolution,\r\n        1,\r\n        context.canvas\r\n      );\r\n    }\r\n    context.putImageData(output, 0, 0);\r\n\r\n    this.changed();\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.dispatchEvent(\r\n      new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data)\r\n    );\r\n    if (frameState.animate) {\r\n      requestAnimationFrame(this.changed.bind(this));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection\").default} [projection] Projection.\r\n   * @return {Array<number>|null} Resolutions.\r\n   */\r\n  getResolutions(projection) {\r\n    if (!this.useResolutions_) {\r\n      return null;\r\n    }\r\n    let resolutions = super.getResolutions();\r\n    if (!resolutions) {\r\n      for (let i = 0, ii = this.layers_.length; i < ii; ++i) {\r\n        const source = this.layers_[i].getSource();\r\n        resolutions = source.getResolutions(projection);\r\n        if (resolutions) {\r\n          break;\r\n        }\r\n      }\r\n    }\r\n    return resolutions;\r\n  }\r\n\r\n  disposeInternal() {\r\n    if (this.processor_) {\r\n      this.processor_.dispose();\r\n    }\r\n    super.disposeInternal();\r\n  }\r\n}\r\n\r\n/**\r\n * Clean up and unregister the worker.\r\n * @function\r\n * @api\r\n */\r\nRasterSource.prototype.dispose;\r\n\r\n/**\r\n * A reusable canvas context.\r\n * @type {CanvasRenderingContext2D}\r\n * @private\r\n */\r\nlet sharedContext = null;\r\n\r\n/**\r\n * Get image data from a layer.\r\n * @param {import(\"../layer/Layer.js\").default} layer Layer to render.\r\n * @param {import(\"../Map.js\").FrameState} frameState The frame state.\r\n * @return {ImageData} The image data.\r\n */\r\nfunction getImageData(layer, frameState) {\r\n  const renderer = layer.getRenderer();\r\n  if (!renderer) {\r\n    throw new Error('Unsupported layer type: ' + layer);\r\n  }\r\n\r\n  if (!renderer.prepareFrame(frameState)) {\r\n    return null;\r\n  }\r\n  const width = frameState.size[0];\r\n  const height = frameState.size[1];\r\n  if (width === 0 || height === 0) {\r\n    return null;\r\n  }\r\n  const container = renderer.renderFrame(frameState, null);\r\n  let element;\r\n  if (container instanceof HTMLCanvasElement) {\r\n    element = container;\r\n  } else {\r\n    if (container) {\r\n      element = container.firstElementChild;\r\n    }\r\n    if (!(element instanceof HTMLCanvasElement)) {\r\n      throw new Error('Unsupported rendered element: ' + element);\r\n    }\r\n    if (element.width === width && element.height === height) {\r\n      const context = element.getContext('2d');\r\n      return context.getImageData(0, 0, width, height);\r\n    }\r\n  }\r\n\r\n  if (!sharedContext) {\r\n    sharedContext = createCanvasContext2D(width, height, undefined, {\r\n      willReadFrequently: true,\r\n    });\r\n  } else {\r\n    const canvas = sharedContext.canvas;\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n      sharedContext = createCanvasContext2D(width, height, undefined, {\r\n        willReadFrequently: true,\r\n      });\r\n    } else {\r\n      sharedContext.clearRect(0, 0, width, height);\r\n    }\r\n  }\r\n  sharedContext.drawImage(element, 0, 0, width, height);\r\n  return sharedContext.getImageData(0, 0, width, height);\r\n}\r\n\r\n/**\r\n * Get a list of layer states from a list of layers.\r\n * @param {Array<import(\"../layer/Layer.js\").default>} layers Layers.\r\n * @return {Array<import(\"../layer/Layer.js\").State>} The layer states.\r\n */\r\nfunction getLayerStatesArray(layers) {\r\n  return layers.map(function (layer) {\r\n    return layer.getLayerState();\r\n  });\r\n}\r\n\r\n/**\r\n * Create layers for all sources.\r\n * @param {Array<import(\"./Source.js\").default|import(\"../layer/Layer.js\").default>} sources The sources.\r\n * @return {Array<import(\"../layer/Layer.js\").default>} Array of layers.\r\n */\r\nfunction createLayers(sources) {\r\n  const len = sources.length;\r\n  const layers = new Array(len);\r\n  for (let i = 0; i < len; ++i) {\r\n    layers[i] = createLayer(sources[i]);\r\n  }\r\n  return layers;\r\n}\r\n\r\n/**\r\n * Create a layer for the provided source.\r\n * @param {import(\"./Source.js\").default|import(\"../layer/Layer.js\").default} layerOrSource The layer or source.\r\n * @return {import(\"../layer/Layer.js\").default} The layer.\r\n */\r\nfunction createLayer(layerOrSource) {\r\n  // @type {import(\"../layer/Layer.js\").default}\r\n  let layer;\r\n  if (layerOrSource instanceof Source) {\r\n    if (layerOrSource instanceof TileSource) {\r\n      layer = new TileLayer({source: layerOrSource});\r\n    } else if (layerOrSource instanceof ImageSource) {\r\n      layer = new ImageLayer({source: layerOrSource});\r\n    }\r\n  } else {\r\n    layer = layerOrSource;\r\n  }\r\n  return layer;\r\n}\r\n\r\nexport default RasterSource;\r\n", "/**\r\n * @module ol/source/TileImage\r\n */\r\nimport EventType from '../events/EventType.js';\r\nimport ImageTile from '../ImageTile.js';\r\nimport ReprojTile from '../reproj/Tile.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileState from '../TileState.js';\r\nimport UrlTile from './UrlTile.js';\r\nimport {equivalent, get as getProjection} from '../proj.js';\r\nimport {getKey, getKeyZXY} from '../tilecoord.js';\r\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\r\nimport {getUid} from '../util.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {boolean} [opaque=false] Whether the layer is opaque.\r\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {import(\"./Source.js\").State} [state] Source state.\r\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\r\n * service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {Array<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\r\n * request out-of-bounds tiles from the server. When set to `false`, only one\r\n * world will be rendered. When set to `true`, tiles will be requested for one\r\n * world only, but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {string} [key] Optional tile key for proper cache fetching\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Base class for sources providing images divided into a tile grid.\r\n *\r\n * @fires import(\"./Tile.js\").TileSourceEvent\r\n * @api\r\n */\r\nclass TileImage extends UrlTile {\r\n  /**\r\n   * @param {!Options} options Image tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      opaque: options.opaque,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction\r\n        ? options.tileLoadFunction\r\n        : defaultTileLoadFunction,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      tileUrlFunction: options.tileUrlFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition,\r\n      interpolate:\r\n        options.interpolate !== undefined ? options.interpolate : true,\r\n      key: options.key,\r\n      attributionsCollapsible: options.attributionsCollapsible,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin =\r\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {typeof ImageTile}\r\n     */\r\n    this.tileClass =\r\n      options.tileClass !== undefined ? options.tileClass : ImageTile;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Object<string, TileCache>}\r\n     */\r\n    this.tileCacheForProjection = {};\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Object<string, import(\"../tilegrid/TileGrid.js\").default>}\r\n     */\r\n    this.tileGridForProjection = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderReprojectionEdges_ = false;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Can expire cache.\r\n   */\r\n  canExpireCache() {\r\n    if (this.tileCache.canExpireCache()) {\r\n      return true;\r\n    }\r\n    for (const key in this.tileCacheForProjection) {\r\n      if (this.tileCacheForProjection[key].canExpireCache()) {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {!Object<string, boolean>} usedTiles Used tiles.\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    const usedTileCache = this.getTileCacheForProjection(projection);\r\n\r\n    this.tileCache.expireCache(\r\n      this.tileCache == usedTileCache ? usedTiles : {}\r\n    );\r\n    for (const id in this.tileCacheForProjection) {\r\n      const tileCache = this.tileCacheForProjection[id];\r\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterForProjection(projection) {\r\n    if (\r\n      this.getProjection() &&\r\n      projection &&\r\n      !equivalent(this.getProjection(), projection)\r\n    ) {\r\n      return 0;\r\n    }\r\n    return this.getGutter();\r\n  }\r\n\r\n  /**\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutter() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Return the key to be used for all tiles in the source.\r\n   * @return {string} The key for all tiles.\r\n   */\r\n  getKey() {\r\n    let key = super.getKey();\r\n    if (!this.getInterpolate()) {\r\n      key += ':disable-interpolation';\r\n    }\r\n    return key;\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {boolean} Opaque.\r\n   */\r\n  getOpaque(projection) {\r\n    if (\r\n      this.getProjection() &&\r\n      projection &&\r\n      !equivalent(this.getProjection(), projection)\r\n    ) {\r\n      return false;\r\n    }\r\n    return super.getOpaque(projection);\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!import(\"../tilegrid/TileGrid.js\").default} Tile grid.\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\r\n      return this.tileGrid;\r\n    }\r\n    const projKey = getUid(projection);\r\n    if (!(projKey in this.tileGridForProjection)) {\r\n      this.tileGridForProjection[projKey] =\r\n        getTileGridForProjection(projection);\r\n    }\r\n    return this.tileGridForProjection[projKey];\r\n  }\r\n\r\n  /**\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {import(\"../TileCache.js\").default} Tile cache.\r\n   */\r\n  getTileCacheForProjection(projection) {\r\n    const thisProj = this.getProjection();\r\n    if (!thisProj || equivalent(thisProj, projection)) {\r\n      return this.tileCache;\r\n    }\r\n    const projKey = getUid(projection);\r\n    if (!(projKey in this.tileCacheForProjection)) {\r\n      this.tileCacheForProjection[projKey] = new TileCache(\r\n        this.tileCache.highWaterMark\r\n      );\r\n    }\r\n    return this.tileCacheForProjection[projKey];\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @param {string} key The key set on the tile.\r\n   * @return {!ImageTile} Tile.\r\n   * @private\r\n   */\r\n  createTile_(z, x, y, pixelRatio, projection, key) {\r\n    const tileCoord = [z, x, y];\r\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection\r\n    );\r\n    const tileUrl = urlTileCoord\r\n      ? this.tileUrlFunction(urlTileCoord, pixelRatio, projection)\r\n      : undefined;\r\n    const tile = new this.tileClass(\r\n      tileCoord,\r\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\r\n      tileUrl !== undefined ? tileUrl : '',\r\n      this.crossOrigin,\r\n      this.tileLoadFunction,\r\n      this.tileOptions\r\n    );\r\n    tile.key = key;\r\n    tile.addEventListener(EventType.CHANGE, this.handleTileChange.bind(this));\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!(ImageTile|ReprojTile)} Tile.\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (\r\n      !sourceProjection ||\r\n      !projection ||\r\n      equivalent(sourceProjection, projection)\r\n    ) {\r\n      return this.getTileInternal(\r\n        z,\r\n        x,\r\n        y,\r\n        pixelRatio,\r\n        sourceProjection || projection\r\n      );\r\n    }\r\n    const cache = this.getTileCacheForProjection(projection);\r\n    const tileCoord = [z, x, y];\r\n    let tile;\r\n    const tileCoordKey = getKey(tileCoord);\r\n    if (cache.containsKey(tileCoordKey)) {\r\n      tile = cache.get(tileCoordKey);\r\n    }\r\n    const key = this.getKey();\r\n    if (tile && tile.key == key) {\r\n      return tile;\r\n    }\r\n    const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\r\n    const targetTileGrid = this.getTileGridForProjection(projection);\r\n    const wrappedTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord,\r\n      projection\r\n    );\r\n    const newTile = new ReprojTile(\r\n      sourceProjection,\r\n      sourceTileGrid,\r\n      projection,\r\n      targetTileGrid,\r\n      tileCoord,\r\n      wrappedTileCoord,\r\n      this.getTilePixelRatio(pixelRatio),\r\n      this.getGutter(),\r\n      (z, x, y, pixelRatio) =>\r\n        this.getTileInternal(z, x, y, pixelRatio, sourceProjection),\r\n      this.reprojectionErrorThreshold_,\r\n      this.renderReprojectionEdges_,\r\n      this.getInterpolate()\r\n    );\r\n    newTile.key = key;\r\n\r\n    if (tile) {\r\n      newTile.interimTile = tile;\r\n      newTile.refreshInterimChain();\r\n      cache.replace(tileCoordKey, newTile);\r\n    } else {\r\n      cache.set(tileCoordKey, newTile);\r\n    }\r\n    return newTile;\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {!import(\"../proj/Projection.js\").default} projection Projection.\r\n   * @return {!ImageTile} Tile.\r\n   * @protected\r\n   */\r\n  getTileInternal(z, x, y, pixelRatio, projection) {\r\n    let tile = null;\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    const key = this.getKey();\r\n    if (!this.tileCache.containsKey(tileCoordKey)) {\r\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\r\n      this.tileCache.set(tileCoordKey, tile);\r\n    } else {\r\n      tile = this.tileCache.get(tileCoordKey);\r\n      if (tile.key != key) {\r\n        // The source's params changed. If the tile has an interim tile and if we\r\n        // can use it then we use it. Otherwise we create a new tile.  In both\r\n        // cases we attempt to assign an interim tile to the new tile.\r\n        const interimTile = tile;\r\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\r\n\r\n        //make the new tile the head of the list,\r\n        if (interimTile.getState() == TileState.IDLE) {\r\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\r\n          tile.interimTile = interimTile.interimTile;\r\n        } else {\r\n          tile.interimTile = interimTile;\r\n        }\r\n        tile.refreshInterimChain();\r\n        this.tileCache.replace(tileCoordKey, tile);\r\n      }\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * Sets whether to render reprojection edges or not (usually for debugging).\r\n   * @param {boolean} render Render the edges.\r\n   * @api\r\n   */\r\n  setRenderReprojectionEdges(render) {\r\n    if (this.renderReprojectionEdges_ == render) {\r\n      return;\r\n    }\r\n    this.renderReprojectionEdges_ = render;\r\n    for (const id in this.tileCacheForProjection) {\r\n      this.tileCacheForProjection[id].clear();\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\r\n   * @param {import(\"../tilegrid/TileGrid.js\").default} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */\r\n  setTileGridForProjection(projection, tilegrid) {\r\n    const proj = getProjection(projection);\r\n    if (proj) {\r\n      const projKey = getUid(proj);\r\n      if (!(projKey in this.tileGridForProjection)) {\r\n        this.tileGridForProjection[projKey] = tilegrid;\r\n      }\r\n    }\r\n  }\r\n\r\n  clear() {\r\n    super.clear();\r\n    for (const id in this.tileCacheForProjection) {\r\n      this.tileCacheForProjection[id].clear();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * @param {ImageTile} imageTile Image tile.\r\n * @param {string} src Source.\r\n */\r\nfunction defaultTileLoadFunction(imageTile, src) {\r\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (imageTile.getImage()).src =\r\n    src;\r\n}\r\n\r\nexport default TileImage;\r\n", "/**\r\n * @module ol/net\r\n */\r\nimport {getUid} from './util.js';\r\n\r\n/**\r\n * Simple JSONP helper. Supports error callbacks and a custom callback param.\r\n * The error callback will be called when no JSONP is executed after 10 seconds.\r\n *\r\n * @param {string} url Request url. A 'callback' query parameter will be\r\n *     appended.\r\n * @param {Function} callback Callback on success.\r\n * @param {Function} [errback] Callback on error.\r\n * @param {string} [callbackParam] Custom query parameter for the JSONP\r\n *     callback. Default is 'callback'.\r\n */\r\nexport function jsonp(url, callback, errback, callbackParam) {\r\n  const script = document.createElement('script');\r\n  const key = 'olc_' + getUid(callback);\r\n  function cleanup() {\r\n    delete window[key];\r\n    script.parentNode.removeChild(script);\r\n  }\r\n  script.async = true;\r\n  script.src =\r\n    url +\r\n    (url.includes('?') ? '&' : '?') +\r\n    (callbackParam || 'callback') +\r\n    '=' +\r\n    key;\r\n  const timer = setTimeout(function () {\r\n    cleanup();\r\n    if (errback) {\r\n      errback();\r\n    }\r\n  }, 10000);\r\n  window[key] = function (data) {\r\n    clearTimeout(timer);\r\n    cleanup();\r\n    callback(data);\r\n  };\r\n  document.head.appendChild(script);\r\n}\r\n\r\nexport class ResponseError extends Error {\r\n  /**\r\n   * @param {XMLHttpRequest} response The XHR object.\r\n   */\r\n  constructor(response) {\r\n    const message = 'Unexpected response status: ' + response.status;\r\n    super(message);\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.name = 'ResponseError';\r\n\r\n    /**\r\n     * @type {XMLHttpRequest}\r\n     */\r\n    this.response = response;\r\n  }\r\n}\r\n\r\nexport class ClientError extends Error {\r\n  /**\r\n   * @param {XMLHttpRequest} client The XHR object.\r\n   */\r\n  constructor(client) {\r\n    super('Failed to issue request');\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.name = 'ClientError';\r\n\r\n    /**\r\n     * @type {XMLHttpRequest}\r\n     */\r\n    this.client = client;\r\n  }\r\n}\r\n\r\n/**\r\n * @param {string} url The URL.\r\n * @return {Promise<Object>} A promise that resolves to the JSON response.\r\n */\r\nexport function getJSON(url) {\r\n  return new Promise(function (resolve, reject) {\r\n    /**\r\n     * @param {ProgressEvent<XMLHttpRequest>} event The load event.\r\n     */\r\n    function onLoad(event) {\r\n      const client = event.target;\r\n      // status will be 0 for file:// urls\r\n      if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n        let data;\r\n        try {\r\n          data = JSON.parse(client.responseText);\r\n        } catch (err) {\r\n          const message = 'Error parsing response text as JSON: ' + err.message;\r\n          reject(new Error(message));\r\n          return;\r\n        }\r\n        resolve(data);\r\n        return;\r\n      }\r\n\r\n      reject(new ResponseError(client));\r\n    }\r\n\r\n    /**\r\n     * @param {ProgressEvent<XMLHttpRequest>} event The error event.\r\n     */\r\n    function onError(event) {\r\n      reject(new ClientError(event.target));\r\n    }\r\n\r\n    const client = new XMLHttpRequest();\r\n    client.addEventListener('load', onLoad);\r\n    client.addEventListener('error', onError);\r\n    client.open('GET', url);\r\n    client.setRequestHeader('Accept', 'application/json');\r\n    client.send();\r\n  });\r\n}\r\n\r\n/**\r\n * @param {string} base The base URL.\r\n * @param {string} url The potentially relative URL.\r\n * @return {string} The full URL.\r\n */\r\nexport function resolveUrl(base, url) {\r\n  if (url.includes('://')) {\r\n    return url;\r\n  }\r\n  return new URL(url, base).href;\r\n}\r\n\r\nlet originalXHR;\r\nexport function overrideXHR(xhr) {\r\n  if (typeof XMLHttpRequest !== 'undefined') {\r\n    originalXHR = XMLHttpRequest;\r\n  }\r\n  global.XMLHttpRequest = xhr;\r\n}\r\n\r\nexport function restoreXHR() {\r\n  global.XMLHttpRequest = originalXHR;\r\n}\r\n", "/**\r\n * @module ol/source/TileJSON\r\n */\r\n// FIXME check order of async callbacks\r\n\r\n/**\r\n * See https://mapbox.com/developers/api/.\r\n */\r\n\r\nimport TileImage from './TileImage.js';\r\nimport {applyTransform, intersects} from '../extent.js';\r\nimport {assert} from '../asserts.js';\r\nimport {createFromTemplates} from '../tileurlfunction.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\r\nimport {jsonp as requestJSONP} from '../net.js';\r\n\r\n/**\r\n * @typedef {Object} Config\r\n * @property {string} [name] The name.\r\n * @property {string} [description] The description.\r\n * @property {string} [version] The version.\r\n * @property {string} [attribution] The attribution.\r\n * @property {string} [template] The template.\r\n * @property {string} [legend] The legend.\r\n * @property {string} [scheme] The scheme.\r\n * @property {Array<string>} tiles The tile URL templates.\r\n * @property {Array<string>} [grids] Optional grids.\r\n * @property {number} [minzoom] Minimum zoom level.\r\n * @property {number} [maxzoom] Maximum zoom level.\r\n * @property {Array<number>} [bounds] Optional bounds.\r\n * @property {Array<number>} [center] Optional center.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\r\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [interpolate=true] Use interpolated values when resampling.  By default,\r\n * linear interpolation is used when resampling.  Set to false to use the nearest neighbor instead.\r\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\r\n * Useful when the server does not support CORS..\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {Config} [tileJSON] TileJSON configuration for this source.\r\n * If not provided, `url` must be configured.\r\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number|import(\"../size.js\").Size} [tileSize=[256, 256]] The tile size used by the tile service.\r\n * Note: `tileSize` and other non-standard TileJSON properties are currently ignored.\r\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n * @property {number|import(\"../array.js\").NearestDirectionFunction} [zDirection=0]\r\n * Choose whether to use tiles with a higher or lower zoom level when between integer\r\n * zoom levels. See {@link module:ol/tilegrid/TileGrid~TileGrid#getZForResolution}.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data in TileJSON format.\r\n * @api\r\n */\r\nclass TileJSON extends TileImage {\r\n  /**\r\n   * @param {Options} options TileJSON options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      interpolate: options.interpolate,\r\n      projection: getProjection('EPSG:3857'),\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      state: 'loading',\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition,\r\n      zDirection: options.zDirection,\r\n    });\r\n\r\n    /**\r\n     * @type {Config}\r\n     * @private\r\n     */\r\n    this.tileJSON_ = null;\r\n\r\n    /**\r\n     * @type {number|import(\"../size.js\").Size}\r\n     * @private\r\n     */\r\n    this.tileSize_ = options.tileSize;\r\n\r\n    if (options.url) {\r\n      if (options.jsonp) {\r\n        requestJSONP(\r\n          options.url,\r\n          this.handleTileJSONResponse.bind(this),\r\n          this.handleTileJSONError.bind(this)\r\n        );\r\n      } else {\r\n        const client = new XMLHttpRequest();\r\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\r\n        client.addEventListener('error', this.onXHRError_.bind(this));\r\n        client.open('GET', options.url);\r\n        client.send();\r\n      }\r\n    } else if (options.tileJSON) {\r\n      this.handleTileJSONResponse(options.tileJSON);\r\n    } else {\r\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The load event.\r\n   */\r\n  onXHRLoad_(event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\r\n      let response;\r\n      try {\r\n        response = /** @type {Config} */ (JSON.parse(client.responseText));\r\n      } catch (err) {\r\n        this.handleTileJSONError();\r\n        return;\r\n      }\r\n      this.handleTileJSONResponse(response);\r\n    } else {\r\n      this.handleTileJSONError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The error event.\r\n   */\r\n  onXHRError_(event) {\r\n    this.handleTileJSONError();\r\n  }\r\n\r\n  /**\r\n   * @return {Config} The tilejson object.\r\n   * @api\r\n   */\r\n  getTileJSON() {\r\n    return this.tileJSON_;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {Config} tileJSON Tile JSON.\r\n   */\r\n  handleTileJSONResponse(tileJSON) {\r\n    const epsg4326Projection = getProjection('EPSG:4326');\r\n\r\n    const sourceProjection = this.getProjection();\r\n    let extent;\r\n    if (tileJSON['bounds'] !== undefined) {\r\n      const transform = getTransformFromProjections(\r\n        epsg4326Projection,\r\n        sourceProjection\r\n      );\r\n      extent = applyTransform(tileJSON['bounds'], transform);\r\n    }\r\n\r\n    const gridExtent = extentFromProjection(sourceProjection);\r\n    const minZoom = tileJSON['minzoom'] || 0;\r\n    const maxZoom = tileJSON['maxzoom'] || 22;\r\n    const tileGrid = createXYZ({\r\n      extent: gridExtent,\r\n      maxZoom: maxZoom,\r\n      minZoom: minZoom,\r\n      tileSize: this.tileSize_,\r\n    });\r\n    this.tileGrid = tileGrid;\r\n\r\n    this.tileUrlFunction = createFromTemplates(tileJSON['tiles'], tileGrid);\r\n\r\n    if (tileJSON['attribution'] && !this.getAttributions()) {\r\n      const attributionExtent = extent !== undefined ? extent : gridExtent;\r\n      this.setAttributions(function (frameState) {\r\n        if (intersects(attributionExtent, frameState.extent)) {\r\n          return [tileJSON['attribution']];\r\n        }\r\n        return null;\r\n      });\r\n    }\r\n    this.tileJSON_ = tileJSON;\r\n    this.setState('ready');\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleTileJSONError() {\r\n    this.setState('error');\r\n  }\r\n}\r\n\r\nexport default TileJSON;\r\n", "/**\r\n * @module ol/DataTile\r\n */\r\nimport Tile from './Tile.js';\r\nimport TileState from './TileState.js';\r\nimport {createCanvasContext2D} from './dom.js';\r\n\r\n/**\r\n * @typedef {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} ImageLike\r\n */\r\n\r\n/**\r\n * @typedef {Uint8Array|Uint8ClampedArray|Float32Array|DataView} ArrayLike\r\n */\r\n\r\n/**\r\n * Data that can be used with a DataTile.\r\n * @typedef {ArrayLike|ImageLike} Data\r\n */\r\n\r\n/**\r\n * @param {Data} data Tile data.\r\n * @return {ImageLike|null} The image-like data.\r\n */\r\nexport function asImageLike(data) {\r\n  return data instanceof Image ||\r\n    data instanceof HTMLCanvasElement ||\r\n    data instanceof HTMLVideoElement\r\n    ? data\r\n    : null;\r\n}\r\n\r\n/**\r\n * @param {Data} data Tile data.\r\n * @return {ArrayLike|null} The array-like data.\r\n */\r\nexport function asArrayLike(data) {\r\n  return data instanceof Uint8Array ||\r\n    data instanceof Uint8ClampedArray ||\r\n    data instanceof Float32Array ||\r\n    data instanceof DataView\r\n    ? data\r\n    : null;\r\n}\r\n\r\n/**\r\n * @type {CanvasRenderingContext2D|null}\r\n */\r\nlet sharedContext = null;\r\n\r\n/**\r\n * @param {ImageLike} image The image.\r\n * @return {Uint8ClampedArray} The data.\r\n */\r\nexport function toArray(image) {\r\n  if (!sharedContext) {\r\n    sharedContext = createCanvasContext2D(\r\n      image.width,\r\n      image.height,\r\n      undefined,\r\n      {willReadFrequently: true}\r\n    );\r\n  }\r\n  const canvas = sharedContext.canvas;\r\n  const width = image.width;\r\n  if (canvas.width !== width) {\r\n    canvas.width = width;\r\n  }\r\n  const height = image.height;\r\n  if (canvas.height !== height) {\r\n    canvas.height = height;\r\n  }\r\n  sharedContext.clearRect(0, 0, width, height);\r\n  sharedContext.drawImage(image, 0, 0);\r\n  return sharedContext.getImageData(0, 0, width, height).data;\r\n}\r\n\r\n/**\r\n * @type {import('./size.js').Size}\r\n */\r\nconst defaultSize = [256, 256];\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"./tilecoord.js\").TileCoord} tileCoord Tile coordinate.\r\n * @property {function(): Promise<Data>} loader Data loader.  For loaders that generate images,\r\n * the promise should not resolve until the image is loaded.\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @property {import('./size.js').Size} [size=[256, 256]] Tile size.\r\n * @api\r\n */\r\n\r\nclass DataTile extends Tile {\r\n  /**\r\n   * @param {Options} options Tile options.\r\n   */\r\n  constructor(options) {\r\n    const state = TileState.IDLE;\r\n\r\n    super(options.tileCoord, state, {\r\n      transition: options.transition,\r\n      interpolate: options.interpolate,\r\n    });\r\n\r\n    /**\r\n     * @type {function(): Promise<Data>}\r\n     * @private\r\n     */\r\n    this.loader_ = options.loader;\r\n\r\n    /**\r\n     * @type {Data}\r\n     * @private\r\n     */\r\n    this.data_ = null;\r\n\r\n    /**\r\n     * @type {Error}\r\n     * @private\r\n     */\r\n    this.error_ = null;\r\n\r\n    /**\r\n     * @type {import('./size.js').Size|null}\r\n     * @private\r\n     */\r\n    this.size_ = options.size || null;\r\n  }\r\n\r\n  /**\r\n   * Get the tile size.\r\n   * @return {import('./size.js').Size} Tile size.\r\n   */\r\n  getSize() {\r\n    if (this.size_) {\r\n      return this.size_;\r\n    }\r\n    const imageData = asImageLike(this.data_);\r\n    if (imageData) {\r\n      return [imageData.width, imageData.height];\r\n    }\r\n    return defaultSize;\r\n  }\r\n\r\n  /**\r\n   * Get the data for the tile.\r\n   * @return {Data} Tile data.\r\n   * @api\r\n   */\r\n  getData() {\r\n    return this.data_;\r\n  }\r\n\r\n  /**\r\n   * Get any loading error.\r\n   * @return {Error} Loading error.\r\n   * @api\r\n   */\r\n  getError() {\r\n    return this.error_;\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   * @api\r\n   */\r\n  load() {\r\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\r\n      return;\r\n    }\r\n    this.state = TileState.LOADING;\r\n    this.changed();\r\n\r\n    const self = this;\r\n    this.loader_()\r\n      .then(function (data) {\r\n        self.data_ = data;\r\n        self.state = TileState.LOADED;\r\n        self.changed();\r\n      })\r\n      .catch(function (error) {\r\n        self.error_ = error;\r\n        self.state = TileState.ERROR;\r\n        self.changed();\r\n      });\r\n  }\r\n}\r\n\r\nexport default DataTile;\r\n", "/**\r\n * @module ol/reproj/DataTile\r\n */\r\nimport {ERROR_THRESHOLD} from './common.js';\r\n\r\nimport DataTile, {asArrayLike, asImageLike, toArray} from '../DataTile.js';\r\nimport EventType from '../events/EventType.js';\r\nimport TileState from '../TileState.js';\r\nimport Triangulation from './Triangulation.js';\r\nimport {\r\n  calculateSourceExtentResolution,\r\n  canvasPool,\r\n  render as renderReprojected,\r\n} from '../reproj.js';\r\nimport {clamp} from '../math.js';\r\nimport {createCanvasContext2D, releaseCanvas} from '../dom.js';\r\nimport {getArea, getIntersection} from '../extent.js';\r\nimport {listen, unlistenByKey} from '../events.js';\r\n\r\n/**\r\n * @typedef {function(number, number, number, number) : import(\"../DataTile.js\").default} TileGetter\r\n */\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {import(\"../proj/Projection.js\").default} sourceProj Source projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} sourceTileGrid Source tile grid.\r\n * @property {import(\"../proj/Projection.js\").default} targetProj Target projection.\r\n * @property {import(\"../tilegrid/TileGrid.js\").default} targetTileGrid Target tile grid.\r\n * @property {import(\"../tilecoord.js\").TileCoord} tileCoord Coordinate of the tile.\r\n * @property {import(\"../tilecoord.js\").TileCoord} [wrappedTileCoord] Coordinate of the tile wrapped in X.\r\n * @property {number} pixelRatio Pixel ratio.\r\n * @property {number} gutter Gutter of the source tiles.\r\n * @property {TileGetter} getTileFunction Function returning source tiles (z, x, y, pixelRatio).\r\n * @property {boolean} [interpolate=false] Use interpolated values when resampling.  By default,\r\n * the nearest neighbor is used when resampling.\r\n * @property {number} [errorThreshold] Acceptable reprojection error (in px).\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n */\r\n\r\n/**\r\n * @classdesc\r\n * Class encapsulating single reprojected data tile.\r\n * See {@link module:ol/source/DataTile~DataTileSource}.\r\n *\r\n */\r\nclass ReprojDataTile extends DataTile {\r\n  /**\r\n   * @param {Options} options Tile options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      tileCoord: options.tileCoord,\r\n      loader: () => Promise.resolve(new Uint8Array(4)),\r\n      interpolate: options.interpolate,\r\n      transition: options.transition,\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.pixelRatio_ = options.pixelRatio;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = options.gutter;\r\n\r\n    /**\r\n     * @type {import(\"../DataTile.js\").Data}\r\n     * @private\r\n     */\r\n    this.reprojData_ = null;\r\n\r\n    /**\r\n     * @type {Error}\r\n     * @private\r\n     */\r\n    this.reprojError_ = null;\r\n\r\n    /**\r\n     * @type {import('../size.js').Size}\r\n     * @private\r\n     */\r\n    this.reprojSize_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.sourceTileGrid_ = options.sourceTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilegrid/TileGrid.js\").default}\r\n     */\r\n    this.targetTileGrid_ = options.targetTileGrid;\r\n\r\n    /**\r\n     * @private\r\n     * @type {import(\"../tilecoord.js\").TileCoord}\r\n     */\r\n    this.wrappedTileCoord_ = options.wrappedTileCoord || options.tileCoord;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array<DataTile>}\r\n     */\r\n    this.sourceTiles_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {?Array<import(\"../events.js\").EventsKey>}\r\n     */\r\n    this.sourcesListenerKeys_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.sourceZ_ = 0;\r\n\r\n    const targetExtent = this.targetTileGrid_.getTileCoordExtent(\r\n      this.wrappedTileCoord_\r\n    );\r\n    const maxTargetExtent = this.targetTileGrid_.getExtent();\r\n    let maxSourceExtent = this.sourceTileGrid_.getExtent();\r\n\r\n    const limitedTargetExtent = maxTargetExtent\r\n      ? getIntersection(targetExtent, maxTargetExtent)\r\n      : targetExtent;\r\n\r\n    if (getArea(limitedTargetExtent) === 0) {\r\n      // Tile is completely outside range -> EMPTY\r\n      // TODO: is it actually correct that the source even creates the tile ?\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const sourceProj = options.sourceProj;\r\n    const sourceProjExtent = sourceProj.getExtent();\r\n    if (sourceProjExtent) {\r\n      if (!maxSourceExtent) {\r\n        maxSourceExtent = sourceProjExtent;\r\n      } else {\r\n        maxSourceExtent = getIntersection(maxSourceExtent, sourceProjExtent);\r\n      }\r\n    }\r\n\r\n    const targetResolution = this.targetTileGrid_.getResolution(\r\n      this.wrappedTileCoord_[0]\r\n    );\r\n\r\n    const targetProj = options.targetProj;\r\n    const sourceResolution = calculateSourceExtentResolution(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      targetResolution\r\n    );\r\n\r\n    if (!isFinite(sourceResolution) || sourceResolution <= 0) {\r\n      // invalid sourceResolution -> EMPTY\r\n      // probably edges of the projections when no extent is defined\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    const errorThresholdInPixels =\r\n      options.errorThreshold !== undefined\r\n        ? options.errorThreshold\r\n        : ERROR_THRESHOLD;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!import(\"./Triangulation.js\").default}\r\n     */\r\n    this.triangulation_ = new Triangulation(\r\n      sourceProj,\r\n      targetProj,\r\n      limitedTargetExtent,\r\n      maxSourceExtent,\r\n      sourceResolution * errorThresholdInPixels,\r\n      targetResolution\r\n    );\r\n\r\n    if (this.triangulation_.getTriangles().length === 0) {\r\n      // no valid triangles -> EMPTY\r\n      this.state = TileState.EMPTY;\r\n      return;\r\n    }\r\n\r\n    this.sourceZ_ = this.sourceTileGrid_.getZForResolution(sourceResolution);\r\n    let sourceExtent = this.triangulation_.calculateSourceExtent();\r\n\r\n    if (maxSourceExtent) {\r\n      if (sourceProj.canWrapX()) {\r\n        sourceExtent[1] = clamp(\r\n          sourceExtent[1],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3]\r\n        );\r\n        sourceExtent[3] = clamp(\r\n          sourceExtent[3],\r\n          maxSourceExtent[1],\r\n          maxSourceExtent[3]\r\n        );\r\n      } else {\r\n        sourceExtent = getIntersection(sourceExtent, maxSourceExtent);\r\n      }\r\n    }\r\n\r\n    if (!getArea(sourceExtent)) {\r\n      this.state = TileState.EMPTY;\r\n    } else {\r\n      const sourceRange = this.sourceTileGrid_.getTileRangeForExtentAndZ(\r\n        sourceExtent,\r\n        this.sourceZ_\r\n      );\r\n      const getTile = options.getTileFunction;\r\n      for (let srcX = sourceRange.minX; srcX <= sourceRange.maxX; srcX++) {\r\n        for (let srcY = sourceRange.minY; srcY <= sourceRange.maxY; srcY++) {\r\n          const tile = getTile(this.sourceZ_, srcX, srcY, this.pixelRatio_);\r\n          if (tile) {\r\n            this.sourceTiles_.push(tile);\r\n          }\r\n        }\r\n      }\r\n\r\n      if (this.sourceTiles_.length === 0) {\r\n        this.state = TileState.EMPTY;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the tile size.\r\n   * @return {import('../size.js').Size} Tile size.\r\n   */\r\n  getSize() {\r\n    return this.reprojSize_;\r\n  }\r\n\r\n  /**\r\n   * Get the data for the tile.\r\n   * @return {import(\"../DataTile.js\").Data} Tile data.\r\n   */\r\n  getData() {\r\n    return this.reprojData_;\r\n  }\r\n\r\n  /**\r\n   * Get any loading error.\r\n   * @return {Error} Loading error.\r\n   */\r\n  getError() {\r\n    return this.reprojError_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  reproject_() {\r\n    const dataSources = [];\r\n    this.sourceTiles_.forEach((tile) => {\r\n      if (!tile || tile.getState() !== TileState.LOADED) {\r\n        return;\r\n      }\r\n      const size = tile.getSize();\r\n      const gutter = this.gutter_;\r\n      /**\r\n       * @type {import(\"../DataTile.js\").ArrayLike}\r\n       */\r\n      let tileData;\r\n      const arrayData = asArrayLike(tile.getData());\r\n      if (arrayData) {\r\n        tileData = arrayData;\r\n      } else {\r\n        tileData = toArray(asImageLike(tile.getData()));\r\n      }\r\n      const pixelSize = [size[0] + 2 * gutter, size[1] + 2 * gutter];\r\n      const isFloat = tileData instanceof Float32Array;\r\n      const pixelCount = pixelSize[0] * pixelSize[1];\r\n      const DataType = isFloat ? Float32Array : Uint8Array;\r\n      const tileDataR = new DataType(tileData.buffer);\r\n      const bytesPerElement = DataType.BYTES_PER_ELEMENT;\r\n      const bytesPerPixel = (bytesPerElement * tileDataR.length) / pixelCount;\r\n      const bytesPerRow = tileDataR.byteLength / pixelSize[1];\r\n      const bandCount = Math.floor(\r\n        bytesPerRow / bytesPerElement / pixelSize[0]\r\n      );\r\n      const packedLength = pixelCount * bandCount;\r\n      let packedData = tileDataR;\r\n      if (tileDataR.length !== packedLength) {\r\n        packedData = new DataType(packedLength);\r\n        let dataIndex = 0;\r\n        let rowOffset = 0;\r\n        const colCount = pixelSize[0] * bandCount;\r\n        for (let rowIndex = 0; rowIndex < pixelSize[1]; ++rowIndex) {\r\n          for (let colIndex = 0; colIndex < colCount; ++colIndex) {\r\n            packedData[dataIndex++] = tileDataR[rowOffset + colIndex];\r\n          }\r\n          rowOffset += bytesPerRow / bytesPerElement;\r\n        }\r\n      }\r\n      dataSources.push({\r\n        extent: this.sourceTileGrid_.getTileCoordExtent(tile.tileCoord),\r\n        data: new Uint8Array(packedData.buffer),\r\n        dataType: DataType,\r\n        bytesPerPixel: bytesPerPixel,\r\n        pixelSize: pixelSize,\r\n      });\r\n    });\r\n    this.sourceTiles_.length = 0;\r\n\r\n    if (dataSources.length === 0) {\r\n      this.state = TileState.ERROR;\r\n    } else {\r\n      const z = this.wrappedTileCoord_[0];\r\n      const size = this.targetTileGrid_.getTileSize(z);\r\n      const targetWidth = typeof size === 'number' ? size : size[0];\r\n      const targetHeight = typeof size === 'number' ? size : size[1];\r\n      const targetResolution = this.targetTileGrid_.getResolution(z);\r\n      const sourceResolution = this.sourceTileGrid_.getResolution(\r\n        this.sourceZ_\r\n      );\r\n\r\n      const targetExtent = this.targetTileGrid_.getTileCoordExtent(\r\n        this.wrappedTileCoord_\r\n      );\r\n\r\n      let dataR, dataU;\r\n\r\n      const bytesPerPixel = dataSources[0].bytesPerPixel;\r\n\r\n      const reprojs = Math.ceil(bytesPerPixel / 3);\r\n      for (let reproj = reprojs - 1; reproj >= 0; --reproj) {\r\n        const sources = [];\r\n        for (let i = 0, len = dataSources.length; i < len; ++i) {\r\n          const dataSource = dataSources[i];\r\n          const buffer = dataSource.data;\r\n          const pixelSize = dataSource.pixelSize;\r\n          const width = pixelSize[0];\r\n          const height = pixelSize[1];\r\n          const context = createCanvasContext2D(width, height, canvasPool);\r\n          const imageData = context.createImageData(width, height);\r\n          const data = imageData.data;\r\n          let offset = reproj * 3;\r\n          for (let j = 0, len = data.length; j < len; j += 4) {\r\n            data[j] = buffer[offset];\r\n            data[j + 1] = buffer[offset + 1];\r\n            data[j + 2] = buffer[offset + 2];\r\n            data[j + 3] = 255;\r\n            offset += bytesPerPixel;\r\n          }\r\n          context.putImageData(imageData, 0, 0);\r\n          sources.push({\r\n            extent: dataSource.extent,\r\n            image: context.canvas,\r\n          });\r\n        }\r\n\r\n        const canvas = renderReprojected(\r\n          targetWidth,\r\n          targetHeight,\r\n          this.pixelRatio_,\r\n          sourceResolution,\r\n          this.sourceTileGrid_.getExtent(),\r\n          targetResolution,\r\n          targetExtent,\r\n          this.triangulation_,\r\n          sources,\r\n          this.gutter_,\r\n          false,\r\n          false\r\n        );\r\n\r\n        for (let i = 0, len = sources.length; i < len; ++i) {\r\n          const canvas = sources[i].image;\r\n          const context = canvas.getContext('2d');\r\n          releaseCanvas(context);\r\n          canvasPool.push(context.canvas);\r\n        }\r\n\r\n        const context = canvas.getContext('2d');\r\n        const imageData = context.getImageData(\r\n          0,\r\n          0,\r\n          canvas.width,\r\n          canvas.height\r\n        );\r\n\r\n        releaseCanvas(context);\r\n        canvasPool.push(canvas);\r\n\r\n        if (!dataR) {\r\n          dataU = new Uint8Array(\r\n            bytesPerPixel * imageData.width * imageData.height\r\n          );\r\n          dataR = new dataSources[0].dataType(dataU.buffer);\r\n        }\r\n\r\n        const data = imageData.data;\r\n        let offset = reproj * 3;\r\n        for (let i = 0, len = data.length; i < len; i += 4) {\r\n          if (data[i + 3] === 255) {\r\n            dataU[offset] = data[i];\r\n            dataU[offset + 1] = data[i + 1];\r\n            dataU[offset + 2] = data[i + 2];\r\n          } else {\r\n            dataU[offset] = 0;\r\n            dataU[offset + 1] = 0;\r\n            dataU[offset + 2] = 0;\r\n          }\r\n          offset += bytesPerPixel;\r\n        }\r\n      }\r\n\r\n      this.reprojData_ = dataR;\r\n      this.reprojSize_ = [\r\n        Math.round(targetWidth * this.pixelRatio_),\r\n        Math.round(targetHeight * this.pixelRatio_),\r\n      ];\r\n      this.state = TileState.LOADED;\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load not yet loaded URI.\r\n   */\r\n  load() {\r\n    if (this.state !== TileState.IDLE && this.state !== TileState.ERROR) {\r\n      return;\r\n    }\r\n    this.state = TileState.LOADING;\r\n    this.changed();\r\n\r\n    let leftToLoad = 0;\r\n\r\n    this.sourcesListenerKeys_ = [];\r\n    this.sourceTiles_.forEach((tile) => {\r\n      const state = tile.getState();\r\n      if (state !== TileState.IDLE && state !== TileState.LOADING) {\r\n        return;\r\n      }\r\n      leftToLoad++;\r\n\r\n      const sourceListenKey = listen(\r\n        tile,\r\n        EventType.CHANGE,\r\n        function () {\r\n          const state = tile.getState();\r\n          if (\r\n            state == TileState.LOADED ||\r\n            state == TileState.ERROR ||\r\n            state == TileState.EMPTY\r\n          ) {\r\n            unlistenByKey(sourceListenKey);\r\n            leftToLoad--;\r\n            if (leftToLoad === 0) {\r\n              this.unlistenSources_();\r\n              this.reproject_();\r\n            }\r\n          }\r\n        },\r\n        this\r\n      );\r\n      this.sourcesListenerKeys_.push(sourceListenKey);\r\n    });\r\n\r\n    if (leftToLoad === 0) {\r\n      setTimeout(this.reproject_.bind(this), 0);\r\n    } else {\r\n      this.sourceTiles_.forEach(function (tile) {\r\n        const state = tile.getState();\r\n        if (state == TileState.IDLE) {\r\n          tile.load();\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  unlistenSources_() {\r\n    this.sourcesListenerKeys_.forEach(unlistenByKey);\r\n    this.sourcesListenerKeys_ = null;\r\n  }\r\n}\r\n\r\nexport default ReprojDataTile;\r\n"],
  "mappings": "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",
  "names": ["Layer_default", "isEmpty", "scale", "context", "render", "transform", "createOrUpdate", "createOrUpdate", "createOrUpdate", "scale", "Tile_default", "Tile_default", "Tile_default", "context", "VectorTile", "VectorTile_default", "canvasPool", "context", "isEmpty", "sourceState", "Image_default", "Image_default", "extent", "resolution", "pixelRatio", "Tile_default", "Tile_default", "state", "canvasPool", "Layer_default", "Tile_default", "context", "dx", "dy", "i", "tileSource", "frameState", "Tile_default", "output", "buffer", "Image_default", "context", "Tile_default", "Tile_default", "z", "x", "y", "pixelRatio", "render", "transform", "sharedContext", "Tile_default", "buffer", "context", "canvasPool", "imageData", "data", "offset", "len", "canvas", "state", "DataTile_default"]
}
